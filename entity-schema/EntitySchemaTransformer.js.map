{"version":3,"sources":["../../src/entity-schema/EntitySchemaTransformer.ts"],"names":[],"mappings":"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","file":"EntitySchemaTransformer.js","sourcesContent":["import {EntitySchema} from \"./EntitySchema\";\r\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\r\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\r\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\r\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\r\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\r\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\r\nimport {JoinTableOptions} from \"../decorator/options/JoinTableOptions\";\r\nimport {JoinTableMultipleColumnsOptions} from \"../decorator/options/JoinTableMultipleColumnsOptions\";\r\nimport {ColumnMode} from \"../metadata-args/types/ColumnMode\";\r\nimport {GeneratedMetadataArgs} from \"../metadata-args/GeneratedMetadataArgs\";\r\nimport {UniqueMetadataArgs} from \"../metadata-args/UniqueMetadataArgs\";\r\nimport {CheckMetadataArgs} from \"../metadata-args/CheckMetadataArgs\";\r\nimport {ExclusionMetadataArgs} from \"../metadata-args/ExclusionMetadataArgs\";\r\nimport { EntitySchemaColumnOptions } from \"./EntitySchemaColumnOptions\";\r\nimport { EntitySchemaOptions } from \"./EntitySchemaOptions\";\r\nimport { EntitySchemaEmbeddedError } from \"./EntitySchemaEmbeddedError\";\r\n\r\n/**\r\n * Transforms entity schema into metadata args storage.\r\n * The result will be just like entities read from decorators.\r\n */\r\nexport class EntitySchemaTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Transforms entity schema into new metadata args storage object.\r\n     */\r\n    transform(schemas: EntitySchema<any>[]): MetadataArgsStorage {\r\n        const metadataArgsStorage = new MetadataArgsStorage();\r\n\r\n        schemas.forEach(entitySchema => {\r\n            const options = entitySchema.options;\r\n\r\n            // add table metadata args from the schema\r\n            const tableMetadata: TableMetadataArgs = {\r\n                target: options.target || options.name,\r\n                name: options.tableName,\r\n                database: options.database,\r\n                schema: options.schema,\r\n                type: options.type || \"regular\",\r\n                orderBy: options.orderBy,\r\n                synchronize: options.synchronize,\r\n                withoutRowid: !!options.withoutRowid,\r\n                expression: options.expression\r\n            };\r\n            metadataArgsStorage.tables.push(tableMetadata);\r\n\r\n            this.transformColumnsRecursive(options, metadataArgsStorage);\r\n        });\r\n\r\n        return metadataArgsStorage;\r\n    }\r\n\r\n    private transformColumnsRecursive(options: EntitySchemaOptions<any>, metadataArgsStorage: MetadataArgsStorage): void {\r\n        // add columns metadata args from the schema\r\n        Object.keys(options.columns).forEach(columnName => {\r\n            const column = options.columns[columnName]!;\r\n\r\n            const regularColumn = column as EntitySchemaColumnOptions;\r\n            let mode: ColumnMode = \"regular\";\r\n            if (regularColumn.createDate)\r\n                mode = \"createDate\";\r\n            if (regularColumn.updateDate)\r\n                mode = \"updateDate\";\r\n            if (regularColumn.deleteDate)\r\n                mode = \"deleteDate\";\r\n            if (regularColumn.version)\r\n                mode = \"version\";\r\n            if (regularColumn.treeChildrenCount)\r\n                mode = \"treeChildrenCount\";\r\n            if (regularColumn.treeLevel)\r\n                mode = \"treeLevel\";\r\n            if (regularColumn.objectId)\r\n                mode = \"objectId\";\r\n\r\n            const columnArgs: ColumnMetadataArgs = {\r\n                target: options.target || options.name,\r\n                mode: mode,\r\n                propertyName: columnName,\r\n                options: {\r\n                    type: regularColumn.type,\r\n                    name: regularColumn.objectId ? \"_id\" : regularColumn.name,\r\n                    length: regularColumn.length,\r\n                    width: regularColumn.width,\r\n                    nullable: regularColumn.nullable,\r\n                    readonly: regularColumn.readonly,\r\n                    update: regularColumn.update,\r\n                    select: regularColumn.select,\r\n                    insert: regularColumn.insert,\r\n                    primary: regularColumn.primary,\r\n                    unique: regularColumn.unique,\r\n                    comment: regularColumn.comment,\r\n                    default: regularColumn.default,\r\n                    onUpdate: regularColumn.onUpdate,\r\n                    precision: regularColumn.precision,\r\n                    scale: regularColumn.scale,\r\n                    zerofill: regularColumn.zerofill,\r\n                    unsigned: regularColumn.unsigned,\r\n                    charset: regularColumn.charset,\r\n                    collation: regularColumn.collation,\r\n                    enum: regularColumn.enum,\r\n                    asExpression: regularColumn.asExpression,\r\n                    generatedType: regularColumn.generatedType,\r\n                    hstoreType: regularColumn.hstoreType,\r\n                    array: regularColumn.array,\r\n                    transformer: regularColumn.transformer,\r\n                    spatialFeatureType: regularColumn.spatialFeatureType,\r\n                    srid: regularColumn.srid\r\n                }\r\n            };\r\n            metadataArgsStorage.columns.push(columnArgs);\r\n\r\n            if (regularColumn.generated) {\r\n                const generationArgs: GeneratedMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    propertyName: columnName,\r\n                    strategy: typeof regularColumn.generated === \"string\" ? regularColumn.generated : \"increment\"\r\n                };\r\n                metadataArgsStorage.generations.push(generationArgs);\r\n            }\r\n\r\n            if (regularColumn.unique)\r\n                metadataArgsStorage.uniques.push({\r\n                    target: options.target || options.name,\r\n                    columns: [columnName]\r\n                });\r\n        });\r\n\r\n        // add relation metadata args from the schema\r\n        if (options.relations) {\r\n            Object.keys(options.relations).forEach(relationName => {\r\n                const relationSchema = options.relations![relationName]!;\r\n                const relation: RelationMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    propertyName: relationName,\r\n                    relationType: relationSchema.type,\r\n                    isLazy: relationSchema.lazy || false,\r\n                    type: relationSchema.target,\r\n                    inverseSideProperty: relationSchema.inverseSide,\r\n                    isTreeParent: relationSchema.treeParent,\r\n                    isTreeChildren: relationSchema.treeChildren,\r\n                    options: {\r\n                        eager: relationSchema.eager || false,\r\n                        cascade: relationSchema.cascade,\r\n                        nullable: relationSchema.nullable,\r\n                        onDelete: relationSchema.onDelete,\r\n                        onUpdate: relationSchema.onUpdate,\r\n                        deferrable: relationSchema.deferrable,\r\n                        primary: relationSchema.primary,\r\n                        createForeignKeyConstraints: relationSchema.createForeignKeyConstraints,\r\n                        persistence: relationSchema.persistence,\r\n                        orphanedRowAction: relationSchema.orphanedRowAction\r\n                    }\r\n                };\r\n\r\n                metadataArgsStorage.relations.push(relation);\r\n\r\n                // add join column\r\n                if (relationSchema.joinColumn) {\r\n                    if (typeof relationSchema.joinColumn === \"boolean\") {\r\n                        const joinColumn: JoinColumnMetadataArgs = {\r\n                            target: options.target || options.name,\r\n                            propertyName: relationName\r\n                        };\r\n                        metadataArgsStorage.joinColumns.push(joinColumn);\r\n                    } else {\r\n                        const joinColumnsOptions = Array.isArray(relationSchema.joinColumn) ? relationSchema.joinColumn : [relationSchema.joinColumn];\r\n\r\n                        for (const joinColumnOption of joinColumnsOptions) {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: options.target || options.name,\r\n                                propertyName: relationName,\r\n                                name: joinColumnOption.name,\r\n                                referencedColumnName: joinColumnOption.referencedColumnName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.push(joinColumn);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // add join table\r\n                if (relationSchema.joinTable) {\r\n                    if (typeof relationSchema.joinTable === \"boolean\") {\r\n                        const joinTable: JoinTableMetadataArgs = {\r\n                            target: options.target || options.name,\r\n                            propertyName: relationName\r\n                        };\r\n                        metadataArgsStorage.joinTables.push(joinTable);\r\n                    } else {\r\n                        const joinTable: JoinTableMetadataArgs = {\r\n                            target: options.target || options.name,\r\n                            propertyName: relationName,\r\n                            name: relationSchema.joinTable.name,\r\n                            database: relationSchema.joinTable.database,\r\n                            schema: relationSchema.joinTable.schema,\r\n                            joinColumns: ((relationSchema.joinTable as JoinTableOptions).joinColumn ? [(relationSchema.joinTable as JoinTableOptions).joinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).joinColumns) as any,\r\n                            inverseJoinColumns: ((relationSchema.joinTable as JoinTableOptions).inverseJoinColumn ? [(relationSchema.joinTable as JoinTableOptions).inverseJoinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\r\n                        };\r\n                        metadataArgsStorage.joinTables.push(joinTable);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // add index metadata args from the schema\r\n        if (options.indices) {\r\n            options.indices.forEach(index => {\r\n                const indexArgs: IndexMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    name: index.name,\r\n                    unique: index.unique === true ? true : false,\r\n                    spatial: index.spatial === true ? true : false,\r\n                    fulltext: index.fulltext === true ? true : false,\r\n                    parser: index.parser,\r\n                    synchronize: index.synchronize === false ? false : true,\r\n                    where: index.where,\r\n                    sparse: index.sparse,\r\n                    columns: index.columns\r\n                };\r\n                metadataArgsStorage.indices.push(indexArgs);\r\n            });\r\n        }\r\n\r\n        // add unique metadata args from the schema\r\n        if (options.uniques) {\r\n            options.uniques.forEach(unique => {\r\n                const uniqueArgs: UniqueMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    name: unique.name,\r\n                    columns: unique.columns,\r\n                    deferrable: unique.deferrable,\r\n                };\r\n                metadataArgsStorage.uniques.push(uniqueArgs);\r\n            });\r\n        }\r\n\r\n        // add check metadata args from the schema\r\n        if (options.checks) {\r\n            options.checks.forEach(check => {\r\n                const checkArgs: CheckMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    name: check.name,\r\n                    expression: check.expression\r\n                };\r\n                metadataArgsStorage.checks.push(checkArgs);\r\n            });\r\n        }\r\n\r\n        // add exclusion metadata args from the schema\r\n        if (options.exclusions) {\r\n            options.exclusions.forEach(exclusion => {\r\n                const exclusionArgs: ExclusionMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    name: exclusion.name,\r\n                    expression: exclusion.expression\r\n                };\r\n                metadataArgsStorage.exclusions.push(exclusionArgs);\r\n            });\r\n        }\r\n\r\n        if (options.embeddeds) {\r\n            Object.keys(options.embeddeds).forEach(columnName => {\r\n                const embeddedOptions = options.embeddeds![columnName];\r\n\r\n                if (!embeddedOptions.schema)\r\n                    throw EntitySchemaEmbeddedError.createEntitySchemaIsRequiredException(columnName);\r\n\r\n                const embeddedSchema = embeddedOptions.schema.options;\r\n\r\n                metadataArgsStorage.embeddeds.push({\r\n                    target: options.target || options.name,\r\n                    propertyName: columnName,\r\n                    isArray: embeddedOptions.array === true,\r\n                    prefix: embeddedOptions.prefix !== undefined ? embeddedOptions.prefix : undefined,\r\n                    type: () => embeddedSchema?.target || embeddedSchema.name,\r\n                });\r\n\r\n                this.transformColumnsRecursive(embeddedSchema, metadataArgsStorage);\r\n            });\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}