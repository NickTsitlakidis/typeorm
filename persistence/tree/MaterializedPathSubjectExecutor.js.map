{"version":3,"sources":["../../src/persistence/tree/MaterializedPathSubjectExecutor.ts"],"names":[],"mappings":"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","file":"MaterializedPathSubjectExecutor.js","sourcesContent":["import {Subject} from \"../Subject\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\n\r\n/**\r\n * Executes subject operations for materialized-path tree entities.\r\n */\r\nexport class MaterializedPathSubjectExecutor {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected queryRunner: QueryRunner) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes operations when subject is being inserted.\r\n     */\r\n    async insert(subject: Subject): Promise<void> {\r\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(subject.entity!); // if entity was attached via parent\r\n        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\r\n            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\r\n\r\n        const parentId = subject.metadata.getEntityIdMap(parent);\r\n\r\n        let parentPath: string = \"\";\r\n        if (parentId) {\r\n            parentPath = await this.getEntityPath(subject, parentId);\r\n        }\r\n\r\n        const insertedEntityId = subject.metadata.treeParentRelation!.joinColumns.map(joinColumn => {\r\n            return joinColumn.referencedColumn!.getEntityValue(subject.insertedValueSet!);\r\n        }).join(\"_\");\r\n\r\n        await this.queryRunner.manager\r\n            .createQueryBuilder()\r\n            .update(subject.metadata.target)\r\n            .set({\r\n                [subject.metadata.materializedPathColumn!.propertyPath]: parentPath + insertedEntityId + \".\"\r\n            } as any)\r\n            .where(subject.identifier!)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Executes operations when subject is being updated.\r\n     */\r\n    async update(subject: Subject): Promise<void> {\r\n        let newParent = subject.metadata.treeParentRelation!.getEntityValue(subject.entity!); // if entity was attached via parent\r\n        if (!newParent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\r\n            newParent = subject.parentSubject.entity;\r\n\r\n        let entity = subject.databaseEntity; // if entity was attached via parent\r\n        if (!entity && newParent) // if entity was attached via children\r\n            entity = subject.metadata.treeChildrenRelation!.getEntityValue(newParent).find((child: any) => {\r\n                return Object.entries(subject.identifier!).every(([key, value]) => child[key] === value);\r\n            });\r\n\r\n\r\n        const oldParent = subject.metadata.treeParentRelation!.getEntityValue(entity!);\r\n        const oldParentId = subject.metadata.getEntityIdMap(oldParent);\r\n        const newParentId = subject.metadata.getEntityIdMap(newParent);\r\n\r\n        // Exit if the new and old parents are the same\r\n        if (OrmUtils.compareIds(oldParentId, newParentId)) {\r\n            return;\r\n        }\r\n\r\n        let newParentPath: string = \"\";\r\n        if (newParentId) {\r\n            newParentPath = await this.getEntityPath(subject, newParentId);\r\n        }\r\n\r\n        let oldParentPath: string = \"\";\r\n        if (oldParentId) {\r\n            oldParentPath = await this.getEntityPath(subject, oldParentId) || \"\";\r\n        }\r\n\r\n        const entityPath = subject.metadata.treeParentRelation!.joinColumns.map(joinColumn => {\r\n            return joinColumn.referencedColumn!.getEntityValue(entity!);\r\n        }).join(\"_\");\r\n\r\n        const propertyPath = subject.metadata.materializedPathColumn!.propertyPath;\r\n        await this.queryRunner.manager\r\n            .createQueryBuilder()\r\n            .update(subject.metadata.target)\r\n            .set({\r\n                [propertyPath]: () => `REPLACE(${propertyPath}, '${oldParentPath}${entityPath}.', '${newParentPath}${entityPath}.')`\r\n            } as any)\r\n            .where(`${propertyPath} LIKE :path`, { path: `${oldParentPath}${entityPath}.%` })\r\n            .execute();\r\n    }\r\n\r\n    private getEntityPath(subject: Subject, id: ObjectLiteral): Promise<string> {\r\n        return this.queryRunner.manager\r\n            .createQueryBuilder()\r\n            .select(subject.metadata.targetName + \".\" + subject.metadata.materializedPathColumn!.propertyPath, \"path\")\r\n            .from(subject.metadata.target, subject.metadata.targetName)\r\n            .whereInIds(id)\r\n            .getRawOne()\r\n            .then(result => result ? result[\"path\"] : \"\");\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}