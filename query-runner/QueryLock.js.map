{"version":3,"sources":["../../src/query-runner/QueryLock.ts"],"names":[],"mappings":";;;;AAAA;IAAA;QACqB,UAAK,GAAoB,EAAE,CAAC;IAuBjD,CAAC;IArBS,2BAAO,GAAb;;;;;;;wBAEU,cAAc,GAAG,IAAI,OAAO,CAAO,UAAC,EAAE,IAAK,OAAA,OAAO,GAAG,EAAE,EAAZ,CAAY,CAAC,CAAC;wBAGzD,oBAAoB,sDAAO,IAAI,CAAC,KAAK,SAAC,CAAC;wBAC7C,0CAA0C;wBAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;6BAE5B,CAAA,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA/B,wBAA+B;wBAC/B,qBAAM,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAA;;wBAAvC,SAAuC,CAAC;;4BAG5C,sBAAO;4BACH,OAAO,EAAE,CAAC;4BAEV,IAAI,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;gCACrC,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;6BAC5D;wBACL,CAAC,EAAC;;;;KACL;IACL,gBAAC;AAAD,CAxBA,AAwBC,IAAA;AAxBY,8BAAS","file":"QueryLock.js","sourcesContent":["export class QueryLock {\r\n    private readonly queue: Promise<void>[] = [];\r\n\r\n    async acquire(): Promise<() => void> {\r\n        let release: Function;\r\n        const waitingPromise = new Promise<void>((ok) => release = ok);\r\n\r\n        // Get track of everyone we need to wait on..\r\n        const otherWaitingPromises = [...this.queue];\r\n        // Put ourselves onto the end of the queue\r\n        this.queue.push(waitingPromise);\r\n\r\n        if (otherWaitingPromises.length > 0) {\r\n            await Promise.all(otherWaitingPromises);\r\n        }\r\n\r\n        return () => {\r\n            release();\r\n\r\n            if (this.queue.includes(waitingPromise)) {\r\n                this.queue.splice(this.queue.indexOf(waitingPromise), 1);\r\n            }\r\n        };\r\n    }\r\n}\r\n"],"sourceRoot":".."}