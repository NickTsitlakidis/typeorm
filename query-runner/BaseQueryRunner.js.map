{"version":3,"sources":["../../src/query-runner/BaseQueryRunner.ts"],"names":[],"mappings":"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","file":"BaseQueryRunner.js","sourcesContent":["import {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\r\nimport {Query} from \"../driver/Query\";\r\nimport {SqlInMemory} from \"../driver/SqlInMemory\";\r\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\r\nimport {View} from \"../schema-builder/view/View\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {Table} from \"../schema-builder/table/Table\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\nimport {TableColumn} from \"../schema-builder/table/TableColumn\";\r\nimport {Broadcaster} from \"../subscriber/Broadcaster\";\r\nimport {ReplicationMode} from \"../driver/types/ReplicationMode\";\r\nimport { TypeORMError } from \"../error/TypeORMError\";\r\nimport { EntityMetadata } from \"../metadata/EntityMetadata\";\r\nimport { TableForeignKey } from \"../schema-builder/table/TableForeignKey\";\r\nimport { OrmUtils } from \"../util/OrmUtils\";\r\nimport {MetadataTableType} from \"../driver/types/MetadataTableType\";\r\n\r\nexport abstract class BaseQueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by this query runner.\r\n     */\r\n    connection: Connection;\r\n\r\n    /**\r\n     * Entity manager working only with current query runner.\r\n     */\r\n    manager: EntityManager;\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    isReleased = false;\r\n\r\n    /**\r\n     * Indicates if transaction is in progress.\r\n     */\r\n    isTransactionActive = false;\r\n\r\n    /**\r\n     * Stores temporarily user data.\r\n     * Useful for sharing data with subscribers.\r\n     */\r\n    data = {};\r\n\r\n    /**\r\n     * All synchronized tables in the database.\r\n     */\r\n    loadedTables: Table[] = [];\r\n\r\n    /**\r\n     * All synchronized views in the database.\r\n     */\r\n    loadedViews: View[] = [];\r\n\r\n    /**\r\n     * Broadcaster used on this query runner to broadcast entity events.\r\n     */\r\n    broadcaster: Broadcaster;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Real database connection from a connection pool used to perform queries.\r\n     */\r\n    protected databaseConnection: any;\r\n\r\n    /**\r\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\r\n     */\r\n    protected sqlMemoryMode: boolean = false;\r\n\r\n    /**\r\n     * Sql-s stored if \"sql in memory\" mode is enabled.\r\n     */\r\n    protected sqlInMemory: SqlInMemory = new SqlInMemory();\r\n\r\n    /**\r\n     * Mode in which query runner executes.\r\n     * Used for replication.\r\n     * If replication is not setup its value is ignored.\r\n     */\r\n    protected mode: ReplicationMode;\r\n\r\n    /**\r\n     * current depth of transaction.\r\n     * for transactionDepth > 0 will use SAVEPOINT to start and commit/rollback transaction blocks\r\n     */\r\n    protected transactionDepth = 0;\r\n\r\n    private cachedTablePaths: Record<string, string> = {};\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Abstract Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    abstract query(query: string, parameters?: any[], useStructuredResult?: boolean): Promise<any>;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Abstract Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected abstract loadTables(tablePaths?: string[]): Promise<Table[]>;\r\n\r\n    protected abstract loadViews(tablePaths?: string[]): Promise<View[]>;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Called before migrations are run.\r\n     */\r\n    async beforeMigration(): Promise<void> {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Called after migrations are run.\r\n     */\r\n    async afterMigration(): Promise<void> {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async getTable(tablePath: string): Promise<Table|undefined> {\r\n        this.loadedTables = await this.loadTables([tablePath]);\r\n        return this.loadedTables.length > 0 ? this.loadedTables[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database.\r\n     */\r\n    async getTables(tableNames?: string[]): Promise<Table[]> {\r\n        if (!tableNames) {\r\n            // Don't cache in this case.\r\n            // This is the new case & isn't used anywhere else anyway.\r\n            return await this.loadTables(tableNames);\r\n        }\r\n\r\n        this.loadedTables = await this.loadTables(tableNames);\r\n        return this.loadedTables;\r\n    }\r\n\r\n    /**\r\n     * Loads given view's data from the database.\r\n     */\r\n    async getView(viewPath: string): Promise<View|undefined> {\r\n        this.loadedViews = await this.loadViews([viewPath]);\r\n        return this.loadedViews.length > 0 ? this.loadedViews[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads given view's data from the database.\r\n     */\r\n    async getViews(viewPaths?: string[]): Promise<View[]> {\r\n        this.loadedViews = await this.loadViews(viewPaths);\r\n        return this.loadedViews;\r\n    }\r\n\r\n    /**\r\n     * Enables special query runner mode in which sql queries won't be executed,\r\n     * instead they will be memorized into a special variable inside query runner.\r\n     * You can get memorized sql using getMemorySql() method.\r\n     */\r\n    enableSqlMemory(): void {\r\n        this.sqlInMemory = new SqlInMemory();\r\n        this.sqlMemoryMode = true;\r\n    }\r\n\r\n    /**\r\n     * Disables special query runner mode in which sql queries won't be executed\r\n     * started by calling enableSqlMemory() method.\r\n     *\r\n     * Previously memorized sql will be flushed.\r\n     */\r\n    disableSqlMemory(): void {\r\n        this.sqlInMemory = new SqlInMemory();\r\n        this.sqlMemoryMode = false;\r\n    }\r\n\r\n    /**\r\n     * Flushes all memorized sqls.\r\n     */\r\n    clearSqlMemory(): void {\r\n        this.sqlInMemory = new SqlInMemory();\r\n    }\r\n\r\n    /**\r\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\r\n     */\r\n    getMemorySql(): SqlInMemory {\r\n        return this.sqlInMemory;\r\n    }\r\n\r\n    /**\r\n     * Executes up sql queries.\r\n     */\r\n    async executeMemoryUpSql(): Promise<void> {\r\n        for (const {query, parameters} of this.sqlInMemory.upQueries) {\r\n            await this.query(query, parameters);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes down sql queries.\r\n     */\r\n    async executeMemoryDownSql(): Promise<void> {\r\n        for (const {query, parameters} of this.sqlInMemory.downQueries.reverse()) {\r\n            await this.query(query, parameters);\r\n        }\r\n    }\r\n\r\n    getReplicationMode(): ReplicationMode {\r\n        return this.mode;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets view from previously loaded views, otherwise loads it from database.\r\n     */\r\n    protected async getCachedView(viewName: string): Promise<View> {\r\n        const view = this.loadedViews.find(view => view.name === viewName);\r\n        if (view) return view;\r\n\r\n        const foundViews = await this.loadViews([viewName]);\r\n        if (foundViews.length > 0) {\r\n            this.loadedViews.push(foundViews[0]);\r\n            return foundViews[0];\r\n        } else {\r\n            throw new TypeORMError(`View \"${viewName}\" does not exist.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets table from previously loaded tables, otherwise loads it from database.\r\n     */\r\n    protected async getCachedTable(tableName: string): Promise<Table> {\r\n        if (tableName in this.cachedTablePaths) {\r\n            const tablePath = this.cachedTablePaths[tableName];\r\n            const table = this.loadedTables.find(table => this.getTablePath(table) === tablePath);\r\n\r\n            if (table) {\r\n                return table;\r\n            }\r\n        }\r\n\r\n        const foundTables = await this.loadTables([tableName]);\r\n\r\n        if (foundTables.length > 0) {\r\n            const foundTablePath = this.getTablePath(foundTables[0]);\r\n\r\n            const cachedTable = this.loadedTables.find((table) => this.getTablePath(table) === foundTablePath);\r\n\r\n            if (!cachedTable) {\r\n                this.cachedTablePaths[tableName] = this.getTablePath(foundTables[0]);\r\n                this.loadedTables.push(foundTables[0]);\r\n                return foundTables[0];\r\n            } else {\r\n                return cachedTable;\r\n            }\r\n        } else {\r\n            throw new TypeORMError(`Table \"${tableName}\" does not exist.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Replaces loaded table with given changed table.\r\n     */\r\n    protected replaceCachedTable(table: Table, changedTable: Table): void {\r\n        const oldTablePath = this.getTablePath(table);\r\n        const foundTable = this.loadedTables.find(loadedTable => this.getTablePath(loadedTable) === oldTablePath);\r\n\r\n        // Clean up the lookup cache..\r\n        for (const [key, cachedPath] of Object.entries(this.cachedTablePaths)) {\r\n            if (cachedPath === oldTablePath) {\r\n                this.cachedTablePaths[key] = this.getTablePath(changedTable);\r\n            }\r\n        }\r\n\r\n        if (foundTable) {\r\n            foundTable.database = changedTable.database;\r\n            foundTable.schema = changedTable.schema;\r\n            foundTable.name = changedTable.name;\r\n            foundTable.columns = changedTable.columns;\r\n            foundTable.indices = changedTable.indices;\r\n            foundTable.foreignKeys = changedTable.foreignKeys;\r\n            foundTable.uniques = changedTable.uniques;\r\n            foundTable.checks = changedTable.checks;\r\n            foundTable.justCreated = changedTable.justCreated;\r\n            foundTable.engine = changedTable.engine;\r\n        }\r\n    }\r\n\r\n    protected getTablePath(target: EntityMetadata | Table | View | TableForeignKey | string): string {\r\n        const parsed = this.connection.driver.parseTableName(target);\r\n\r\n        return this.connection.driver.buildTableName(\r\n            parsed.tableName,\r\n            parsed.schema,\r\n            parsed.database\r\n        );\r\n    }\r\n\r\n    protected getTypeormMetadataTableName(): string {\r\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\r\n        return this.connection.driver.buildTableName(this.connection.metadataTableName, options.schema, options.database);\r\n    }\r\n\r\n    /**\r\n     * Generates SQL query to insert a record into typeorm metadata table.\r\n     */\r\n    protected insertTypeormMetadataSql({\r\n        database,\r\n        schema,\r\n        table,\r\n        type,\r\n        name,\r\n        value\r\n    }: {\r\n        database?: string,\r\n        schema?: string,\r\n        table?: string,\r\n        type: MetadataTableType\r\n        name: string,\r\n        value?: string\r\n    }): Query {\r\n        const [query, parameters] = this.connection.createQueryBuilder()\r\n            .insert()\r\n            .into(this.getTypeormMetadataTableName())\r\n            .values({ database: database, schema: schema, table: table, type: type, name: name, value: value })\r\n            .getQueryAndParameters();\r\n\r\n        return new Query(query, parameters);\r\n    }\r\n\r\n    /**\r\n     * Generates SQL query to delete a record from typeorm metadata table.\r\n     */\r\n    protected deleteTypeormMetadataSql({\r\n        database,\r\n        schema,\r\n        table,\r\n        type,\r\n        name\r\n    }: {\r\n        database?: string,\r\n        schema?: string,\r\n        table?: string,\r\n        type: MetadataTableType,\r\n        name: string\r\n    }): Query {\r\n\r\n        const qb = this.connection.createQueryBuilder();\r\n        const deleteQb = qb.delete()\r\n            .from(this.getTypeormMetadataTableName())\r\n            .where(`${qb.escape(\"type\")} = :type`, { type })\r\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name });\r\n\r\n        if (database) {\r\n            deleteQb.andWhere(`${qb.escape(\"database\")} = :database`, { database });\r\n        }\r\n\r\n        if (schema) {\r\n            deleteQb.andWhere(`${qb.escape(\"schema\")} = :schema`, { schema });\r\n        }\r\n\r\n        if (table) {\r\n            deleteQb.andWhere(`${qb.escape(\"table\")} = :table`, { table });\r\n        }\r\n\r\n        const [query, parameters] = deleteQb.getQueryAndParameters();\r\n        return new Query(query, parameters);\r\n    }\r\n\r\n    /**\r\n     * Checks if at least one of column properties was changed.\r\n     * Does not checks column type, length and autoincrement, because these properties changes separately.\r\n     */\r\n    protected isColumnChanged(oldColumn: TableColumn, newColumn: TableColumn, checkDefault?: boolean, checkComment?: boolean): boolean {\r\n        // this logs need to debug issues in column change detection. Do not delete it!\r\n\r\n        // console.log(\"charset ---------------\");\r\n        // console.log(oldColumn.charset !== newColumn.charset);\r\n        // console.log(oldColumn.charset, newColumn.charset);\r\n        // console.log(\"collation ---------------\");\r\n        // console.log(oldColumn.collation !== newColumn.collation);\r\n        // console.log(oldColumn.collation, newColumn.collation);\r\n        // console.log(\"precision ---------------\");\r\n        // console.log(oldColumn.precision !== newColumn.precision);\r\n        // console.log(oldColumn.precision, newColumn.precision);\r\n        // console.log(\"scale ---------------\");\r\n        // console.log(oldColumn.scale !== newColumn.scale);\r\n        // console.log(oldColumn.scale, newColumn.scale);\r\n        // console.log(\"default ---------------\");\r\n        // console.log((checkDefault && oldColumn.default !== newColumn.default));\r\n        // console.log(oldColumn.default, newColumn.default);\r\n        // console.log(\"isNullable ---------------\");\r\n        // console.log(oldColumn.isNullable !== newColumn.isNullable);\r\n        // console.log(oldColumn.isNullable, newColumn.isNullable);\r\n        // console.log(\"comment ---------------\");\r\n        // console.log((checkComment && oldColumn.comment !== newColumn.comment));\r\n        // console.log(oldColumn.comment, newColumn.comment);\r\n        // console.log(\"enum ---------------\");\r\n        // console.log(!OrmUtils.isArraysEqual(oldColumn.enum || [], newColumn.enum || []));\r\n        // console.log(oldColumn.enum, newColumn.enum);\r\n\r\n        return oldColumn.charset !== newColumn.charset\r\n            || oldColumn.collation !== newColumn.collation\r\n            || oldColumn.precision !== newColumn.precision\r\n            || oldColumn.scale !== newColumn.scale\r\n            || oldColumn.width !== newColumn.width // MySQL only\r\n            || oldColumn.zerofill !== newColumn.zerofill // MySQL only\r\n            || oldColumn.unsigned !== newColumn.unsigned // MySQL only\r\n            || oldColumn.asExpression !== newColumn.asExpression // MySQL only\r\n            || (checkDefault && oldColumn.default !== newColumn.default)\r\n            || oldColumn.onUpdate !== newColumn.onUpdate // MySQL only\r\n            || oldColumn.isNullable !== newColumn.isNullable\r\n            || (checkComment && oldColumn.comment !== newColumn.comment)\r\n            || !OrmUtils.isArraysEqual(oldColumn.enum || [], newColumn.enum || []);\r\n    }\r\n\r\n    /**\r\n     * Checks if column length is by default.\r\n     */\r\n    protected isDefaultColumnLength(table: Table, column: TableColumn, length: string): boolean {\r\n        // if table have metadata, we check if length is specified in column metadata\r\n        if (this.connection.hasMetadata(table.name)) {\r\n            const metadata = this.connection.getMetadata(table.name);\r\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\r\n\r\n            if (columnMetadata) {\r\n                const columnMetadataLength = this.connection.driver.getColumnLength(columnMetadata);\r\n                if (columnMetadataLength)\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        if (this.connection.driver.dataTypeDefaults\r\n            && this.connection.driver.dataTypeDefaults[column.type]\r\n            && this.connection.driver.dataTypeDefaults[column.type].length) {\r\n            return this.connection.driver.dataTypeDefaults[column.type].length!.toString() === length.toString();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if column precision is by default.\r\n     */\r\n    protected isDefaultColumnPrecision(table: Table, column: TableColumn, precision: number): boolean {\r\n        // if table have metadata, we check if length is specified in column metadata\r\n        if (this.connection.hasMetadata(table.name)) {\r\n            const metadata = this.connection.getMetadata(table.name);\r\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\r\n            if (columnMetadata && columnMetadata.precision !== null && columnMetadata.precision !== undefined)\r\n                return false;\r\n        }\r\n\r\n        if (this.connection.driver.dataTypeDefaults\r\n            && this.connection.driver.dataTypeDefaults[column.type]\r\n            && this.connection.driver.dataTypeDefaults[column.type].precision !== null\r\n            && this.connection.driver.dataTypeDefaults[column.type].precision !== undefined)\r\n            return this.connection.driver.dataTypeDefaults[column.type].precision === precision;\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if column scale is by default.\r\n     */\r\n    protected isDefaultColumnScale(table: Table, column: TableColumn, scale: number): boolean {\r\n        // if table have metadata, we check if length is specified in column metadata\r\n        if (this.connection.hasMetadata(table.name)) {\r\n            const metadata = this.connection.getMetadata(table.name);\r\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\r\n            if (columnMetadata && columnMetadata.scale !== null && columnMetadata.scale !== undefined)\r\n                return false;\r\n        }\r\n\r\n        if (this.connection.driver.dataTypeDefaults\r\n            && this.connection.driver.dataTypeDefaults[column.type]\r\n            && this.connection.driver.dataTypeDefaults[column.type].scale !== null\r\n            && this.connection.driver.dataTypeDefaults[column.type].scale !== undefined)\r\n            return this.connection.driver.dataTypeDefaults[column.type].scale === scale;\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Executes sql used special for schema build.\r\n     */\r\n    protected async executeQueries(upQueries: Query|Query[], downQueries: Query|Query[]): Promise<void> {\r\n        if (upQueries instanceof Query)\r\n            upQueries = [upQueries];\r\n        if (downQueries instanceof Query)\r\n            downQueries = [downQueries];\r\n\r\n        this.sqlInMemory.upQueries.push(...upQueries);\r\n        this.sqlInMemory.downQueries.push(...downQueries);\r\n\r\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\r\n        if (this.sqlMemoryMode === true)\r\n            return Promise.resolve() as Promise<any>;\r\n\r\n        for (const {query, parameters} of upQueries) {\r\n            await this.query(query, parameters);\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}