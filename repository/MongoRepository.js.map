{"version":3,"sources":["../../src/repository/MongoRepository.ts"],"names":[],"mappings":"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","file":"MongoRepository.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { Repository } from \"./Repository\"\r\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\r\nimport {\r\n    AggregationCursor,\r\n    BulkWriteOpResultObject,\r\n    Code,\r\n    Collection,\r\n    CollectionAggregationOptions,\r\n    CollectionBulkWriteOptions,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    CollectionOptions,\r\n    CollStats,\r\n    CommandCursor,\r\n    Cursor,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    InsertOneWriteOpResult,\r\n    InsertWriteOpResult,\r\n    MapReduceOptions,\r\n    MongoCountPreferences,\r\n    MongodbIndexOptions,\r\n    ObjectID,\r\n    OrderedBulkOperation,\r\n    ParallelCollectionScanOptions,\r\n    ReadPreference,\r\n    ReplaceOneOptions,\r\n    UnorderedBulkOperation,\r\n    UpdateWriteOpResult,\r\n} from \"../driver/mongodb/typings\"\r\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\r\nimport { TypeORMError } from \"../error/TypeORMError\"\r\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\r\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\r\n\r\n/**\r\n * Repository used to manage mongodb documents of a single entity type.\r\n */\r\nexport class MongoRepository<\r\n    Entity extends ObjectLiteral,\r\n> extends Repository<Entity> {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity Manager used by this repository.\r\n     */\r\n    readonly manager: MongoEntityManager\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Overridden Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Raw SQL query execution is not supported by MongoDB.\r\n     * Calling this method will return an error.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new TypeORMError(`Queries aren't supported by MongoDB.`)\r\n    }\r\n\r\n    /**\r\n     * Using Query Builder with MongoDB is not supported yet.\r\n     * Calling this method will return an error.\r\n     */\r\n    createQueryBuilder(\r\n        alias: string,\r\n        queryRunner?: QueryRunner,\r\n    ): SelectQueryBuilder<Entity> {\r\n        throw new TypeORMError(`Query Builder is not supported by MongoDB.`)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    find(options?: MongoFindManyOptions<Entity>): Promise<Entity[]> {\r\n        return this.manager.find(this.metadata.target, options)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    findBy(where: any): Promise<Entity[]> {\r\n        return this.manager.findBy(this.metadata.target, where)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount(\r\n        options?: MongoFindManyOptions<Entity>,\r\n    ): Promise<[Entity[], number]> {\r\n        return this.manager.findAndCount(this.metadata.target, options)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCountBy(where: any): Promise<[Entity[], number]> {\r\n        return this.manager.findAndCountBy(this.metadata.target, where)\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     *\r\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\r\n     *\r\n     * .findBy({\r\n     *     id: In([1, 2, 3])\r\n     * })\r\n     */\r\n    findByIds(ids: any[], options?: any): Promise<Entity[]> {\r\n        return this.manager.findByIds(this.metadata.target, ids, options)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given find options.\r\n     */\r\n    async findOne(\r\n        options: MongoFindOneOptions<Entity>,\r\n    ): Promise<Entity | null> {\r\n        return this.manager.findOne(this.metadata.target, options)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given WHERE conditions.\r\n     */\r\n    async findOneBy(where: any): Promise<Entity | null> {\r\n        return this.manager.findOneBy(this.metadata.target, where)\r\n    }\r\n\r\n    /**\r\n     * Finds entity that matches given id.\r\n     *\r\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\r\n     *\r\n     * .findOneBy({\r\n     *     id: 1 // where \"id\" is your primary column name\r\n     * })\r\n     */\r\n    async findOneById(\r\n        id:\r\n            | string\r\n            | string[]\r\n            | number\r\n            | number[]\r\n            | Date\r\n            | Date[]\r\n            | ObjectID\r\n            | ObjectID[],\r\n    ): Promise<Entity | null> {\r\n        return this.manager.findOneById(this.metadata.target, id)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity by a given find options.\r\n     * If entity was not found in the database - rejects with error.\r\n     */\r\n    async findOneOrFail(options: FindOneOptions<Entity>): Promise<Entity> {\r\n        return this.manager.findOneOrFail(this.metadata.target, options)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given where condition.\r\n     * If entity was not found in the database - rejects with error.\r\n     */\r\n    async findOneByOrFail(where: any): Promise<Entity> {\r\n        return this.manager.findOneByOrFail(this.metadata.target, where)\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    createCursor<T = any>(query?: ObjectLiteral): Cursor<T> {\r\n        return this.manager.createCursor(this.metadata.target, query)\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     * This returns modified version of cursor that transforms each result into Entity model.\r\n     */\r\n    createEntityCursor(query?: ObjectLiteral): Cursor<Entity> {\r\n        return this.manager.createEntityCursor(this.metadata.target, query)\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate<R = any>(\r\n        pipeline: ObjectLiteral[],\r\n        options?: CollectionAggregationOptions,\r\n    ): AggregationCursor<R> {\r\n        return this.manager.aggregate<R>(\r\n            this.metadata.target,\r\n            pipeline,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     * This returns modified version of cursor that transforms each result into Entity model.\r\n     */\r\n    aggregateEntity(\r\n        pipeline: ObjectLiteral[],\r\n        options?: CollectionAggregationOptions,\r\n    ): AggregationCursor<Entity> {\r\n        return this.manager.aggregateEntity(\r\n            this.metadata.target,\r\n            pipeline,\r\n            options,\r\n        )\r\n    }\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    bulkWrite(\r\n        operations: ObjectLiteral[],\r\n        options?: CollectionBulkWriteOptions,\r\n    ): Promise<BulkWriteOpResultObject> {\r\n        return this.manager.bulkWrite(this.metadata.target, operations, options)\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    count(\r\n        query?: ObjectLiteral,\r\n        options?: MongoCountPreferences,\r\n    ): Promise<number> {\r\n        return this.manager.count(this.metadata.target, query || {}, options)\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    countBy(\r\n        query?: ObjectLiteral,\r\n        options?: MongoCountPreferences,\r\n    ): Promise<number> {\r\n        return this.manager.countBy(this.metadata.target, query || {}, options)\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    createCollectionIndex(\r\n        fieldOrSpec: string | any,\r\n        options?: MongodbIndexOptions,\r\n    ): Promise<string> {\r\n        return this.manager.createCollectionIndex(\r\n            this.metadata.target,\r\n            fieldOrSpec,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error.\r\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    createCollectionIndexes(indexSpecs: ObjectLiteral[]): Promise<void> {\r\n        return this.manager.createCollectionIndexes(\r\n            this.metadata.target,\r\n            indexSpecs,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    deleteMany(\r\n        query: ObjectLiteral,\r\n        options?: CollectionOptions,\r\n    ): Promise<DeleteWriteOpResultObject> {\r\n        return this.manager.deleteMany(this.metadata.tableName, query, options)\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    deleteOne(\r\n        query: ObjectLiteral,\r\n        options?: CollectionOptions,\r\n    ): Promise<DeleteWriteOpResultObject> {\r\n        return this.manager.deleteOne(this.metadata.tableName, query, options)\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    distinct(\r\n        key: string,\r\n        query: ObjectLiteral,\r\n        options?: { readPreference?: ReadPreference | string },\r\n    ): Promise<any> {\r\n        return this.manager.distinct(\r\n            this.metadata.tableName,\r\n            key,\r\n            query,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    dropCollectionIndex(\r\n        indexName: string,\r\n        options?: CollectionOptions,\r\n    ): Promise<any> {\r\n        return this.manager.dropCollectionIndex(\r\n            this.metadata.tableName,\r\n            indexName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    dropCollectionIndexes(): Promise<any> {\r\n        return this.manager.dropCollectionIndexes(this.metadata.tableName)\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndDelete(\r\n        query: ObjectLiteral,\r\n        options?: { projection?: Object; sort?: Object; maxTimeMS?: number },\r\n    ): Promise<FindAndModifyWriteOpResultObject> {\r\n        return this.manager.findOneAndDelete(\r\n            this.metadata.tableName,\r\n            query,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndReplace(\r\n        query: ObjectLiteral,\r\n        replacement: Object,\r\n        options?: FindOneAndReplaceOption,\r\n    ): Promise<FindAndModifyWriteOpResultObject> {\r\n        return this.manager.findOneAndReplace(\r\n            this.metadata.tableName,\r\n            query,\r\n            replacement,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndUpdate(\r\n        query: ObjectLiteral,\r\n        update: Object,\r\n        options?: FindOneAndReplaceOption,\r\n    ): Promise<FindAndModifyWriteOpResultObject> {\r\n        return this.manager.findOneAndUpdate(\r\n            this.metadata.tableName,\r\n            query,\r\n            update,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    geoHaystackSearch(\r\n        x: number,\r\n        y: number,\r\n        options?: GeoHaystackSearchOptions,\r\n    ): Promise<any> {\r\n        return this.manager.geoHaystackSearch(\r\n            this.metadata.tableName,\r\n            x,\r\n            y,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any> {\r\n        return this.manager.geoNear(this.metadata.tableName, x, y, options)\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    group(\r\n        keys: Object | Array<any> | Function | Code,\r\n        condition: Object,\r\n        initial: Object,\r\n        reduce: Function | Code,\r\n        finalize: Function | Code,\r\n        command: boolean,\r\n        options?: { readPreference?: ReadPreference | string },\r\n    ): Promise<any> {\r\n        return this.manager.group(\r\n            this.metadata.tableName,\r\n            keys,\r\n            condition,\r\n            initial,\r\n            reduce,\r\n            finalize,\r\n            command,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexes(): Promise<any> {\r\n        return this.manager.collectionIndexes(this.metadata.tableName)\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexExists(indexes: string | string[]): Promise<boolean> {\r\n        return this.manager.collectionIndexExists(\r\n            this.metadata.tableName,\r\n            indexes,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    collectionIndexInformation(options?: { full: boolean }): Promise<any> {\r\n        return this.manager.collectionIndexInformation(\r\n            this.metadata.tableName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation {\r\n        return this.manager.initializeOrderedBulkOp(\r\n            this.metadata.tableName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp(\r\n        options?: CollectionOptions,\r\n    ): UnorderedBulkOperation {\r\n        return this.manager.initializeUnorderedBulkOp(\r\n            this.metadata.tableName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    insertMany(\r\n        docs: ObjectLiteral[],\r\n        options?: CollectionInsertManyOptions,\r\n    ): Promise<InsertWriteOpResult> {\r\n        return this.manager.insertMany(this.metadata.tableName, docs, options)\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    insertOne(\r\n        doc: ObjectLiteral,\r\n        options?: CollectionInsertOneOptions,\r\n    ): Promise<InsertOneWriteOpResult> {\r\n        return this.manager.insertOne(this.metadata.tableName, doc, options)\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    isCapped(): Promise<any> {\r\n        return this.manager.isCapped(this.metadata.tableName)\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes(options?: {\r\n        batchSize?: number\r\n        readPreference?: ReadPreference | string\r\n    }): CommandCursor {\r\n        return this.manager.listCollectionIndexes(\r\n            this.metadata.tableName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    mapReduce(\r\n        map: Function | string,\r\n        reduce: Function | string,\r\n        options?: MapReduceOptions,\r\n    ): Promise<any> {\r\n        return this.manager.mapReduce(\r\n            this.metadata.tableName,\r\n            map,\r\n            reduce,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    parallelCollectionScan(\r\n        options?: ParallelCollectionScanOptions,\r\n    ): Promise<Cursor<Entity>[]> {\r\n        return this.manager.parallelCollectionScan(\r\n            this.metadata.tableName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    reIndex(): Promise<any> {\r\n        return this.manager.reIndex(this.metadata.tableName)\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    rename(\r\n        newName: string,\r\n        options?: { dropTarget?: boolean },\r\n    ): Promise<Collection<any>> {\r\n        return this.manager.rename(this.metadata.tableName, newName, options)\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    replaceOne(\r\n        query: ObjectLiteral,\r\n        doc: ObjectLiteral,\r\n        options?: ReplaceOneOptions,\r\n    ): Promise<UpdateWriteOpResult> {\r\n        return this.manager.replaceOne(\r\n            this.metadata.tableName,\r\n            query,\r\n            doc,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    stats(options?: { scale: number }): Promise<CollStats> {\r\n        return this.manager.stats(this.metadata.tableName, options)\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    updateMany(\r\n        query: ObjectLiteral,\r\n        update: ObjectLiteral,\r\n        options?: { upsert?: boolean; w?: any; wtimeout?: number; j?: boolean },\r\n    ): Promise<UpdateWriteOpResult> {\r\n        return this.manager.updateMany(\r\n            this.metadata.tableName,\r\n            query,\r\n            update,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    updateOne(\r\n        query: ObjectLiteral,\r\n        update: ObjectLiteral,\r\n        options?: ReplaceOneOptions,\r\n    ): Promise<UpdateWriteOpResult> {\r\n        return this.manager.updateOne(\r\n            this.metadata.tableName,\r\n            query,\r\n            update,\r\n            options,\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":".."}