{"version":3,"sources":["../../src/driver/aurora-data-api-pg/AuroraDataApiPostgresQueryRunner.ts"],"names":[],"mappings":"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","file":"AuroraDataApiPostgresQueryRunner.js","sourcesContent":["import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {IsolationLevel} from \"../types/IsolationLevel\";\r\nimport {AuroraDataApiPostgresDriver} from \"./AuroraDataApiPostgresDriver\";\r\nimport {PostgresQueryRunner} from \"../postgres/PostgresQueryRunner\";\r\nimport {ReplicationMode} from \"../types/ReplicationMode\";\r\nimport {QueryResult} from \"../../query-runner/QueryResult\";\r\n\r\nclass PostgresQueryRunnerWrapper extends PostgresQueryRunner {\r\n    driver: any;\r\n\r\n    constructor(driver: any, mode: ReplicationMode) {\r\n        super(driver, mode);\r\n    }\r\n}\r\n\r\n/**\r\n * Runs queries on a single postgres database connection.\r\n */\r\nexport class AuroraDataApiPostgresQueryRunner extends PostgresQueryRunnerWrapper implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: AuroraDataApiPostgresDriver;\r\n\r\n    protected client: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Promise used to obtain a database connection for a first time.\r\n     */\r\n    protected databaseConnectionPromise: Promise<any>;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: AuroraDataApiPostgresDriver, client: any, mode: ReplicationMode) {\r\n        super(driver, mode);\r\n\r\n        this.client = client\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    connect(): Promise<any> {\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        if (this.databaseConnectionPromise)\r\n            return this.databaseConnectionPromise;\r\n\r\n        if (this.mode === \"slave\" && this.driver.isReplicated)  {\r\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([ connection, release]: any[]) => {\r\n                this.driver.connectedQueryRunners.push(this);\r\n                this.databaseConnection = connection;\r\n                this.releaseCallback = release;\r\n                return this.databaseConnection;\r\n            });\r\n\r\n        } else { // master\r\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]: any[]) => {\r\n                this.driver.connectedQueryRunners.push(this);\r\n                this.databaseConnection = connection;\r\n                this.releaseCallback = release;\r\n                return this.databaseConnection;\r\n            });\r\n        }\r\n\r\n        return this.databaseConnectionPromise;\r\n    }\r\n\r\n    /**\r\n     * Starts transaction on the current connection.\r\n     */\r\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\r\n        this.isTransactionActive = true;\r\n        try {\r\n            await this.broadcaster.broadcast('BeforeTransactionStart');\r\n        } catch (err) {\r\n            this.isTransactionActive = false;\r\n            throw err;\r\n        }\r\n\r\n        if (this.transactionDepth === 0) {\r\n            await this.client.startTransaction();\r\n        } else {\r\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth}`);\r\n        }\r\n        this.transactionDepth += 1;\r\n\r\n        await this.broadcaster.broadcast('AfterTransactionStart');\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.broadcaster.broadcast('BeforeTransactionCommit');\r\n\r\n        if (this.transactionDepth > 1) {\r\n            await this.query(`RELEASE SAVEPOINT typeorm_${this.transactionDepth - 1}`);\r\n        } else {\r\n            await this.client.commitTransaction();\r\n            this.isTransactionActive = false;\r\n        }\r\n        this.transactionDepth -= 1;\r\n\r\n        await this.broadcaster.broadcast('AfterTransactionCommit');\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.broadcaster.broadcast('BeforeTransactionRollback');\r\n\r\n        if (this.transactionDepth > 1) {\r\n            await this.query(`ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth - 1}`);\r\n        } else {\r\n            await this.client.rollbackTransaction();\r\n            this.isTransactionActive = false;\r\n        }\r\n        this.transactionDepth -= 1;\r\n\r\n        await this.broadcaster.broadcast('AfterTransactionRollback');\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(query: string, parameters?: any[], useStructuredResult = false): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const raw = await this.client.query(query, parameters);\r\n\r\n        const result = new QueryResult();\r\n\r\n        result.raw = raw;\r\n\r\n        if (raw?.hasOwnProperty('records') && Array.isArray(raw.records)) {\r\n            result.records = raw.records;\r\n        }\r\n\r\n        if (raw?.hasOwnProperty('numberOfRecordsUpdated')) {\r\n            result.affected = raw.numberOfRecordsUpdated;\r\n        }\r\n\r\n        if (!useStructuredResult) {\r\n            return result.raw;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}