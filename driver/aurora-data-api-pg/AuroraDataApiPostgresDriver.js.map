{"version":3,"sources":["../../src/driver/aurora-data-api-pg/AuroraDataApiPostgresDriver.ts"],"names":[],"mappings":"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","file":"AuroraDataApiPostgresDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\r\nimport {PostgresDriver} from \"../postgres/PostgresDriver\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {AuroraDataApiPostgresConnectionOptions} from \"../aurora-data-api-pg/AuroraDataApiPostgresConnectionOptions\";\r\nimport {AuroraDataApiPostgresQueryRunner} from \"../aurora-data-api-pg/AuroraDataApiPostgresQueryRunner\";\r\nimport {ReplicationMode} from \"../types/ReplicationMode\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\n\r\nabstract class PostgresWrapper extends PostgresDriver {\r\n    options: any;\r\n\r\n    abstract createQueryRunner(mode: ReplicationMode): any;\r\n}\r\n\r\nexport class AuroraDataApiPostgresDriver extends PostgresWrapper implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by driver.\r\n     */\r\n    connection: Connection;\r\n\r\n    /**\r\n     * Aurora Data API underlying library.\r\n     */\r\n    DataApiDriver: any;\r\n\r\n    client: any;\r\n\r\n    /**\r\n     * Represent transaction support by this driver\r\n     */\r\n    transactionSupport = \"nested\" as const;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: AuroraDataApiPostgresConnectionOptions;\r\n\r\n    /**\r\n     * Master database used to perform all write queries.\r\n     */\r\n    database?: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        super();\r\n        this.connection = connection;\r\n        this.options = connection.options as AuroraDataApiPostgresConnectionOptions;\r\n        this.isReplicated = false;\r\n\r\n        // load data-api package\r\n        this.loadDependencies();\r\n\r\n        this.client = new this.DataApiDriver(\r\n            this.options.region,\r\n            this.options.secretArn,\r\n            this.options.resourceArn,\r\n            this.options.database,\r\n            (query: string, parameters?: any[]) => this.connection.logger.logQuery(query, parameters),\r\n            this.options.serviceConfigOptions,\r\n            this.options.formatOptions,\r\n        );\r\n\r\n        this.database = DriverUtils.buildDriverOptions(this.options).database;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    async connect(): Promise<void> {\r\n    }\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode) {\r\n        return new AuroraDataApiPostgresQueryRunner(\r\n            this,\r\n            new this.DataApiDriver(\r\n                this.options.region,\r\n                this.options.secretArn,\r\n                this.options.resourceArn,\r\n                this.options.database,\r\n                (query: string, parameters?: any[]) => this.connection.logger.logQuery(query, parameters),\r\n                this.options.serviceConfigOptions,\r\n                this.options.formatOptions,\r\n            ),\r\n            mode\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\r\n            return super.preparePersistentValue(value, columnMetadata);\r\n        }\r\n\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\r\n\r\n        return this.client.preparePersistentValue(value, columnMetadata);\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\r\n            return super.prepareHydratedValue(value, columnMetadata);\r\n        }\r\n\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\r\n\r\n        return this.client.prepareHydratedValue(value, columnMetadata);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        const driver = this.options.driver || PlatformTools.load(\"typeorm-aurora-data-api-driver\");\r\n        const { pg } = driver;\r\n\r\n        this.DataApiDriver = pg;\r\n    }\r\n\r\n    /**\r\n     * Executes given query.\r\n     */\r\n    protected executeQuery(connection: any, query: string) {\r\n        return this.connection.query(query);\r\n    }\r\n\r\n    /**\r\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\r\n     */\r\n    async afterConnect(): Promise<void> {\r\n        const extensionsMetadata = await this.checkMetadataForExtensions();\r\n\r\n        if (extensionsMetadata.hasExtensions) {\r\n            await this.enableExtensions(extensionsMetadata, this.connection);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}