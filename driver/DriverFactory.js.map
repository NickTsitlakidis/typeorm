{"version":3,"sources":["../../src/driver/DriverFactory.ts"],"names":[],"mappings":";;;AAAA,kEAA+D;AAC/D,iEAA8D;AAC9D,qDAAkD;AAClD,+DAA4D;AAC5D,sDAAmD;AACnD,sDAAmD;AACnD,yDAAsD;AACtD,sEAAmE;AACnE,wEAAqE;AACrE,mDAAgD;AAChD,mDAAgD;AAChD,4DAAyD;AACzD,gDAA6C;AAC7C,6EAA0E;AAC1E,gGAA6F;AAG7F,6CAA0C;AAC1C,4EAAyE;AACzE,+DAA4D;AAE5D;;GAEG;AACH;IAAA;IAuEA,CAAC;IArEG;;OAEG;IACH,8BAAM,GAAN,UAAO,UAAsB;QAClB,IAAA,IAAI,GAAI,UAAU,CAAC,OAAO,KAAtB,CAAuB;QAClC,QAAQ,IAAI,EAAE;YACV,KAAK,OAAO;gBACR,OAAO,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,UAAU;gBACX,OAAO,IAAI,+BAAc,CAAC,UAAU,CAAC,CAAC;YAC1C,KAAK,aAAa;gBACd,OAAO,IAAI,iCAAe,CAAC,UAAU,CAAC,CAAC;YAC3C,KAAK,KAAK;gBACN,OAAO,IAAI,qBAAS,CAAC,UAAU,CAAC,CAAC;YACrC,KAAK,SAAS;gBACV,OAAO,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,QAAQ;gBACT,OAAO,IAAI,2BAAY,CAAC,UAAU,CAAC,CAAC;YACxC,KAAK,gBAAgB;gBACjB,OAAO,IAAI,yCAAmB,CAAC,UAAU,CAAC,CAAC;YAC/C,KAAK,SAAS;gBACV,OAAO,IAAI,6BAAa,CAAC,UAAU,CAAC,CAAC;YACzC,KAAK,cAAc;gBACf,OAAO,IAAI,uCAAkB,CAAC,UAAU,CAAC,CAAC;YAC9C,KAAK,cAAc;gBACf,OAAO,IAAI,qCAAiB,CAAC,UAAU,CAAC,CAAC;YAC7C,KAAK,OAAO;gBACR,OAAO,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,QAAQ;gBACT,OAAO,IAAI,2BAAY,CAAC,UAAU,CAAC,CAAC;YACxC,KAAK,OAAO;gBACR,OAAO,IAAI,iCAAe,CAAC,UAAU,CAAC,CAAC;YAC3C,KAAK,SAAS;gBACV,OAAO,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,MAAM;gBACP,OAAO,IAAI,uBAAU,CAAC,UAAU,CAAC,CAAC;YACtC,KAAK,iBAAiB;gBAClB,OAAO,IAAI,yCAAmB,CAAC,UAAU,CAAC,CAAC;YAC/C,KAAK,oBAAoB;gBACrB,OAAO,IAAI,yDAA2B,CAAC,UAAU,CAAC,CAAC;YACvD,KAAK,WAAW;gBACZ,OAAO,IAAI,iCAAe,CAAC,UAAU,CAAC,CAAC;YAC3C;gBACI,MAAM,IAAI,uCAAkB,CACxB,IAAI,EACJ;oBACI,iBAAiB;oBACjB,oBAAoB;oBACpB,gBAAgB;oBAChB,WAAW;oBACX,aAAa;oBACb,SAAS;oBACT,MAAM;oBACN,SAAS;oBACT,SAAS;oBACT,OAAO;oBACP,OAAO;oBACP,cAAc;oBACd,QAAQ;oBACR,UAAU;oBACV,cAAc;oBACd,KAAK;oBACL,QAAQ;oBACR,OAAO;iBACV,CACJ,CAAC;SACT;IACL,CAAC;IAEL,oBAAC;AAAD,CAvEA,AAuEC,IAAA;AAvEY,sCAAa","file":"DriverFactory.js","sourcesContent":["import {MissingDriverError} from \"../error/MissingDriverError\";\r\nimport {CockroachDriver} from \"./cockroachdb/CockroachDriver\";\r\nimport {MongoDriver} from \"./mongodb/MongoDriver\";\r\nimport {SqlServerDriver} from \"./sqlserver/SqlServerDriver\";\r\nimport {OracleDriver} from \"./oracle/OracleDriver\";\r\nimport {SqliteDriver} from \"./sqlite/SqliteDriver\";\r\nimport {CordovaDriver} from \"./cordova/CordovaDriver\";\r\nimport {ReactNativeDriver} from \"./react-native/ReactNativeDriver\";\r\nimport {NativescriptDriver} from \"./nativescript/NativescriptDriver\";\r\nimport {SqljsDriver} from \"./sqljs/SqljsDriver\";\r\nimport {MysqlDriver} from \"./mysql/MysqlDriver\";\r\nimport {PostgresDriver} from \"./postgres/PostgresDriver\";\r\nimport {ExpoDriver} from \"./expo/ExpoDriver\";\r\nimport {AuroraDataApiDriver} from \"./aurora-data-api/AuroraDataApiDriver\";\r\nimport {AuroraDataApiPostgresDriver} from \"./aurora-data-api-pg/AuroraDataApiPostgresDriver\";\r\nimport {Driver} from \"./Driver\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {SapDriver} from \"./sap/SapDriver\";\r\nimport {BetterSqlite3Driver} from \"./better-sqlite3/BetterSqlite3Driver\";\r\nimport {CapacitorDriver} from \"./capacitor/CapacitorDriver\";\r\n\r\n/**\r\n * Helps to create drivers.\r\n */\r\nexport class DriverFactory {\r\n\r\n    /**\r\n     * Creates a new driver depend on a given connection's driver type.\r\n     */\r\n    create(connection: Connection): Driver {\r\n        const {type} = connection.options;\r\n        switch (type) {\r\n            case \"mysql\":\r\n                return new MysqlDriver(connection);\r\n            case \"postgres\":\r\n                return new PostgresDriver(connection);\r\n            case \"cockroachdb\":\r\n                return new CockroachDriver(connection);\r\n            case \"sap\":\r\n                return new SapDriver(connection);\r\n            case \"mariadb\":\r\n                return new MysqlDriver(connection);\r\n            case \"sqlite\":\r\n                return new SqliteDriver(connection);\r\n            case \"better-sqlite3\":\r\n                return new BetterSqlite3Driver(connection);\r\n            case \"cordova\":\r\n                return new CordovaDriver(connection);\r\n            case \"nativescript\":\r\n                return new NativescriptDriver(connection);\r\n            case \"react-native\":\r\n                return new ReactNativeDriver(connection);\r\n            case \"sqljs\":\r\n                return new SqljsDriver(connection);\r\n            case \"oracle\":\r\n                return new OracleDriver(connection);\r\n            case \"mssql\":\r\n                return new SqlServerDriver(connection);\r\n            case \"mongodb\":\r\n                return new MongoDriver(connection);\r\n            case \"expo\":\r\n                return new ExpoDriver(connection);\r\n            case \"aurora-data-api\":\r\n                return new AuroraDataApiDriver(connection);\r\n            case \"aurora-data-api-pg\":\r\n                return new AuroraDataApiPostgresDriver(connection);\r\n            case \"capacitor\":\r\n                return new CapacitorDriver(connection);\r\n            default:\r\n                throw new MissingDriverError(\r\n                    type,\r\n                    [\r\n                        \"aurora-data-api\",\r\n                        \"aurora-data-api-pg\",\r\n                        \"better-sqlite3\",\r\n                        \"capacitor\",\r\n                        \"cockroachdb\",\r\n                        \"cordova\",\r\n                        \"expo\",\r\n                        \"mariadb\",\r\n                        \"mongodb\",\r\n                        \"mssql\",\r\n                        \"mysql\",\r\n                        \"nativescript\",\r\n                        \"oracle\",\r\n                        \"postgres\",\r\n                        \"react-native\",\r\n                        \"sap\",\r\n                        \"sqlite\",\r\n                        \"sqljs\",\r\n                    ]\r\n                );\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}