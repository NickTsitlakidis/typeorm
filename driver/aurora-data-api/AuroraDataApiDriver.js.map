{"version":3,"sources":["../../src/driver/aurora-data-api/AuroraDataApiDriver.ts"],"names":[],"mappings":"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","file":"AuroraDataApiDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {AuroraDataApiQueryRunner} from \"./AuroraDataApiQueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DateUtils} from \"../../util/DateUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\r\nimport {AuroraDataApiConnectionOptions} from \"./AuroraDataApiConnectionOptions\";\r\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\r\nimport {ColumnType} from \"../types/ColumnTypes\";\r\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\r\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\r\nimport {AuroraDataApiConnectionCredentialsOptions} from \"./AuroraDataApiConnectionCredentialsOptions\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\r\nimport {ReplicationMode} from \"../types/ReplicationMode\";\r\nimport { TypeORMError } from \"../../error\";\r\nimport { Table } from \"../../schema-builder/table/Table\";\r\nimport { View } from \"../../schema-builder/view/View\";\r\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\r\n\r\n/**\r\n * Organizes communication with MySQL DBMS.\r\n */\r\nexport class AuroraDataApiDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    connection: Connection;\r\n    /**\r\n     * Aurora Data API underlying library.\r\n     */\r\n    DataApiDriver: any;\r\n\r\n    client: any;\r\n\r\n    /**\r\n     * Connection pool.\r\n     * Used in non-replication mode.\r\n     */\r\n    pool: any;\r\n\r\n    /**\r\n     * Pool cluster used in replication mode.\r\n     */\r\n    poolCluster: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: AuroraDataApiConnectionOptions;\r\n\r\n    /**\r\n     * Database name used to perform all write queries.\r\n     */\r\n    database?: string;\r\n\r\n    /**\r\n     * Schema name used to performn all write queries.\r\n     */\r\n    schema?: string;\r\n\r\n    /**\r\n     * Indicates if replication is enabled.\r\n     */\r\n    isReplicated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if tree tables are supported by this driver.\r\n     */\r\n    treeSupport = true;\r\n\r\n    /**\r\n     * Represent transaction support by this driver\r\n     */\r\n    transactionSupport = \"nested\" as const;\r\n\r\n    /**\r\n     * Gets list of supported column data types by a driver.\r\n     *\r\n     * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\r\n     * @see https://dev.mysql.com/doc/refman/8.0/en/data-types.html\r\n     */\r\n    supportedDataTypes: ColumnType[] = [\r\n        // numeric types\r\n        \"bit\",\r\n        \"int\",\r\n        \"integer\",          // synonym for int\r\n        \"tinyint\",\r\n        \"smallint\",\r\n        \"mediumint\",\r\n        \"bigint\",\r\n        \"float\",\r\n        \"double\",\r\n        \"double precision\", // synonym for double\r\n        \"real\",             // synonym for double\r\n        \"decimal\",\r\n        \"dec\",              // synonym for decimal\r\n        \"numeric\",          // synonym for decimal\r\n        \"fixed\",            // synonym for decimal\r\n        \"bool\",             // synonym for tinyint\r\n        \"boolean\",          // synonym for tinyint\r\n        // date and time types\r\n        \"date\",\r\n        \"datetime\",\r\n        \"timestamp\",\r\n        \"time\",\r\n        \"year\",\r\n        // string types\r\n        \"char\",\r\n        \"nchar\",            // synonym for national char\r\n        \"national char\",\r\n        \"varchar\",\r\n        \"nvarchar\",         // synonym for national varchar\r\n        \"national varchar\",\r\n        \"blob\",\r\n        \"text\",\r\n        \"tinyblob\",\r\n        \"tinytext\",\r\n        \"mediumblob\",\r\n        \"mediumtext\",\r\n        \"longblob\",\r\n        \"longtext\",\r\n        \"enum\",\r\n        \"set\",\r\n        \"binary\",\r\n        \"varbinary\",\r\n        // json data type\r\n        \"json\",\r\n        // spatial data types\r\n        \"geometry\",\r\n        \"point\",\r\n        \"linestring\",\r\n        \"polygon\",\r\n        \"multipoint\",\r\n        \"multilinestring\",\r\n        \"multipolygon\",\r\n        \"geometrycollection\"\r\n    ];\r\n\r\n    /**\r\n     * Returns type of upsert supported by driver if any\r\n     */\r\n    readonly supportedUpsertType = \"on-duplicate-key-update\";\r\n\r\n    /**\r\n     * Gets list of spatial column data types.\r\n     */\r\n    spatialTypes: ColumnType[] = [\r\n        \"geometry\",\r\n        \"point\",\r\n        \"linestring\",\r\n        \"polygon\",\r\n        \"multipoint\",\r\n        \"multilinestring\",\r\n        \"multipolygon\",\r\n        \"geometrycollection\"\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withLengthColumnTypes: ColumnType[] = [\r\n        \"char\",\r\n        \"varchar\",\r\n        \"nvarchar\",\r\n        \"binary\",\r\n        \"varbinary\"\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withWidthColumnTypes: ColumnType[] = [\r\n        \"bit\",\r\n        \"tinyint\",\r\n        \"smallint\",\r\n        \"mediumint\",\r\n        \"int\",\r\n        \"integer\",\r\n        \"bigint\"\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that support precision by a driver.\r\n     */\r\n    withPrecisionColumnTypes: ColumnType[] = [\r\n        \"decimal\",\r\n        \"dec\",\r\n        \"numeric\",\r\n        \"fixed\",\r\n        \"float\",\r\n        \"double\",\r\n        \"double precision\",\r\n        \"real\",\r\n        \"time\",\r\n        \"datetime\",\r\n        \"timestamp\"\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that supports scale by a driver.\r\n     */\r\n    withScaleColumnTypes: ColumnType[] = [\r\n        \"decimal\",\r\n        \"dec\",\r\n        \"numeric\",\r\n        \"fixed\",\r\n        \"float\",\r\n        \"double\",\r\n        \"double precision\",\r\n        \"real\"\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.\r\n     */\r\n    unsignedAndZerofillTypes: ColumnType[] = [\r\n        \"int\",\r\n        \"integer\",\r\n        \"smallint\",\r\n        \"tinyint\",\r\n        \"mediumint\",\r\n        \"bigint\",\r\n        \"decimal\",\r\n        \"dec\",\r\n        \"numeric\",\r\n        \"fixed\",\r\n        \"float\",\r\n        \"double\",\r\n        \"double precision\",\r\n        \"real\"\r\n    ];\r\n\r\n    /**\r\n     * ORM has special columns and we need to know what database column types should be for those columns.\r\n     * Column types are driver dependant.\r\n     */\r\n    mappedDataTypes: MappedColumnTypes = {\r\n        createDate: \"datetime\",\r\n        createDatePrecision: 6,\r\n        createDateDefault: \"CURRENT_TIMESTAMP(6)\",\r\n        updateDate: \"datetime\",\r\n        updateDatePrecision: 6,\r\n        updateDateDefault: \"CURRENT_TIMESTAMP(6)\",\r\n        deleteDate: \"datetime\",\r\n        deleteDatePrecision: 6,\r\n        deleteDateNullable: true,\r\n        version: \"int\",\r\n        treeLevel: \"int\",\r\n        migrationId: \"int\",\r\n        migrationName: \"varchar\",\r\n        migrationTimestamp: \"bigint\",\r\n        cacheId: \"int\",\r\n        cacheIdentifier: \"varchar\",\r\n        cacheTime: \"bigint\",\r\n        cacheDuration: \"int\",\r\n        cacheQuery: \"text\",\r\n        cacheResult: \"text\",\r\n        metadataType: \"varchar\",\r\n        metadataDatabase: \"varchar\",\r\n        metadataSchema: \"varchar\",\r\n        metadataTable: \"varchar\",\r\n        metadataName: \"varchar\",\r\n        metadataValue: \"text\",\r\n    };\r\n\r\n    /**\r\n     * Default values of length, precision and scale depends on column data type.\r\n     * Used in the cases when length/precision/scale is not specified by user.\r\n     */\r\n    dataTypeDefaults: DataTypeDefaults = {\r\n        \"varchar\": { length: 255 },\r\n        \"nvarchar\": { length: 255 },\r\n        \"national varchar\": { length: 255 },\r\n        \"char\": { length: 1 },\r\n        \"binary\": { length: 1 },\r\n        \"varbinary\": { length: 255 },\r\n        \"decimal\": { precision: 10, scale: 0 },\r\n        \"dec\": { precision: 10, scale: 0 },\r\n        \"numeric\": { precision: 10, scale: 0 },\r\n        \"fixed\": { precision: 10, scale: 0 },\r\n        \"float\": { precision: 12 },\r\n        \"double\": { precision: 22 },\r\n        \"time\": { precision: 0 },\r\n        \"datetime\": { precision: 0 },\r\n        \"timestamp\": { precision: 0 },\r\n        \"bit\": { width: 1 },\r\n        \"int\": { width: 11 },\r\n        \"integer\": { width: 11 },\r\n        \"tinyint\": { width: 4 },\r\n        \"smallint\": { width: 6 },\r\n        \"mediumint\": { width: 9 },\r\n        \"bigint\": { width: 20 }\r\n    };\r\n\r\n\r\n    /**\r\n     * Max length allowed by MySQL for aliases.\r\n     * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html\r\n     */\r\n    maxAliasLength = 63;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        this.connection = connection;\r\n        this.options = connection.options as AuroraDataApiConnectionOptions;\r\n\r\n        // load mysql package\r\n        this.loadDependencies();\r\n\r\n        this.client = new this.DataApiDriver(\r\n            this.options.region,\r\n            this.options.secretArn,\r\n            this.options.resourceArn,\r\n            this.options.database,\r\n            (query: string, parameters?: any[]) => this.connection.logger.logQuery(query, parameters),\r\n            this.options.serviceConfigOptions,\r\n            this.options.formatOptions,\r\n        );\r\n\r\n        this.database = DriverUtils.buildDriverOptions(this.options).database;\r\n\r\n        // validate options to make sure everything is set\r\n        // todo: revisit validation with replication in mind\r\n        // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)\r\n        //     throw new DriverOptionNotSetError(\"socketPath and host\");\r\n        // if (!this.options.username)\r\n        //     throw new DriverOptionNotSetError(\"username\");\r\n        // if (!this.options.database)\r\n        //     throw new DriverOptionNotSetError(\"database\");\r\n        // todo: check what is going on when connection is setup without database and how to connect to a database then?\r\n        // todo: provide options to auto-create a database if it does not exist yet\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<void> {\r\n        if (!this.database) {\r\n            const queryRunner = await this.createQueryRunner(\"master\");\r\n\r\n            this.database = await queryRunner.getCurrentDatabase();\r\n\r\n            await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\r\n     */\r\n    afterConnect(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n    }\r\n\r\n    /**\r\n     * Creates a schema builder used to build and sync a schema.\r\n     */\r\n    createSchemaBuilder() {\r\n        return new RdbmsSchemaBuilder(this.connection);\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode) {\r\n        return new AuroraDataApiQueryRunner(this, new this.DataApiDriver(\r\n            this.options.region,\r\n            this.options.secretArn,\r\n            this.options.resourceArn,\r\n            this.options.database,\r\n            (query: string, parameters?: any[]) => this.connection.logger.logQuery(query, parameters),\r\n            this.options.serviceConfigOptions,\r\n            this.options.formatOptions,\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\r\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(key => nativeParameters[key]);\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, escapedParameters];\r\n\r\n        sql = sql.replace(/:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g, (full, isArray: string, key: string): string => {\r\n            if (!parameters.hasOwnProperty(key)) {\r\n                return full;\r\n            }\r\n\r\n            let value: any = parameters[key];\r\n\r\n            if (isArray) {\r\n                return value.map((v: any) => {\r\n                    escapedParameters.push(v);\r\n                    return this.createParameter(key, escapedParameters.length - 1);\r\n                }).join(\", \");\r\n\r\n            }\r\n\r\n            if (value instanceof Function) {\r\n                return value();\r\n\r\n            }\r\n\r\n            escapedParameters.push(value);\r\n            return this.createParameter(key, escapedParameters.length - 1);\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escape(columnName: string): string {\r\n        return \"`\" + columnName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Build full table name with database name, schema name and table name.\r\n     * E.g. myDB.mySchema.myTable\r\n     */\r\n    buildTableName(tableName: string, schema?: string, database?: string): string {\r\n        let tablePath = [ tableName ];\r\n\r\n        if (database) {\r\n            tablePath.unshift(database);\r\n        }\r\n\r\n        return tablePath.join(\".\");\r\n    }\r\n\r\n    /**\r\n     * Parse a target table name or other types and return a normalized table definition.\r\n     */\r\n    parseTableName(target: EntityMetadata | Table | View | TableForeignKey | string): { database?: string, schema?: string, tableName: string } {\r\n        const driverDatabase = this.database;\r\n        const driverSchema = undefined;\r\n\r\n        if (target instanceof Table || target instanceof View) {\r\n            const parsed = this.parseTableName(target.name);\r\n\r\n            return {\r\n                database: target.database || parsed.database || driverDatabase,\r\n                schema: target.schema || parsed.schema || driverSchema,\r\n                tableName: parsed.tableName\r\n            };\r\n        }\r\n\r\n        if (target instanceof TableForeignKey) {\r\n            const parsed = this.parseTableName(target.referencedTableName);\r\n\r\n            return {\r\n                database: target.referencedDatabase || parsed.database || driverDatabase,\r\n                schema: target.referencedSchema || parsed.schema || driverSchema,\r\n                tableName: parsed.tableName\r\n            };\r\n        }\r\n\r\n        if (target instanceof EntityMetadata) {\r\n            // EntityMetadata tableName is never a path\r\n\r\n            return {\r\n                database: target.database || driverDatabase,\r\n                schema: target.schema || driverSchema,\r\n                tableName: target.tableName\r\n            };\r\n\r\n        }\r\n\r\n        const parts = target.split(\".\");\r\n\r\n        return {\r\n            database: (parts.length > 1 ? parts[0] : undefined) || driverDatabase,\r\n            schema: driverSchema,\r\n            tableName: parts.length > 1 ? parts[1] : parts[0]\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\r\n\r\n        if (!this.options.formatOptions || this.options.formatOptions.castParameters !== false) {\r\n            return this.client.preparePersistentValue(value, columnMetadata);\r\n        }\r\n\r\n        if (value === null || value === undefined)\r\n            return value;\r\n\r\n        if (columnMetadata.type === Boolean) {\r\n            return value === true ? 1 : 0;\r\n\r\n        } else if (columnMetadata.type === \"date\") {\r\n            return DateUtils.mixedDateToDateString(value);\r\n\r\n        } else if (columnMetadata.type === \"time\") {\r\n            return DateUtils.mixedDateToTimeString(value);\r\n\r\n        } else if (columnMetadata.type === \"json\") {\r\n            return JSON.stringify(value);\r\n\r\n        } else if (columnMetadata.type === \"timestamp\" || columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\r\n            return DateUtils.mixedDateToDate(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-array\" || columnMetadata.type === \"set\") {\r\n            return DateUtils.simpleArrayToString(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            return DateUtils.simpleJsonToString(value);\r\n\r\n        } else if (columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\") {\r\n            return \"\" + value;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\r\n\r\n        if (!this.options.formatOptions || this.options.formatOptions.castParameters !== false) {\r\n            return this.client.prepareHydratedValue(value, columnMetadata);\r\n        }\r\n\r\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"bool\" || columnMetadata.type === \"boolean\") {\r\n            value = value ? true : false;\r\n\r\n        } else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\r\n            value = DateUtils.normalizeHydratedDate(value);\r\n\r\n        } else if (columnMetadata.type === \"date\") {\r\n            value = DateUtils.mixedDateToDateString(value);\r\n\r\n        } else if (columnMetadata.type === \"json\") {\r\n            value = typeof value === \"string\" ? JSON.parse(value) : value;\r\n\r\n        } else if (columnMetadata.type === \"time\") {\r\n            value = DateUtils.mixedTimeToString(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-array\" || columnMetadata.type === \"set\") {\r\n            value = DateUtils.stringToSimpleArray(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            value = DateUtils.stringToSimpleJson(value);\r\n\r\n        } else if ((columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\")\r\n            && columnMetadata.enum\r\n            && !isNaN(value)\r\n            && columnMetadata.enum.indexOf(parseInt(value)) >= 0) {\r\n            // convert to number if that exists in possible enum options\r\n            value = parseInt(value);\r\n        }\r\n\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(column: { type: ColumnType, length?: number|string, precision?: number|null, scale?: number }): string {\r\n        if (column.type === Number || column.type === \"integer\") {\r\n            return \"int\";\r\n\r\n        } else if (column.type === String) {\r\n            return \"varchar\";\r\n\r\n        } else if (column.type === Date) {\r\n            return \"datetime\";\r\n\r\n        } else if ((column.type as any) === Buffer) {\r\n            return \"blob\";\r\n\r\n        } else if (column.type === Boolean) {\r\n            return \"tinyint\";\r\n\r\n        } else if (column.type === \"uuid\") {\r\n            return \"varchar\";\r\n\r\n        } else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\r\n            return \"text\";\r\n\r\n        } else if (column.type === \"simple-enum\") {\r\n            return \"enum\";\r\n\r\n        } else if (column.type === \"double precision\" || column.type === \"real\") {\r\n            return \"double\";\r\n\r\n        } else if (column.type === \"dec\" || column.type === \"numeric\" || column.type === \"fixed\") {\r\n            return \"decimal\";\r\n\r\n        } else if (column.type === \"bool\" || column.type === \"boolean\") {\r\n            return \"tinyint\";\r\n\r\n        } else if (column.type === \"nvarchar\" || column.type === \"national varchar\") {\r\n            return \"varchar\";\r\n\r\n        } else if (column.type === \"nchar\" || column.type === \"national char\") {\r\n            return \"char\";\r\n\r\n        } else {\r\n            return column.type as string || \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\r\n        const defaultValue = columnMetadata.default;\r\n\r\n        if (defaultValue === null) {\r\n            return undefined;\r\n        }\r\n\r\n        if ((columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\") && defaultValue !== undefined) {\r\n            return `'${defaultValue}'`;\r\n        }\r\n\r\n        if ((columnMetadata.type === \"set\") && defaultValue !== undefined) {\r\n            return `'${DateUtils.simpleArrayToString(defaultValue)}'`;\r\n        }\r\n\r\n        if (typeof defaultValue === \"number\") {\r\n            return `${defaultValue}`;\r\n        }\r\n\r\n        if (typeof defaultValue === \"boolean\") {\r\n            return defaultValue ? \"1\" : \"0\";\r\n        }\r\n\r\n        if (typeof defaultValue === \"function\") {\r\n            return defaultValue();\r\n        }\r\n\r\n        if (typeof defaultValue === \"string\") {\r\n            return `'${defaultValue}'`;\r\n        }\r\n\r\n        if (defaultValue === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return `${defaultValue}`;\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"isUnique\" value of the column.\r\n     */\r\n    normalizeIsUnique(column: ColumnMetadata): boolean {\r\n        return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);\r\n    }\r\n\r\n    /**\r\n     * Returns default column lengths, which is required on column creation.\r\n     */\r\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\r\n        if (column.length)\r\n            return column.length.toString();\r\n\r\n        /**\r\n         * fix https://github.com/typeorm/typeorm/issues/1139\r\n         */\r\n        if (column.generationStrategy === \"uuid\")\r\n            return \"36\";\r\n\r\n        switch (column.type) {\r\n            case String:\r\n            case \"varchar\":\r\n            case \"nvarchar\":\r\n            case \"national varchar\":\r\n                return \"255\";\r\n            case \"varbinary\":\r\n                return \"255\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates column type definition including length, precision and scale\r\n     */\r\n    createFullType(column: TableColumn): string {\r\n        let type = column.type;\r\n\r\n        // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types\r\n        if (this.getColumnLength(column)) {\r\n            type += `(${this.getColumnLength(column)})`;\r\n\r\n        } else if (column.width) {\r\n            type += `(${column.width})`;\r\n\r\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\r\n            type += `(${column.precision},${column.scale})`;\r\n\r\n        } else if (column.precision !== null && column.precision !== undefined) {\r\n            type += `(${column.precision})`;\r\n        }\r\n\r\n        if (column.isArray)\r\n            type += \" array\";\r\n\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a master server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns default connection's database connection.\r\n     */\r\n    obtainMasterConnection(): Promise<any> {\r\n        return new Promise<any>((ok, fail) => {\r\n            if (this.poolCluster) {\r\n                this.poolCluster.getConnection(\"MASTER\", (err: any, dbConnection: any) => {\r\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\r\n                });\r\n\r\n            } else if (this.pool) {\r\n                this.pool.getConnection((err: any, dbConnection: any) => {\r\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\r\n                });\r\n            } else {\r\n                fail(new TypeORMError(`Connection is not established with mysql database`));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a slave server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns master (default) connection's database connection.\r\n     */\r\n    obtainSlaveConnection(): Promise<any> {\r\n        if (!this.poolCluster)\r\n            return this.obtainMasterConnection();\r\n\r\n        return new Promise<any>((ok, fail) => {\r\n            this.poolCluster.getConnection(\"SLAVE*\", (err: any, dbConnection: any) => {\r\n                err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates generated map of values generated or returned by database after INSERT query.\r\n     */\r\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any, entityIndex: number) {\r\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\r\n            let value: any;\r\n            if (generatedColumn.generationStrategy === \"increment\" && insertResult.insertId) {\r\n                // NOTE: When multiple rows is inserted by a single INSERT statement,\r\n                // `insertId` is the value generated for the first inserted row only.\r\n                value = insertResult.insertId + entityIndex;\r\n            // } else if (generatedColumn.generationStrategy === \"uuid\") {\r\n            //     console.log(\"getting db value:\", generatedColumn.databaseName);\r\n            //     value = generatedColumn.getEntityValue(uuidMap);\r\n            }\r\n\r\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\r\n        }, {} as ObjectLiteral);\r\n\r\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\r\n    }\r\n\r\n    /**\r\n     * Differentiate columns of this table and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\r\n        return columnMetadatas.filter(columnMetadata => {\r\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\r\n            if (!tableColumn)\r\n                return false; // we don't need new columns, we only need exist and changed\r\n\r\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\r\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\r\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\r\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\r\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\r\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\r\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\r\n            // console.log(\"zerofill:\", tableColumn.zerofill, columnMetadata.zerofill);\r\n            // console.log(\"unsigned:\", tableColumn.unsigned, columnMetadata.unsigned);\r\n            // console.log(\"asExpression:\", tableColumn.asExpression, columnMetadata.asExpression);\r\n            // console.log(\"generatedType:\", tableColumn.generatedType, columnMetadata.generatedType);\r\n            // console.log(\"comment:\", tableColumn.comment, this.escapeComment(columnMetadata.comment));\r\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\r\n            // console.log(\"enum:\", tableColumn.enum, columnMetadata.enum);\r\n            // console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\r\n            // console.log(\"onUpdate:\", tableColumn.onUpdate, columnMetadata.onUpdate);\r\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\r\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\r\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\r\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\r\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\r\n            // console.log(\"==========================================\");\r\n\r\n            let columnMetadataLength = columnMetadata.length;\r\n            if (!columnMetadataLength && columnMetadata.generationStrategy === \"uuid\") { // fixing #3374\r\n                columnMetadataLength = this.getColumnLength(columnMetadata);\r\n            }\r\n\r\n            return tableColumn.name !== columnMetadata.databaseName\r\n                || tableColumn.type !== this.normalizeType(columnMetadata)\r\n                || tableColumn.length !== columnMetadataLength\r\n                || tableColumn.width !== columnMetadata.width\r\n                || tableColumn.precision !== columnMetadata.precision\r\n                || tableColumn.scale !== columnMetadata.scale\r\n                || tableColumn.zerofill !== columnMetadata.zerofill\r\n                || tableColumn.unsigned !== columnMetadata.unsigned\r\n                || tableColumn.asExpression !== columnMetadata.asExpression\r\n                || tableColumn.generatedType !== columnMetadata.generatedType\r\n                || tableColumn.comment !== this.escapeComment(columnMetadata.comment)\r\n                || !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default)\r\n                || (tableColumn.enum && columnMetadata.enum && !OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map(val => val + \"\")))\r\n                || tableColumn.onUpdate !== columnMetadata.onUpdate\r\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\r\n                || tableColumn.isNullable !== columnMetadata.isNullable\r\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\r\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports RETURNING / OUTPUT statement.\r\n     */\r\n    isReturningSqlSupported(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports uuid values generation on its own.\r\n     */\r\n    isUUIDGenerationSupported(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports fulltext indices.\r\n     */\r\n    isFullTextColumnTypeSupported(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an escaped parameter.\r\n     */\r\n    createParameter(parameterName: string, index: number): string {\r\n        return \"?\";\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads all driver dependencies.\r\n     */\r\n    protected loadDependencies(): void {\r\n        const DataApiDriver = this.options.driver || PlatformTools.load(\"typeorm-aurora-data-api-driver\");\r\n        this.DataApiDriver = DataApiDriver;\r\n\r\n        // Driver uses rollup for publishing, which has issues when using typeorm in combination with webpack\r\n        // See https://github.com/webpack/webpack/issues/4742#issuecomment-295556787\r\n        this.DataApiDriver = this.DataApiDriver.default || this.DataApiDriver;\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection pool for a given database credentials.\r\n     */\r\n    protected createConnectionOptions(options: AuroraDataApiConnectionOptions, credentials: AuroraDataApiConnectionCredentialsOptions): Promise<any> {\r\n\r\n        credentials = Object.assign({}, credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\r\n\r\n        // build connection options for the driver\r\n        return Object.assign({}, {\r\n            resourceArn: options.resourceArn,\r\n            secretArn: options.secretArn,\r\n            database: options.database,\r\n            region: options.region,\r\n            type: options.type,\r\n        }, {\r\n            host: credentials.host,\r\n            user: credentials.username,\r\n            password: credentials.password,\r\n            database: credentials.database,\r\n            port: credentials.port,\r\n            ssl: options.ssl\r\n        },\r\n\r\n        options.extra || {});\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection pool for a given database credentials.\r\n     */\r\n    protected async createPool(connectionOptions: any): Promise<any> {\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * Attaches all required base handlers to a database connection, such as the unhandled error handler.\r\n     */\r\n    private prepareDbConnection(connection: any): any {\r\n        const { logger } = this.connection;\r\n        /**\r\n         * Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and\r\n         * cause the hosting app to crash.\r\n         */\r\n        if (connection.listeners(\"error\").length === 0) {\r\n            connection.on(\"error\", (error: any) => logger.log(\"warn\", `MySQL connection raised an error. ${error}`));\r\n        }\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\r\n     */\r\n    protected compareDefaultValues(columnMetadataValue: string | undefined, databaseValue: string | undefined): boolean {\r\n        if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\") {\r\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\r\n            // as result compare cannot understand if default is really changed or not\r\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\r\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\r\n        }\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Escapes a given comment.\r\n     */\r\n    protected escapeComment(comment?: string) {\r\n        if (!comment)  return comment;\r\n\r\n        comment = comment.replace(/\\u0000/g, \"\"); // Null bytes aren't allowed in comments\r\n\r\n        return comment;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}