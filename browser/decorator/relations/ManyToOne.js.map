{"version":3,"sources":["../browser/src/decorator/relations/ManyToOne.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAC,MAAM,eAAe,CAAC;AAqBrD;;;;GAIG;AACH,MAAM,UAAU,SAAS,CAAI,oBAA4D,EAC5D,oBAAkE,EAClE,OAAyB;IAElD,wBAAwB;IACxB,IAAI,mBAAgD,CAAC;IACrD,IAAI,OAAO,oBAAoB,KAAK,QAAQ,EAAE;QAC1C,OAAO,GAAqB,oBAAoB,CAAC;KACpD;SAAM;QACH,mBAAmB,GAAiC,oBAAoB,CAAC;KAC5E;IAED,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,EAAqB,CAAC;QAE9C,iDAAiD;QACjD,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC;QAC9C,IAAI,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,EAAE,EAAE,0BAA0B;YAChF,IAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;YACxF,IAAI,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS;gBACzG,MAAM,GAAG,IAAI,CAAC;SACrB;QAED,sBAAsB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;YACpC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,YAAY,EAAE,aAAa;YAC3B,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,oBAAoB;YAC1B,mBAAmB,EAAE,mBAAmB;YACxC,OAAO,EAAE,OAAO;SACK,CAAC,CAAC;IAC/B,CAAC,CAAC;AACN,CAAC","file":"ManyToOne.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../globals\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\nimport { ObjectType } from \"../../common/ObjectType\";\r\nimport { RelationOptions } from \"../options/RelationOptions\";\r\n\r\n/**\r\n * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but\r\n * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of\r\n * Entity2 on its side of the relation.\r\n */\r\nexport function ManyToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>), options?: RelationOptions): PropertyDecorator;\r\n\r\n/**\r\n * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but\r\n * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of\r\n * Entity2 on its side of the relation.\r\n */\r\nexport function ManyToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>),\r\n                             inverseSide?: string|((object: T) => any),\r\n                             options?: RelationOptions): PropertyDecorator;\r\n\r\n/**\r\n * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but\r\n * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of\r\n * Entity2 on its side of the relation.\r\n */\r\nexport function ManyToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>),\r\n                             inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\r\n                             options?: RelationOptions): PropertyDecorator {\r\n\r\n    // Normalize parameters.\r\n    let inverseSideProperty: string|((object: T) => any);\r\n    if (typeof inverseSideOrOptions === \"object\") {\r\n        options = <RelationOptions> inverseSideOrOptions;\r\n    } else {\r\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\r\n    }\r\n\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // Now try to determine if it is a lazy relation.\r\n        let isLazy = options && options.lazy === true;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        getMetadataArgsStorage().relations.push({\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            relationType: \"many-to-one\",\r\n            isLazy: isLazy,\r\n            type: typeFunctionOrTarget,\r\n            inverseSideProperty: inverseSideProperty,\r\n            options: options\r\n        } as RelationMetadataArgs);\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}