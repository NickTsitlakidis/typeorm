{"version":3,"sources":["../browser/src/decorator/Unique.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,YAAY,CAAC;AAwBpD;;GAEG;AACH,MAAM,UAAU,MAAM,CAAC,qBAAkH,EAClH,oBAAyG,EACzG,YAA4B;IAC/C,IAAM,IAAI,GAAG,OAAO,qBAAqB,KAAK,QAAQ,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,SAAS,CAAC;IAC3F,IAAM,MAAM,GAAG,OAAO,qBAAqB,KAAK,QAAQ,CAAC,CAAC,CAAqE,oBAAoB,CAAC,CAAC,CAAC,qBAAiC,CAAC;IACxL,IAAI,OAAO,GAAG,CAAC,OAAO,qBAAqB,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,qBAAsC,CAAC,CAAC,CAAC,YAAY,CAAC;IAC3J,IAAI,CAAC,OAAO;QACR,OAAO,GAAG,CAAC,OAAO,oBAAoB,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,oBAAqC,CAAC,CAAC,CAAC,YAAY,CAAC;IAExJ,OAAO,UAAU,WAA8B,EAAE,YAA8B;QAE3E,IAAI,OAAO,GAAG,MAAM,CAAC;QAErB,IAAI,YAAY,KAAK,SAAS,EAAE;YAC5B,QAAQ,OAAO,CAAC,YAAY,CAAC,EAAE;gBAC3B,KAAK,QAAQ;oBACT,OAAO,GAAG,CAAC,YAAY,CAAC,CAAC;oBACzB,MAAM;gBAEV,KAAK,QAAQ;oBACT,OAAO,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;oBACpC,MAAM;aACb;SACJ;QAED,IAAM,IAAI,GAAuB;YAC7B,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,WAAuB;YACxE,IAAI,EAAE,IAAI;YACV,OAAO,SAAA;YACP,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS;SACvD,CAAC;QACF,sBAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC;AACN,CAAC","file":"Unique.js","sourcesContent":["import { getMetadataArgsStorage } from \"../globals\";\r\nimport { UniqueMetadataArgs } from \"../metadata-args/UniqueMetadataArgs\";\r\nimport { UniqueOptions } from \"./options/UniqueOptions\";\r\n\r\n/**\r\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\r\n */\r\nexport function Unique(name: string, fields: string[], options?: UniqueOptions): ClassDecorator & PropertyDecorator;\r\n\r\n/**\r\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\r\n */\r\nexport function Unique(fields: string[], options?: UniqueOptions): ClassDecorator & PropertyDecorator;\r\n\r\n/**\r\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\r\n */\r\nexport function Unique(fields: (object?: any) => (any[] | { [key: string]: number }), options?: UniqueOptions): ClassDecorator & PropertyDecorator;\r\n\r\n/**\r\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\r\n */\r\nexport function Unique(name: string, fields: (object?: any) => (any[] | { [key: string]: number }), options?: UniqueOptions): ClassDecorator & PropertyDecorator;\r\n\r\n/**\r\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\r\n */\r\nexport function Unique(nameOrFieldsOrOptions?: string | string[] | ((object: any) => (any[] | { [key: string]: number })) | UniqueOptions,\r\n                       maybeFieldsOrOptions?: ((object?: any) => (any[] | { [key: string]: number })) | string[] | UniqueOptions,\r\n                       maybeOptions?: UniqueOptions): ClassDecorator & PropertyDecorator {\r\n    const name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\r\n    const fields = typeof nameOrFieldsOrOptions === \"string\" ? <((object?: any) => (any[] | { [key: string]: number })) | string[]>maybeFieldsOrOptions : nameOrFieldsOrOptions as string[];\r\n    let options = (typeof nameOrFieldsOrOptions === \"object\" && !Array.isArray(nameOrFieldsOrOptions)) ? nameOrFieldsOrOptions as UniqueOptions : maybeOptions;\r\n    if (!options)\r\n        options = (typeof maybeFieldsOrOptions === \"object\" && !Array.isArray(maybeFieldsOrOptions)) ? maybeFieldsOrOptions as UniqueOptions : maybeOptions;\r\n\r\n    return function (clsOrObject: Function | Object, propertyName?: string | symbol) {\r\n\r\n        let columns = fields;\r\n\r\n        if (propertyName !== undefined) {\r\n            switch (typeof (propertyName)) {\r\n                case \"string\":\r\n                    columns = [propertyName];\r\n                    break;\r\n\r\n                case \"symbol\":\r\n                    columns = [propertyName.toString()];\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const args: UniqueMetadataArgs = {\r\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\r\n            name: name,\r\n            columns,\r\n            deferrable: options ? options.deferrable : undefined,\r\n        };\r\n        getMetadataArgsStorage().uniques.push(args);\r\n    };\r\n}\r\n"],"sourceRoot":".."}