{"version":3,"sources":["../browser/src/util/ImportUtils.ts"],"names":[],"mappings":"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","file":"ImportUtils.js","sourcesContent":["import fs from \"fs\";\r\nimport path from \"path\";\r\nimport {pathToFileURL} from \"url\";\r\n\r\nexport async function importOrRequireFile(filePath: string): Promise<[result: any, moduleType: \"esm\" | \"commonjs\"]> {\r\n    const tryToImport = async (): Promise<[any, \"esm\"]> => {\r\n        // `Function` is required to make sure the `import` statement wil stay `import` after\r\n        // transpilation and won't be converted to `require`\r\n        return [await Function(\"return filePath => import(filePath)\")()(\r\n            filePath.startsWith(\"file://\") ? filePath : pathToFileURL(filePath).toString()\r\n        ), \"esm\"];\r\n    };\r\n    const tryToRequire = async (): Promise<[any, \"commonjs\"]> => {\r\n        return [require(filePath), \"commonjs\"];\r\n    };\r\n\r\n    const extension = filePath.substring(filePath.lastIndexOf(\".\") + \".\".length);\r\n\r\n    if (extension === \"mjs\" || extension === \"mts\")\r\n        return tryToImport();\r\n    else if (extension === \"cjs\" || extension === \"cts\")\r\n        return tryToRequire();\r\n    else if (extension === \"js\" || extension === \"ts\") {\r\n        const packageJson = await getNearestPackageJson(filePath);\r\n\r\n        if (packageJson != null) {\r\n            const isModule = (packageJson as any)?.type === \"module\";\r\n\r\n            if (isModule)\r\n                return tryToImport();\r\n            else\r\n                return tryToRequire();\r\n        } else\r\n            return tryToRequire();\r\n    }\r\n\r\n    return tryToRequire();\r\n}\r\n\r\nfunction getNearestPackageJson(filePath: string): Promise<object | null> {\r\n    return new Promise((accept) => {\r\n        let currentPath = filePath;\r\n\r\n        function searchPackageJson() {\r\n            const nextPath = path.dirname(currentPath);\r\n\r\n            if (currentPath === nextPath) // the top of the file tree is reached\r\n                accept(null);\r\n            else {\r\n                currentPath = nextPath;\r\n                const potentialPackageJson = path.join(currentPath, \"package.json\");\r\n\r\n                fs.stat(potentialPackageJson, (err, stats) => {\r\n                    if (err != null)\r\n                        searchPackageJson();\r\n                    else if (stats.isFile()) {\r\n                        fs.readFile(potentialPackageJson, \"utf8\", (err, data) => {\r\n                            if (err != null)\r\n                                accept(null);\r\n                            else {\r\n                                try {\r\n                                    accept(JSON.parse(data));\r\n                                } catch (err) {\r\n                                    accept(null);\r\n                                }\r\n                            }\r\n                        });\r\n                    } else\r\n                        searchPackageJson();\r\n                });\r\n            }\r\n        }\r\n\r\n        searchPackageJson();\r\n    });\r\n}\r\n"],"sourceRoot":".."}