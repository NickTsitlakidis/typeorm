{"version":3,"sources":["../browser/src/util/OrmUtils.ts"],"names":[],"mappings":"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","file":"OrmUtils.js","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\nexport class OrmUtils {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Chunks array into pieces.\r\n     */\r\n    static chunk<T>(array: T[], size: number): T[][] {\r\n        return Array.from(Array(Math.ceil(array.length / size)), (_, i) => {\r\n            return array.slice(i * size, i * size + size);\r\n        });\r\n    }\r\n\r\n    static splitClassesAndStrings<T>(clsesAndStrings: (string | T)[]): [T[], string[]] {\r\n        return [\r\n            (clsesAndStrings).filter((cls): cls is T => typeof cls !== \"string\"),\r\n            (clsesAndStrings).filter((str): str is string => typeof str === \"string\"),\r\n        ];\r\n    }\r\n\r\n    static groupBy<T, R>(array: T[], propertyCallback: (item: T) => R): { id: R, items: T[] }[] {\r\n        return array.reduce((groupedArray, value) => {\r\n            const key = propertyCallback(value);\r\n            let grouped = groupedArray.find(i => i.id === key);\r\n            if (!grouped) {\r\n                grouped = { id: key, items: [] };\r\n                groupedArray.push(grouped);\r\n            }\r\n            grouped.items.push(value);\r\n            return groupedArray;\r\n        }, [] as Array<{ id: R, items: T[] }>);\r\n    }\r\n\r\n    static uniq<T>(array: T[], criteria?: (item: T) => any): T[];\r\n    static uniq<T, K extends keyof T>(array: T[], property: K): T[];\r\n    static uniq<T, K extends keyof T>(array: T[], criteriaOrProperty?: ((item: T) => any) | K): T[] {\r\n        return array.reduce((uniqueArray, item) => {\r\n            let found: boolean = false;\r\n            if (criteriaOrProperty instanceof Function) {\r\n                const itemValue = criteriaOrProperty(item);\r\n                found = !!uniqueArray.find(uniqueItem => criteriaOrProperty(uniqueItem) === itemValue);\r\n\r\n            } else if (typeof criteriaOrProperty === \"string\") {\r\n                found = !!uniqueArray.find(uniqueItem => uniqueItem[criteriaOrProperty] === item[criteriaOrProperty]);\r\n\r\n            } else {\r\n                found = uniqueArray.indexOf(item) !== -1;\r\n            }\r\n\r\n            if (!found)\r\n                uniqueArray.push(item);\r\n\r\n            return uniqueArray;\r\n        }, [] as T[]);\r\n    }\r\n\r\n    // Checks if it's an object made by Object.create(null), {} or new Object()\r\n    private static isPlainObject(item: any) {\r\n        if (item === null || item === undefined) {\r\n            return false;\r\n        }\r\n\r\n        return !item.constructor || item.constructor === Object;\r\n    }\r\n\r\n    private static mergeArrayKey(target: any, key: number, value: any, memo: Map<any, any>) {\r\n        // Have we seen this before?  Prevent infinite recursion.\r\n        if (memo.has(value)) {\r\n            target[key] = memo.get(value);\r\n            return;\r\n        }\r\n\r\n        if (value instanceof Promise) {\r\n            // Skip promises entirely.\r\n            // This is a hold-over from the old code & is because we don't want to pull in\r\n            // the lazy fields.  Ideally we'd remove these promises via another function first\r\n            // but for now we have to do it here.\r\n            return;\r\n        }\r\n\r\n\r\n        if (!this.isPlainObject(value) && !Array.isArray(value)) {\r\n            target[key] = value;\r\n            return;\r\n        }\r\n\r\n        if (!target[key]) {\r\n            target[key] = Array.isArray(value) ? [] : {};\r\n        }\r\n\r\n        memo.set(value, target[key]);\r\n        this.merge(target[key], value, memo);\r\n        memo.delete(value);\r\n    }\r\n\r\n    private static mergeObjectKey(target: any, key: string, value: any, memo: Map<any, any>) {\r\n        // Have we seen this before?  Prevent infinite recursion.\r\n        if (memo.has(value)) {\r\n            Object.assign(target, { [key]: memo.get(value) });\r\n            return;\r\n        }\r\n\r\n        if (value instanceof Promise) {\r\n            // Skip promises entirely.\r\n            // This is a hold-over from the old code & is because we don't want to pull in\r\n            // the lazy fields.  Ideally we'd remove these promises via another function first\r\n            // but for now we have to do it here.\r\n            return;\r\n        }\r\n\r\n        if (!this.isPlainObject(value) && !Array.isArray(value)) {\r\n            Object.assign(target, { [key]: value });\r\n            return;\r\n        }\r\n\r\n        if (!target[key]) {\r\n            Object.assign(target, { [key]: Array.isArray(value) ? [] : {} });\r\n        }\r\n\r\n        memo.set(value, target[key]);\r\n        this.merge(target[key], value, memo);\r\n        memo.delete(value);\r\n    }\r\n\r\n    private static merge(target: any, source: any, memo: Map<any, any> = new Map()): any {\r\n        if (this.isPlainObject(target) && this.isPlainObject(source)) {\r\n            for (const key of Object.keys(source)) {\r\n                this.mergeObjectKey(target, key, source[key], memo);\r\n            }\r\n        }\r\n\r\n        if (Array.isArray(target) && Array.isArray(source)) {\r\n            for (let key = 0; key < source.length; key++) {\r\n                this.mergeArrayKey(target, key, source[key], memo);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deep Object.assign.\r\n     */\r\n    static mergeDeep(target: any, ...sources: any[]): any {\r\n        if (!sources.length) {\r\n            return target;\r\n        }\r\n\r\n        for (const source of sources) {\r\n            OrmUtils.merge(target, source);\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * Deep compare objects.\r\n     *\r\n     * @see http://stackoverflow.com/a/1144249\r\n     */\r\n    static deepCompare(...args: any[]): boolean {\r\n        let i: any, l: any, leftChain: any, rightChain: any;\r\n\r\n        if (arguments.length < 1) {\r\n            return true; // Die silently? Don't know how to handle such case, please help...\r\n            // throw \"Need two or more arguments to compare\";\r\n        }\r\n\r\n        for (i = 1, l = arguments.length; i < l; i++) {\r\n\r\n            leftChain = []; // Todo: this can be cached\r\n            rightChain = [];\r\n\r\n            if (!this.compare2Objects(leftChain, rightChain, arguments[0], arguments[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Check if two entity-id-maps are the same\r\n     */\r\n    static compareIds(firstId: ObjectLiteral|undefined, secondId: ObjectLiteral|undefined): boolean {\r\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\r\n            return false;\r\n\r\n        // Optimized version for the common case\r\n        if (\r\n            ((typeof firstId.id === \"string\" && typeof secondId.id === \"string\") ||\r\n            (typeof firstId.id === \"number\" && typeof secondId.id === \"number\")) &&\r\n            Object.keys(firstId).length === 1 &&\r\n            Object.keys(secondId).length === 1\r\n        ) {\r\n            return firstId.id === secondId.id;\r\n        }\r\n\r\n        return OrmUtils.deepCompare(firstId, secondId);\r\n    }\r\n\r\n    /**\r\n     * Transforms given value into boolean value.\r\n     */\r\n    static toBoolean(value: any): boolean {\r\n        if (typeof value === \"boolean\")\r\n            return value;\r\n\r\n        if (typeof value === \"string\")\r\n            return value === \"true\" || value === \"1\";\r\n\r\n        if (typeof value === \"number\")\r\n            return value > 0;\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Composes an object from the given array of keys and values.\r\n     */\r\n    static zipObject(keys: any[], values: any[]): ObjectLiteral {\r\n        return keys.reduce((object, column, index) => {\r\n            object[column] = values[index];\r\n            return object;\r\n        }, {} as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Compares two arrays.\r\n     */\r\n    static isArraysEqual(arr1: any[], arr2: any[]): boolean {\r\n        if (arr1.length !== arr2.length) return false;\r\n        return arr1.every(element => {\r\n            return arr2.indexOf(element) !== -1;\r\n        });\r\n    }\r\n\r\n    static areMutuallyExclusive<T>(...lists: T[][]): boolean {\r\n        const haveSharedObjects = lists.some(list => {\r\n            const otherLists = lists.filter(otherList => otherList !== list);\r\n            return list.some(item => otherLists.some(otherList => otherList.includes(item)));\r\n        });\r\n        return !haveSharedObjects;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    private static compare2Objects(leftChain: any, rightChain: any, x: any, y: any) {\r\n        let p;\r\n\r\n        // remember that NaN === NaN returns false\r\n        // and isNaN(undefined) returns true\r\n        if (Number.isNaN(x) && Number.isNaN(y))\r\n            return true;\r\n\r\n        // Compare primitives and functions.\r\n        // Check if both arguments link to the same object.\r\n        // Especially useful on the step where we compare prototypes\r\n        if (x === y)\r\n            return true;\r\n\r\n        // Unequal, but either is null or undefined (use case: jsonb comparasion)\r\n        // PR #3776, todo: add tests\r\n        if (x === null || y === null || x === undefined || y === undefined)\r\n          return false;\r\n\r\n        // Fix the buffer compare bug.\r\n        // See: https://github.com/typeorm/typeorm/issues/3654\r\n        if ((typeof x.equals === \"function\" || x.equals instanceof Function) && x.equals(y))\r\n            return true;\r\n\r\n        // Works in case when functions are created in constructor.\r\n        // Comparing dates is a common scenario. Another built-ins?\r\n        // We can even handle functions passed across iframes\r\n        if ((typeof x === \"function\" && typeof y === \"function\") ||\r\n            (x instanceof Date && y instanceof Date) ||\r\n            (x instanceof RegExp && y instanceof RegExp) ||\r\n            (x instanceof String && y instanceof String) ||\r\n            (x instanceof Number && y instanceof Number))\r\n            return x.toString() === y.toString();\r\n\r\n        // At last checking prototypes as good as we can\r\n        if (!(x instanceof Object && y instanceof Object))\r\n            return false;\r\n\r\n        if (x.isPrototypeOf(y) || y.isPrototypeOf(x))\r\n            return false;\r\n\r\n        if (x.constructor !== y.constructor)\r\n            return false;\r\n\r\n        if (x.prototype !== y.prototype)\r\n            return false;\r\n\r\n        // Check for infinitive linking loops\r\n        if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1)\r\n            return false;\r\n\r\n        // Quick checking of one object being a subset of another.\r\n        // todo: cache the structure of arguments[0] for performance\r\n        for (p in y) {\r\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\r\n                return false;\r\n            }\r\n            else if (typeof y[p] !== typeof x[p]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for (p in x) {\r\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\r\n                return false;\r\n            }\r\n            else if (typeof y[p] !== typeof x[p]) {\r\n                return false;\r\n            }\r\n\r\n            switch (typeof (x[p])) {\r\n                case \"object\":\r\n                case \"function\":\r\n\r\n                    leftChain.push(x);\r\n                    rightChain.push(y);\r\n\r\n                    if (!this.compare2Objects(leftChain, rightChain, x[p], y[p])) {\r\n                        return false;\r\n                    }\r\n\r\n                    leftChain.pop();\r\n                    rightChain.pop();\r\n                    break;\r\n\r\n                default:\r\n                    if (x[p] !== y[p]) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}