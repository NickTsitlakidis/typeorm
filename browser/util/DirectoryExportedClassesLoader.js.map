{"version":3,"sources":["../browser/src/util/DirectoryExportedClassesLoader.ts"],"names":[],"mappings":"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","file":"DirectoryExportedClassesLoader.js","sourcesContent":["import glob from \"glob\";\r\nimport {PlatformTools} from \"../platform/PlatformTools\";\r\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\r\nimport {Logger} from \"../logger/Logger\";\r\nimport {importOrRequireFile} from \"./ImportUtils\";\r\n/**\r\n * Loads all exported classes from the given directory.\r\n */\r\nexport async function importClassesFromDirectories(logger: Logger, directories: string[], formats = [\".js\", \".mjs\", \".cjs\", \".ts\", \".mts\", \".cts\"]): Promise<Function[]> {\r\n\r\n    const logLevel = \"info\";\r\n    const classesNotFoundMessage = \"No classes were found using the provided glob pattern: \";\r\n    const classesFoundMessage = \"All classes found using provided glob pattern\";\r\n    function loadFileClasses(exported: any, allLoaded: Function[]) {\r\n        if (typeof exported === \"function\" || exported instanceof EntitySchema) {\r\n            allLoaded.push(exported);\r\n\r\n        } else if (Array.isArray(exported)) {\r\n            exported.forEach((i: any) => loadFileClasses(i, allLoaded));\r\n\r\n        } else if (typeof exported === \"object\" && exported !== null) {\r\n            Object.keys(exported).forEach(key => loadFileClasses(exported[key], allLoaded));\r\n\r\n        }\r\n        return allLoaded;\r\n    }\r\n\r\n    const allFiles = directories.reduce((allDirs, dir) => {\r\n        return allDirs.concat(glob.sync(PlatformTools.pathNormalize(dir)));\r\n    }, [] as string[]);\r\n\r\n    if (directories.length > 0 && allFiles.length === 0) {\r\n        logger.log(logLevel, `${classesNotFoundMessage} \"${directories}\"`);\r\n    } else if (allFiles.length > 0) {\r\n        logger.log(logLevel, `${classesFoundMessage} \"${directories}\" : \"${allFiles}\"`);\r\n    }\r\n    const dirPromises = allFiles\r\n        .filter(file => {\r\n            const dtsExtension = file.substring(file.length - 5, file.length);\r\n            return formats.indexOf(PlatformTools.pathExtname(file)) !== -1 && dtsExtension !== \".d.ts\";\r\n        })\r\n        .map(async file => {\r\n            const [importOrRequireResult] = await importOrRequireFile(PlatformTools.pathResolve(file));\r\n            return importOrRequireResult;\r\n        });\r\n\r\n    const dirs = await Promise.all(dirPromises);\r\n\r\n    return loadFileClasses(dirs, []);\r\n}\r\n\r\n/**\r\n * Loads all json files from the given directory.\r\n */\r\nexport function importJsonsFromDirectories(directories: string[], format = \".json\"): any[] {\r\n\r\n    const allFiles = directories.reduce((allDirs, dir) => {\r\n        return allDirs.concat(glob.sync(PlatformTools.pathNormalize(dir)));\r\n    }, [] as string[]);\r\n\r\n    return allFiles\r\n        .filter(file => PlatformTools.pathExtname(file) === format)\r\n        .map(file => require(PlatformTools.pathResolve(file)));\r\n}\r\n"],"sourceRoot":".."}