{"version":3,"sources":["../browser/src/globals.ts"],"names":[],"mappings":"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","file":"globals.js","sourcesContent":["import { MetadataArgsStorage } from \"./metadata-args/MetadataArgsStorage\";\r\nimport { PlatformTools } from \"./platform/PlatformTools\";\r\nimport { ConnectionOptions } from \"./connection/ConnectionOptions\";\r\nimport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\";\r\nimport { ConnectionManager } from \"./connection/ConnectionManager\";\r\nimport { getFromContainer } from \"./container\";\r\nimport { Connection } from \"./connection/Connection\";\r\nimport { EntityManager } from \"./entity-manager/EntityManager\";\r\nimport { MongoEntityManager } from \"./entity-manager/MongoEntityManager\";\r\nimport { SqljsEntityManager } from \"./entity-manager/SqljsEntityManager\";\r\nimport { EntityTarget } from \"./common/EntityTarget\";\r\nimport { Repository } from \"./repository/Repository\";\r\nimport { TreeRepository } from \"./repository/TreeRepository\";\r\nimport { ObjectType } from \"./common/ObjectType\";\r\nimport { MongoRepository } from \"./repository/MongoRepository\";\r\nimport { SelectQueryBuilder } from \"./query-builder/SelectQueryBuilder\";\r\n\r\n/**\r\n * Gets metadata args storage.\r\n */\r\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\r\n    // we should store metadata storage in a global variable otherwise it brings too much problems\r\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\r\n    // useContainer method with his own container implementation, that entity will be registered in the\r\n    // old old container (default one post probably) and consumer will his entity.\r\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\r\n    // another reason is that when we run migrations typeorm is being called from a global package\r\n    // and it may load entities which register decorators in typeorm of local package\r\n    // this leads to impossibility of usage of entities in migrations and cli related operations\r\n    const globalScope = PlatformTools.getGlobalVariable();\r\n    if (!globalScope.typeormMetadataArgsStorage)\r\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\r\n\r\n    return globalScope.typeormMetadataArgsStorage;\r\n}\r\n\r\n/**\r\n * Reads connection options stored in ormconfig configuration file.\r\n */\r\nexport async function getConnectionOptions(connectionName: string = \"default\"): Promise<ConnectionOptions> {\r\n    return new ConnectionOptionsReader().get(connectionName);\r\n}\r\n\r\n/**\r\n * Gets a ConnectionManager which creates connections.\r\n */\r\nexport function getConnectionManager(): ConnectionManager {\r\n    return getFromContainer(ConnectionManager);\r\n}\r\n\r\n/**\r\n * Creates a new connection and registers it in the manager.\r\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\r\n */\r\nexport async function createConnection(): Promise<Connection>;\r\n\r\n/**\r\n * Creates a new connection from the ormconfig file with a given name.\r\n */\r\nexport async function createConnection(name: string): Promise<Connection>;\r\n\r\n/**\r\n * Creates a new connection and registers it in the manager.\r\n */\r\nexport async function createConnection(options: ConnectionOptions): Promise<Connection>;\r\n\r\n/**\r\n * Creates a new connection and registers it in the manager.\r\n *\r\n * If connection options were not specified, then it will try to create connection automatically,\r\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\r\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\r\n */\r\nexport async function createConnection(optionsOrName?: any): Promise<Connection> {\r\n    const connectionName = typeof optionsOrName === \"string\" ? optionsOrName : \"default\";\r\n    const options = optionsOrName instanceof Object ? optionsOrName : await getConnectionOptions(connectionName);\r\n    return getConnectionManager().create(options).connect();\r\n}\r\n\r\n/**\r\n * Creates new connections and registers them in the manager.\r\n *\r\n * If connection options were not specified, then it will try to create connection automatically,\r\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\r\n * All connections from the ormconfig will be created.\r\n */\r\nexport async function createConnections(options?: ConnectionOptions[]): Promise<Connection[]> {\r\n    if (!options)\r\n        options = await new ConnectionOptionsReader().all();\r\n    const connections = options.map(options => getConnectionManager().create(options));\r\n    // Do not use Promise.all or test 8522 will produce a dangling sqlite connection\r\n    for (const connection of connections) {\r\n        await connection.connect()\r\n    }\r\n    return connections;\r\n}\r\n\r\n/**\r\n * Gets connection from the connection manager.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n */\r\nexport function getConnection(connectionName: string = \"default\"): Connection {\r\n    return getConnectionManager().get(connectionName);\r\n}\r\n\r\n/**\r\n * Gets entity manager from the connection.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n */\r\nexport function getManager(connectionName: string = \"default\"): EntityManager {\r\n    return getConnectionManager().get(connectionName).manager;\r\n}\r\n\r\n/**\r\n * Gets MongoDB entity manager from the connection.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n */\r\nexport function getMongoManager(connectionName: string = \"default\"): MongoEntityManager {\r\n    return getConnectionManager().get(connectionName).manager as MongoEntityManager;\r\n}\r\n\r\n/**\r\n * Gets Sqljs entity manager from connection name.\r\n * \"default\" connection is used, when no name is specified.\r\n * Only works when Sqljs driver is used.\r\n */\r\nexport function getSqljsManager(connectionName: string = \"default\"): SqljsEntityManager {\r\n    return getConnectionManager().get(connectionName).manager as SqljsEntityManager;\r\n}\r\n\r\n/**\r\n * Gets repository for the given entity class.\r\n */\r\nexport function getRepository<Entity>(entityClass: EntityTarget<Entity>, connectionName: string = \"default\"): Repository<Entity> {\r\n    return getConnectionManager().get(connectionName).getRepository<Entity>(entityClass);\r\n}\r\n\r\n/**\r\n * Gets tree repository for the given entity class.\r\n */\r\nexport function getTreeRepository<Entity>(entityClass: EntityTarget<Entity>, connectionName: string = \"default\"): TreeRepository<Entity> {\r\n    return getConnectionManager().get(connectionName).getTreeRepository<Entity>(entityClass);\r\n}\r\n\r\n/**\r\n * Gets tree repository for the given entity class.\r\n */\r\nexport function getCustomRepository<T>(customRepository: ObjectType<T>, connectionName: string = \"default\"): T {\r\n    return getConnectionManager().get(connectionName).getCustomRepository(customRepository);\r\n}\r\n\r\n/**\r\n * Gets mongodb repository for the given entity class or name.\r\n */\r\nexport function getMongoRepository<Entity>(entityClass: EntityTarget<Entity>, connectionName: string = \"default\"): MongoRepository<Entity> {\r\n    return getConnectionManager().get(connectionName).getMongoRepository<Entity>(entityClass);\r\n}\r\n\r\n/**\r\n * Creates a new query builder.\r\n */\r\nexport function createQueryBuilder<Entity>(entityClass?: EntityTarget<Entity>, alias?: string, connectionName: string = \"default\"): SelectQueryBuilder<Entity> {\r\n    if (entityClass) {\r\n        return getRepository(entityClass, connectionName).createQueryBuilder(alias);\r\n    }\r\n\r\n    return getConnection(connectionName).createQueryBuilder();\r\n}\r\n"],"sourceRoot":"."}