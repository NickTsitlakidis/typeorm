{"version":3,"sources":["../browser/src/query-builder/InsertQueryBuilder.ts"],"names":[],"mappings":"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","file":"InsertQueryBuilder.js","sourcesContent":["import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\r\nimport {SapDriver} from \"../driver/sap/SapDriver\";\r\nimport {QueryBuilder} from \"./QueryBuilder\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {EntityTarget} from \"../common/EntityTarget\";\r\nimport {QueryDeepPartialEntity} from \"./QueryPartialEntity\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\r\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\r\nimport {InsertResult} from \"./result/InsertResult\";\r\nimport {ReturningStatementNotSupportedError} from \"../error/ReturningStatementNotSupportedError\";\r\nimport {InsertValuesMissingError} from \"../error/InsertValuesMissingError\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {ReturningResultsEntityUpdator} from \"./ReturningResultsEntityUpdator\";\r\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\r\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\r\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\r\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\r\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\r\nimport {TypeORMError} from \"../error\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport { InsertOrUpdateOptions } from \"./InsertOrUpdateOptions\";\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class InsertQueryBuilder<Entity> extends QueryBuilder<Entity> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets generated SQL query without parameters being replaced.\r\n     */\r\n    getQuery(): string {\r\n        let sql = this.createComment();\r\n        sql += this.createInsertExpression();\r\n        return sql.trim();\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns raw database results.\r\n     */\r\n    async execute(): Promise<InsertResult> {\r\n        // console.time(\".value sets\");\r\n        const valueSets: ObjectLiteral[] = this.getValueSets();\r\n        // console.timeEnd(\".value sets\");\r\n\r\n        // If user passed empty array of entities then we don't need to do\r\n        // anything.\r\n        //\r\n        // Fixes GitHub issues #3111 and #5734. If we were to let this through\r\n        // we would run into problems downstream, like subscribers getting\r\n        // invoked with the empty array where they expect an entity, and SQL\r\n        // queries with an empty VALUES clause.\r\n        if (valueSets.length === 0)\r\n            return new InsertResult();\r\n\r\n        // console.time(\"QueryBuilder.execute\");\r\n        // console.time(\".database stuff\");\r\n        const queryRunner = this.obtainQueryRunner();\r\n        let transactionStartedByUs: boolean = false;\r\n\r\n        try {\r\n\r\n            // start transaction if it was enabled\r\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\r\n                await queryRunner.startTransaction();\r\n                transactionStartedByUs = true;\r\n            }\r\n\r\n            // console.timeEnd(\".database stuff\");\r\n\r\n            // call before insertion methods in listeners and subscribers\r\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\r\n                const broadcastResult = new BroadcasterResult();\r\n                valueSets.forEach(valueSet => {\r\n                    queryRunner.broadcaster.broadcastBeforeInsertEvent(broadcastResult, this.expressionMap.mainAlias!.metadata, valueSet);\r\n                });\r\n                await broadcastResult.wait();\r\n            }\r\n\r\n            let declareSql: string | null = null;\r\n            let selectOutputSql: string | null = null;\r\n\r\n            // if update entity mode is enabled we may need extra columns for the returning statement\r\n            // console.time(\".prepare returning statement\");\r\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\r\n\r\n            const returningColumns: ColumnMetadata[] = [];\r\n\r\n            if (Array.isArray(this.expressionMap.returning) && this.expressionMap.mainAlias!.hasMetadata) {\r\n                for (const columnPath of this.expressionMap.returning) {\r\n                    returningColumns.push(\r\n                        ...this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(columnPath)\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias!.hasMetadata) {\r\n                if (!(valueSets.length > 1 && this.connection.driver instanceof OracleDriver)) {\r\n                    this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getInsertionReturningColumns();\r\n                }\r\n\r\n                returningColumns.push(...this.expressionMap.extraReturningColumns.filter(\r\n                    c => !returningColumns.includes(c)\r\n                ));\r\n            }\r\n\r\n            if (returningColumns.length > 0 && this.connection.driver instanceof SqlServerDriver) {\r\n                declareSql = this.connection.driver.buildTableVariableDeclaration(\"@OutputTable\", returningColumns);\r\n                selectOutputSql = `SELECT * FROM @OutputTable`;\r\n            }\r\n            // console.timeEnd(\".prepare returning statement\");\r\n\r\n            // execute query\r\n            // console.time(\".getting query and parameters\");\r\n            const [insertSql, parameters] = this.getQueryAndParameters();\r\n            // console.timeEnd(\".getting query and parameters\");\r\n\r\n            // console.time(\".query execution by database\");\r\n            const statements = [declareSql, insertSql, selectOutputSql];\r\n            const sql = statements.filter(s => s != null).join(\";\\n\\n\");\r\n\r\n            const queryResult = await queryRunner.query(sql, parameters, true);\r\n\r\n            const insertResult = InsertResult.from(queryResult);\r\n\r\n            // console.timeEnd(\".query execution by database\");\r\n\r\n            // load returning results and set them to the entity if entity updation is enabled\r\n            if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias!.hasMetadata) {\r\n                // console.time(\".updating entity\");\r\n                await returningResultsEntityUpdator.insert(insertResult, valueSets);\r\n                // console.timeEnd(\".updating entity\");\r\n            }\r\n\r\n            // call after insertion methods in listeners and subscribers\r\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\r\n                const broadcastResult = new BroadcasterResult();\r\n                valueSets.forEach(valueSet => {\r\n                    queryRunner.broadcaster.broadcastAfterInsertEvent(broadcastResult, this.expressionMap.mainAlias!.metadata, valueSet);\r\n                });\r\n                await broadcastResult.wait();\r\n            }\r\n\r\n            // close transaction if we started it\r\n            // console.time(\".commit\");\r\n            if (transactionStartedByUs) {\r\n                await queryRunner.commitTransaction();\r\n            }\r\n            // console.timeEnd(\".commit\");\r\n\r\n            return insertResult;\r\n\r\n        } catch (error) {\r\n\r\n            // rollback transaction if we started it\r\n            if (transactionStartedByUs) {\r\n                try {\r\n                    await queryRunner.rollbackTransaction();\r\n                } catch (rollbackError) { }\r\n            }\r\n            throw error;\r\n\r\n        } finally {\r\n\r\n            // console.time(\".releasing connection\");\r\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\r\n                await queryRunner.release();\r\n            }\r\n            // console.timeEnd(\".releasing connection\");\r\n            // console.timeEnd(\"QueryBuilder.execute\");\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Specifies INTO which entity's table insertion will be executed.\r\n     */\r\n    into<T>(entityTarget: EntityTarget<T>, columns?: string[]): InsertQueryBuilder<T> {\r\n        entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\r\n        const mainAlias = this.createFromAlias(entityTarget);\r\n        this.expressionMap.setMainAlias(mainAlias);\r\n        this.expressionMap.insertColumns = columns || [];\r\n        return (this as any) as InsertQueryBuilder<T>;\r\n    }\r\n\r\n    /**\r\n     * Values needs to be inserted into table.\r\n     */\r\n    values(values: QueryDeepPartialEntity<Entity>|QueryDeepPartialEntity<Entity>[]): this {\r\n        this.expressionMap.valuesSet = values;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    output(columns: string[]): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    output(output: string): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string|string[]): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string|string[]): this {\r\n        return this.returning(output);\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    returning(columns: string[]): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    returning(returning: string): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string|string[]): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string|string[]): this {\r\n\r\n        // not all databases support returning/output cause\r\n        if (!this.connection.driver.isReturningSqlSupported(\"insert\")) {\r\n            throw new ReturningStatementNotSupportedError();\r\n        }\r\n\r\n        this.expressionMap.returning = returning;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Indicates if entity must be updated after insertion operations.\r\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\r\n     * Enabled by default.\r\n     */\r\n    updateEntity(enabled: boolean): this {\r\n        this.expressionMap.updateEntity = enabled;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds additional ON CONFLICT statement supported in postgres and cockroach.\r\n     *\r\n     * @deprecated Use `orIgnore` or `orUpdate`\r\n     */\r\n    onConflict(statement: string): this {\r\n        this.expressionMap.onConflict = statement;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds additional ignore statement supported in databases.\r\n     */\r\n    orIgnore(statement: string | boolean = true): this {\r\n        this.expressionMap.onIgnore = !!statement;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     */\r\n    orUpdate(statement?: { columns?: string[], overwrite?: string[], conflict_target?: string | string[] }): this;\r\n\r\n    orUpdate(overwrite: string[], conflictTarget?: string | string[], orUpdateOptions?: InsertOrUpdateOptions): this;\r\n\r\n    /**\r\n     * Adds additional update statement supported in databases.\r\n     */\r\n    orUpdate(statementOrOverwrite?: { columns?: string[], overwrite?: string[], conflict_target?: string | string[] } | string[], conflictTarget?: string | string[], orUpdateOptions?: InsertOrUpdateOptions): this {\r\n\r\n        if (!Array.isArray(statementOrOverwrite)) {\r\n            this.expressionMap.onUpdate = {\r\n                conflict: statementOrOverwrite?.conflict_target,\r\n                columns: statementOrOverwrite?.columns,\r\n                overwrite: statementOrOverwrite?.overwrite,\r\n                skipUpdateIfNoValuesChanged: orUpdateOptions?.skipUpdateIfNoValuesChanged\r\n            };\r\n            return this;\r\n        }\r\n\r\n        this.expressionMap.onUpdate = {\r\n            overwrite: statementOrOverwrite,\r\n            conflict: conflictTarget,\r\n            skipUpdateIfNoValuesChanged: orUpdateOptions?.skipUpdateIfNoValuesChanged\r\n        };\r\n        return this;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates INSERT express used to perform insert query.\r\n     */\r\n    protected createInsertExpression() {\r\n        const tableName = this.getTableName(this.getMainTableName());\r\n        const valuesExpression = this.createValuesExpression(); // its important to get values before returning expression because oracle rely on native parameters and ordering of them is important\r\n        const returningExpression =\r\n            (this.connection.driver instanceof OracleDriver && this.getValueSets().length > 1)\r\n                ? null\r\n                : this.createReturningExpression(\"insert\"); // oracle doesnt support returning with multi-row insert\r\n        const columnsExpression = this.createColumnNamesExpression();\r\n        let query = \"INSERT \";\r\n\r\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) {\r\n            query += `${this.expressionMap.onIgnore ? \" IGNORE \" : \"\"}`;\r\n        }\r\n\r\n        query += `INTO ${tableName}`;\r\n\r\n        // add columns expression\r\n        if (columnsExpression) {\r\n            query += `(${columnsExpression})`;\r\n        } else {\r\n            if (!valuesExpression && (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)) // special syntax for mysql DEFAULT VALUES insertion\r\n                query += \"()\";\r\n        }\r\n\r\n        // add OUTPUT expression\r\n        if (returningExpression && this.connection.driver instanceof SqlServerDriver) {\r\n            query += ` OUTPUT ${returningExpression}`;\r\n        }\r\n\r\n        // add VALUES expression\r\n        if (valuesExpression) {\r\n            if (this.connection.driver instanceof OracleDriver && this.getValueSets().length > 1) {\r\n                query += ` ${valuesExpression}`;\r\n            } else {\r\n                query += ` VALUES ${valuesExpression}`;\r\n            }\r\n        } else {\r\n            if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) { // special syntax for mysql DEFAULT VALUES insertion\r\n                query += \" VALUES ()\";\r\n            } else {\r\n                query += ` DEFAULT VALUES`;\r\n            }\r\n        }\r\n        if (this.connection.driver.supportedUpsertType === \"on-conflict-do-update\") {\r\n            if (this.expressionMap.onIgnore) {\r\n                query += \" ON CONFLICT DO NOTHING \";\r\n            } else if (this.expressionMap.onConflict) {\r\n                query += ` ON CONFLICT ${this.expressionMap.onConflict} `;\r\n            } else if (this.expressionMap.onUpdate) {\r\n                const { overwrite, columns, conflict, skipUpdateIfNoValuesChanged } = this.expressionMap.onUpdate;\r\n\r\n                let conflictTarget = \"ON CONFLICT\";\r\n\r\n                if (Array.isArray(conflict)) {\r\n                    conflictTarget += ` ( ${conflict.map((column) => this.escape(column)).join(\", \")} )`;\r\n                } else if (conflict) {\r\n                    conflictTarget += ` ON CONSTRAINT ${this.escape(conflict)}`;\r\n                }\r\n\r\n                if (Array.isArray(overwrite)) {\r\n                    query += ` ${conflictTarget} DO UPDATE SET `;\r\n                    query += overwrite?.map(column => `${this.escape(column)} = EXCLUDED.${this.escape(column)}`).join(\", \");\r\n                    query += \" \";\r\n                } else if (columns) {\r\n                    query += ` ${conflictTarget} DO UPDATE SET `;\r\n                    query += columns.map(column => `${this.escape(column)} = :${column}`).join(\", \");\r\n                    query += \" \";\r\n                }\r\n\r\n                if (Array.isArray(overwrite) && skipUpdateIfNoValuesChanged && this.connection.driver instanceof PostgresDriver) {\r\n                    query += ` WHERE (`;\r\n                    query += overwrite.map(column => `${tableName}.${this.escape(column)} IS DISTINCT FROM EXCLUDED.${this.escape(column)}`).join(\" OR \");\r\n                    query += \") \";\r\n                }\r\n            }\r\n        } else if (this.connection.driver.supportedUpsertType === \"on-duplicate-key-update\") {\r\n            if (this.expressionMap.onUpdate) {\r\n                const { overwrite, columns } = this.expressionMap.onUpdate;\r\n\r\n                if (Array.isArray(overwrite)) {\r\n                    query += \" ON DUPLICATE KEY UPDATE \";\r\n                    query += overwrite.map(column => `${this.escape(column)} = VALUES(${this.escape(column)})`).join(\", \");\r\n                    query += \" \";\r\n                } else if (Array.isArray(columns)) {\r\n                    query += \" ON DUPLICATE KEY UPDATE \";\r\n                    query += columns.map(column => `${this.escape(column)} = :${column}`).join(\", \");\r\n                    query += \" \";\r\n                }\r\n            }\r\n        } else {\r\n            if (this.expressionMap.onUpdate) {\r\n                throw new TypeORMError(`onUpdate is not supported by the current database driver`);\r\n            }\r\n        }\r\n\r\n        // add RETURNING expression\r\n        if (\r\n            returningExpression &&\r\n            (this.connection.driver instanceof PostgresDriver ||\r\n                this.connection.driver instanceof OracleDriver ||\r\n                this.connection.driver instanceof CockroachDriver ||\r\n                this.connection.driver instanceof MysqlDriver)\r\n        ) {\r\n            query += ` RETURNING ${returningExpression}`;\r\n        }\r\n\r\n\r\n        // Inserting a specific value for an auto-increment primary key in mssql requires enabling IDENTITY_INSERT\r\n        // IDENTITY_INSERT can only be enabled for tables where there is an IDENTITY column and only if there is a value to be inserted (i.e. supplying DEFAULT is prohibited if IDENTITY_INSERT is enabled)\r\n        if (this.connection.driver instanceof SqlServerDriver\r\n            && this.expressionMap.mainAlias!.hasMetadata\r\n            && this.expressionMap.mainAlias!.metadata.columns\r\n                .filter((column) => this.expressionMap.insertColumns.length > 0 ? this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1 : column.isInsert)\r\n                .some((column) => this.isOverridingAutoIncrementBehavior(column))\r\n        ) {\r\n            query = `SET IDENTITY_INSERT ${tableName} ON; ${query}; SET IDENTITY_INSERT ${tableName} OFF`;\r\n        }\r\n\r\n        return query;\r\n    }\r\n\r\n    /**\r\n     * Gets list of columns where values must be inserted to.\r\n     */\r\n    protected getInsertedColumns(): ColumnMetadata[] {\r\n        if (!this.expressionMap.mainAlias!.hasMetadata)\r\n            return [];\r\n\r\n        return this.expressionMap.mainAlias!.metadata.columns.filter(column => {\r\n\r\n            // if user specified list of columns he wants to insert to, then we filter only them\r\n            if (this.expressionMap.insertColumns.length)\r\n                return this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1;\r\n\r\n            // skip columns the user doesn't want included by default\r\n            if (!column.isInsert) { return false; }\r\n\r\n            // if user did not specified such list then return all columns except auto-increment one\r\n            // for Oracle we return auto-increment column as well because Oracle does not support DEFAULT VALUES expression\r\n            if (column.isGenerated && column.generationStrategy === \"increment\"\r\n                && !(this.connection.driver instanceof OracleDriver)\r\n                && !(this.connection.driver instanceof AbstractSqliteDriver)\r\n                && !(this.connection.driver instanceof MysqlDriver)\r\n                && !(this.connection.driver instanceof AuroraDataApiDriver)\r\n                && !(this.connection.driver instanceof SqlServerDriver && this.isOverridingAutoIncrementBehavior(column)))\r\n                return false;\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a columns string where values must be inserted to for INSERT INTO expression.\r\n     */\r\n    protected createColumnNamesExpression(): string {\r\n        const columns = this.getInsertedColumns();\r\n        if (columns.length > 0)\r\n            return columns.map(column => this.escape(column.databaseName)).join(\", \");\r\n\r\n        // in the case if there are no insert columns specified and table without metadata used\r\n        // we get columns from the inserted value map, in the case if only one inserted map is specified\r\n        if (!this.expressionMap.mainAlias!.hasMetadata && !this.expressionMap.insertColumns.length) {\r\n            const valueSets = this.getValueSets();\r\n            if (valueSets.length === 1)\r\n                return Object.keys(valueSets[0]).map(columnName => this.escape(columnName)).join(\", \");\r\n        }\r\n\r\n        // get a table name and all column database names\r\n        return this.expressionMap.insertColumns.map(columnName => this.escape(columnName)).join(\", \");\r\n    }\r\n\r\n    /**\r\n     * Creates list of values needs to be inserted in the VALUES expression.\r\n     */\r\n    protected createValuesExpression(): string {\r\n        const valueSets = this.getValueSets();\r\n        const columns = this.getInsertedColumns();\r\n\r\n        // if column metadatas are given then apply all necessary operations with values\r\n        if (columns.length > 0) {\r\n            let expression = \"\";\r\n            valueSets.forEach((valueSet, valueSetIndex) => {\r\n                columns.forEach((column, columnIndex) => {\r\n                    if (columnIndex === 0) {\r\n                        if (this.connection.driver instanceof OracleDriver && valueSets.length > 1) {\r\n                            expression += \" SELECT \";\r\n                        } else if (this.connection.driver instanceof SapDriver && valueSets.length > 1) {\r\n                                expression += \" SELECT \";\r\n                        } else {\r\n                            expression += \"(\";\r\n                        }\r\n                    }\r\n\r\n                    // extract real value from the entity\r\n                    let value = column.getEntityValue(valueSet);\r\n\r\n                    // if column is relational and value is an object then get real referenced column value from this object\r\n                    // for example column value is { question: { id: 1 } }, value will be equal to { id: 1 }\r\n                    // and we extract \"1\" from this object\r\n                    /*if (column.referencedColumn && value instanceof Object && !(value instanceof Function)) { // todo: check if we still need it since getEntityValue already has similar code\r\n                        value = column.referencedColumn.getEntityValue(value);\r\n                    }*/\r\n\r\n\r\n                    if (!(value instanceof Function)) {\r\n                      // make sure our value is normalized by a driver\r\n                        value = this.connection.driver.preparePersistentValue(value, column);\r\n                    }\r\n\r\n                    // newly inserted entities always have a version equal to 1 (first version)\r\n                    // also, user-specified version must be empty\r\n                    if (column.isVersion && value === undefined) {\r\n                        expression += \"1\";\r\n\r\n                    // } else if (column.isNestedSetLeft) {\r\n                    //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\r\n                    //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\r\n                    //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\r\n                    //     expression += subQuery;\r\n                    //\r\n                    // } else if (column.isNestedSetRight) {\r\n                    //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\r\n                    //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\r\n                    //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\r\n                    //     expression += subQuery;\r\n\r\n                    } else if (column.isDiscriminator) {\r\n                        expression += this.createParameter(this.expressionMap.mainAlias!.metadata.discriminatorValue);\r\n                        // return \"1\";\r\n\r\n                    // for create and update dates we insert current date\r\n                    // no, we don't do it because this constant is already in \"default\" value of the column\r\n                    // with extended timestamp functionality, like CURRENT_TIMESTAMP(6) for example\r\n                    // } else if (column.isCreateDate || column.isUpdateDate) {\r\n                    //     return \"CURRENT_TIMESTAMP\";\r\n\r\n                    // if column is generated uuid and database does not support its generation and custom generated value was not provided by a user - we generate a new uuid value for insertion\r\n                    } else if (column.isGenerated && column.generationStrategy === \"uuid\" && !this.connection.driver.isUUIDGenerationSupported() && value === undefined) {\r\n\r\n                        value = uuidv4();\r\n                        expression += this.createParameter(value);\r\n\r\n                        if (!(valueSetIndex in this.expressionMap.locallyGenerated)) {\r\n                            this.expressionMap.locallyGenerated[valueSetIndex] = {};\r\n                        }\r\n                        column.setEntityValue(this.expressionMap.locallyGenerated[valueSetIndex], value);\r\n\r\n                        // if value for this column was not provided then insert default value\r\n                    } else if (value === undefined) {\r\n                        if ((this.connection.driver instanceof OracleDriver && valueSets.length > 1) || this.connection.driver instanceof AbstractSqliteDriver || this.connection.driver instanceof SapDriver) { // unfortunately sqlite does not support DEFAULT expression in INSERT queries\r\n                            if (column.default !== undefined && column.default !== null) { // try to use default defined in the column\r\n                                expression += this.connection.driver.normalizeDefault(column);\r\n                            } else {\r\n                                expression += \"NULL\"; // otherwise simply use NULL and pray if column is nullable\r\n                            }\r\n\r\n                        } else {\r\n                            expression += \"DEFAULT\";\r\n                        }\r\n\r\n                    // support for SQL expressions in queries\r\n                    } else if (value instanceof Function) {\r\n                        expression += value();\r\n\r\n                    // just any other regular value\r\n                    } else {\r\n                        if (this.connection.driver instanceof SqlServerDriver)\r\n                            value = this.connection.driver.parametrizeValue(column, value);\r\n\r\n                        // we need to store array values in a special class to make sure parameter replacement will work correctly\r\n                        // if (value instanceof Array)\r\n                        //     value = new ArrayParameter(value);\r\n\r\n\r\n                        const paramName = this.createParameter(value);\r\n\r\n                        if ((this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\r\n                            const useLegacy = this.connection.driver.options.legacySpatialSupport;\r\n                            const geomFromText = useLegacy ? \"GeomFromText\" : \"ST_GeomFromText\";\r\n                            if (column.srid != null) {\r\n                                expression += `${geomFromText}(${paramName}, ${column.srid})`;\r\n                            } else {\r\n                                expression += `${geomFromText}(${paramName})`;\r\n                            }\r\n                        } else if (this.connection.driver instanceof PostgresDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\r\n                            if (column.srid != null) {\r\n                                expression += `ST_SetSRID(ST_GeomFromGeoJSON(${paramName}), ${column.srid})::${column.type}`;\r\n                            } else {\r\n                                expression += `ST_GeomFromGeoJSON(${paramName})::${column.type}`;\r\n                            }\r\n                        } else if (this.connection.driver instanceof SqlServerDriver && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\r\n                            expression += column.type + \"::STGeomFromText(\" + paramName + \", \" + (column.srid || \"0\") + \")\";\r\n                        } else {\r\n                            expression += paramName;\r\n                        }\r\n                    }\r\n\r\n                    if (columnIndex === columns.length - 1) {\r\n                        if (valueSetIndex === valueSets.length - 1) {\r\n                            if (this.connection.driver instanceof OracleDriver && valueSets.length > 1) {\r\n                                expression += \" FROM DUAL \";\r\n                            } else if (this.connection.driver instanceof SapDriver && valueSets.length > 1) {\r\n                                expression += \" FROM dummy \";\r\n                            } else {\r\n                                expression += \")\";\r\n                            }\r\n                        } else {\r\n                            if (this.connection.driver instanceof OracleDriver && valueSets.length > 1) {\r\n                                expression += \" FROM DUAL UNION ALL \";\r\n                            } else if (this.connection.driver instanceof SapDriver && valueSets.length > 1) {\r\n                                expression += \" FROM dummy UNION ALL \";\r\n                            } else {\r\n                                expression += \"), \";\r\n                            }\r\n                        }\r\n                    } else {\r\n                        expression += \", \";\r\n                    }\r\n                });\r\n            });\r\n            if (expression === \"()\")\r\n                return \"\";\r\n\r\n            return expression;\r\n        } else { // for tables without metadata\r\n            // get values needs to be inserted\r\n            let expression = \"\";\r\n\r\n            valueSets.forEach((valueSet, insertionIndex) => {\r\n                const columns = Object.keys(valueSet);\r\n                columns.forEach((columnName, columnIndex) => {\r\n                    if (columnIndex === 0) {\r\n                        expression += \"(\";\r\n                    }\r\n\r\n                    const value = valueSet[columnName];\r\n\r\n                    // support for SQL expressions in queries\r\n                    if (value instanceof Function) {\r\n                        expression += value();\r\n\r\n                    // if value for this column was not provided then insert default value\r\n                    } else if (value === undefined) {\r\n                        if (this.connection.driver instanceof AbstractSqliteDriver || this.connection.driver instanceof SapDriver) {\r\n                            expression += \"NULL\";\r\n\r\n                        } else {\r\n                            expression += \"DEFAULT\";\r\n                        }\r\n\r\n                    // just any other regular value\r\n                    } else {\r\n                        expression += this.createParameter(value);\r\n                    }\r\n\r\n                    if (columnIndex === Object.keys(valueSet).length - 1) {\r\n                        if (insertionIndex === valueSets.length - 1) {\r\n                            expression += \")\";\r\n                        } else {\r\n                            expression += \"), \";\r\n                        }\r\n                    }\r\n                    else {\r\n                        expression += \", \";\r\n                    }\r\n                });\r\n            });\r\n            if (expression === \"()\")\r\n                return \"\";\r\n            return expression;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets array of values need to be inserted into the target table.\r\n     */\r\n    protected getValueSets(): ObjectLiteral[] {\r\n        if (Array.isArray(this.expressionMap.valuesSet))\r\n            return this.expressionMap.valuesSet;\r\n\r\n        if (this.expressionMap.valuesSet instanceof Object)\r\n            return [this.expressionMap.valuesSet];\r\n\r\n        throw new InsertValuesMissingError();\r\n    }\r\n\r\n    /**\r\n     * Checks if column is an auto-generated primary key, but the current insertion specifies a value for it.\r\n     *\r\n     * @param column\r\n     */\r\n    protected isOverridingAutoIncrementBehavior(column: ColumnMetadata): boolean {\r\n        return column.isPrimary\r\n                && column.isGenerated\r\n                && column.generationStrategy === \"increment\"\r\n                && this.getValueSets().some((valueSet) =>\r\n                    column.getEntityValue(valueSet) !== undefined\r\n                    && column.getEntityValue(valueSet) !== null\r\n                );\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}