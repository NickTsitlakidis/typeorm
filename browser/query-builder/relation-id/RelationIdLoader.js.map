{"version":3,"sources":["../browser/src/query-builder/relation-id/RelationIdLoader.ts"],"names":[],"mappings":";AAKA,OAAO,EAAC,WAAW,EAAC,MAAM,0BAA0B,CAAC;AACrD,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAExD;IAEI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,0BAAsB,UAAsB,EACtB,WAAkC,EAClC,oBAA2C;QAF3C,eAAU,GAAV,UAAU,CAAY;QACtB,gBAAW,GAAX,WAAW,CAAuB;QAClC,yBAAoB,GAApB,oBAAoB,CAAuB;IACjE,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAEtE,+BAAI,GAAV,UAAW,WAAkB;;;;;gBAEnB,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,UAAM,cAAc;;;;;;qCAE3D,CAAA,cAAc,CAAC,QAAQ,CAAC,WAAW,IAAI,cAAc,CAAC,QAAQ,CAAC,eAAe,CAAA,EAA9E,wBAA8E;gCAC9E,wBAAwB;gCACxB,iDAAiD;gCACjD,iCAAiC;gCAEjC,IAAI,cAAc,CAAC,mBAAmB;oCAClC,MAAM,IAAI,YAAY,CAAC,kFAAkF,CAAC,CAAC;gCAEzG,eAAgD,EAAE,CAAC;gCACnD,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,UAAA,SAAS;oCACrC,IAAM,MAAM,GAAkB,EAAE,CAAC;oCACjC,IAAM,cAAc,GAAkB,EAAE,CAAC;oCACzC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,UAAU;wCAClD,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,KAAI,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,YAAY,CAAC,CAAC,EAAE,UAAU,CAAC,gBAAiB,CAAC,CAAC;wCAC5N,IAAM,aAAa,GAAM,UAAU,CAAC,YAAY,SAAI,MAAM,CAAC,UAAU,CAAC,YAAY,CAAG,CAAC;wCACtF,IAAI,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;4CAC9C,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;yCACtC;oCACL,CAAC,CAAC,CAAC;oCAEH,cAAc,CAAC,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,aAAa;wCACvE,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,KAAI,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,WAAW,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;wCACnN,IAAM,aAAa,GAAM,aAAa,CAAC,YAAY,SAAI,MAAM,CAAC,aAAa,CAAC,YAAY,CAAG,CAAC;wCAC5F,IAAI,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;4CAC9C,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;yCACtC;oCACL,CAAC,CAAC,CAAC;oCAEH,cAAc,CAAC,IAAI,EAAE,CAAC;oCACtB,IAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oCAC5C,IAAI,YAAU,CAAC,SAAS,CAAC,EAAE;wCACvB,OAAO,IAAI,CAAC;qCACf;oCACD,YAAU,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;oCAC7B,OAAO,MAAM,CAAC;gCAClB,CAAC,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;gCAElB,sBAAO;wCACH,mBAAmB,EAAE,cAAc;wCACnC,OAAO,EAAE,OAAO;qCACnB,EAAC;;qCAEK,CAAA,cAAc,CAAC,QAAQ,CAAC,WAAW,IAAI,cAAc,CAAC,QAAQ,CAAC,kBAAkB,CAAA,EAAjF,wBAAiF;gCAKlF,aAAW,cAAc,CAAC,QAAQ,CAAC;gCACnC,gBAAc,UAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,UAAQ,CAAC,eAAgB,CAAC,WAAW,CAAC;gCAC/F,KAAK,GAAG,UAAQ,CAAC,qBAAqB,CAAC,MAAM,CAAC;gCAC9C,SAAS,GAAG,UAAQ,CAAC,qBAAqB,CAAC,SAAS,CAAC;gCACrD,eAAa,cAAc,CAAC,KAAK,IAAI,SAAS,CAAC;gCAE/C,eAAgD,EAAE,CAAC;gCACnD,eAA4B,EAAE,CAAC;gCAC/B,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,UAAC,SAAS,EAAE,KAAK;oCAC/C,IAAM,cAAc,GAAkB,EAAE,CAAC;oCACzC,IAAM,cAAc,GAAkB,EAAE,CAAC;oCACzC,IAAM,SAAS,GAAG,aAAW,CAAC,GAAG,CAAC,UAAA,UAAU;wCACxC,IAAM,aAAa,GAAG,UAAU,CAAC,YAAY,GAAG,KAAK,CAAC;wCACtD,IAAM,cAAc,GAAG,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,KAAI,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,gBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC;wCACxJ,IAAM,aAAa,GAAM,YAAU,SAAI,UAAU,CAAC,YAAY,SAAI,cAAgB,CAAC;wCACnF,IAAI,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;4CAC9C,OAAO,EAAE,CAAC;yCACb;wCACD,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;wCACnC,cAAc,CAAC,aAAa,CAAC,GAAG,cAAc,CAAC;wCAC/C,OAAO,YAAU,GAAG,GAAG,GAAG,UAAU,CAAC,YAAY,GAAG,MAAM,GAAG,aAAa,CAAC;oCAC/E,CAAC,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oCAChC,cAAc,CAAC,IAAI,EAAE,CAAC;oCACtB,IAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oCAC5C,IAAI,YAAU,CAAC,SAAS,CAAC,EAAE;wCACvB,OAAO,EAAE,CAAC;qCACb;oCACD,YAAU,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;oCAC7B,MAAM,CAAC,MAAM,CAAC,YAAU,EAAE,cAAc,CAAC,CAAC;oCAC1C,OAAO,SAAS,CAAC;gCACrB,CAAC,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,GAAG,GAAG,SAAS,GAAG,GAAG,EAArB,CAAqB,CAAC;qCACpD,IAAI,CAAC,MAAM,CAAC,CAAC;gCAElB,6FAA6F;gCAC7F,oGAAoG;gCACpG,IAAI,CAAC,SAAS;oCACV,sBAAO,EAAE,mBAAmB,EAAE,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE,EAAC;gCAI1D,OAAK,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gCAEhE,aAAW,CAAC,OAAO,CAAC,UAAA,UAAU;oCAC1B,IAAE,CAAC,SAAS,CAAC,YAAU,GAAG,GAAG,GAAG,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,YAAY,CAAC,CAAC;gCACtF,CAAC,CAAC,CAAC;gCAEH,UAAQ,CAAC,eAAgB,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,aAAa;oCACzE,IAAE,CAAC,SAAS,CAAC,YAAU,GAAG,GAAG,GAAG,aAAa,CAAC,YAAY,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC;gCAC5F,CAAC,CAAC,CAAC;gCAEH,IAAE,CAAC,IAAI,CAAC,KAAK,EAAE,YAAU,CAAC;qCACrB,KAAK,CAAC,GAAG,GAAG,SAAS,GAAG,GAAG,CAAC,CAAC,uIAAuI;qCACpK,aAAa,CAAC,YAAU,CAAC,CAAC;gCAE/B,iDAAiD;gCACjD,IAAI,cAAc,CAAC,mBAAmB;oCAClC,cAAc,CAAC,mBAAmB,CAAC,IAAE,CAAC,CAAC;gCAE3B,qBAAM,IAAE,CAAC,UAAU,EAAE,EAAA;;gCAA/B,OAAO,GAAG,SAAqB;gCACrC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;oCAClB,aAAW,CAAC,OAAO,CAAC,UAAA,MAAM;wCACtB,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,gBAAiB,CAAC,CAAC;oCACrI,CAAC,CAAC,CAAC;oCACH,UAAQ,CAAC,eAAgB,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,MAAM;wCAClE,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,CAAC;oCACnH,CAAC,CAAC,CAAC;gCACP,CAAC,CAAC,CAAC;gCAEH,sBAAO;wCACH,mBAAmB,EAAE,cAAc;wCACnC,OAAO,SAAA;qCACV,EAAC;;gCASI,QAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC;gCACnC,gBAAc,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAgB,CAAC,kBAAkB,CAAC;gCACtG,uBAAqB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAgB,CAAC,WAAW,CAAC;gCAC7G,kBAAgB,cAAc,CAAC,aAAa,CAAC;gCAC7C,oBAAoB,GAAG,cAAc,CAAC,uBAAuB,CAAC,SAAS,CAAC;gCACxE,0BAAwB,cAAc,CAAC,KAAK,IAAI,oBAAoB,CAAC;gCACrE,iBAAiB,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,sBAAuB,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAgB,CAAC,sBAAuB,CAAC,SAAS,CAAC;gCAGjJ,aAAa,GAAG,WAAW,CAAC,GAAG,CAAC,UAAA,SAAS;oCAC3C,OAAO,aAAW,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,UAAU;wCACtC,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,KAAI,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,gBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC;wCAChK,OAAO,GAAG,CAAC;oCACf,CAAC,EAAE,EAAmB,CAAC,CAAC;gCAC5B,CAAC,CAAC,CAAC;gCAEH,6FAA6F;gCAC7F,oGAAoG;gCACpG,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC;oCAC1B,sBAAO,EAAE,mBAAmB,EAAE,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE,EAAC;gCAE1D,eAA4B,EAAE,CAAC;gCAC/B,eAAgD,EAAE,CAAC;gCACnD,oBAAoB,GAAG,aAAa,CAAC,GAAG,CAAC,UAAC,YAAY,EAAE,KAAK;oCAC/D,IAAM,cAAc,GAAkB,EAAE,CAAC;oCACzC,IAAM,cAAc,GAAkB,EAAE,CAAC;oCACzC,IAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG;wCAC/C,IAAM,aAAa,GAAG,GAAG,GAAG,KAAK,CAAC;wCAClC,IAAM,cAAc,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;wCACzC,IAAM,aAAa,GAAM,eAAa,SAAI,GAAG,SAAI,cAAgB,CAAC;wCAClE,IAAI,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;4CAC9C,OAAO,EAAE,CAAC;yCACb;wCACD,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;wCACnC,cAAc,CAAC,aAAa,CAAC,GAAG,cAAc,CAAC;wCAC/C,OAAO,eAAa,GAAG,GAAG,GAAG,GAAG,GAAG,MAAM,GAAG,aAAa,CAAC;oCAC9D,CAAC,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oCAChC,cAAc,CAAC,IAAI,EAAE,CAAC;oCACtB,IAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oCAC5C,IAAI,YAAU,CAAC,SAAS,CAAC,EAAE;wCACvB,OAAO,EAAE,CAAC;qCACb;oCACD,YAAU,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;oCAC7B,MAAM,CAAC,MAAM,CAAC,YAAU,EAAE,cAAc,CAAC,CAAC;oCAC1C,OAAO,SAAS,CAAC;gCACrB,CAAC,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;gCAEZ,+BAA6B,oBAAkB,CAAC,GAAG,CAAC,UAAA,UAAU;oCAChE,OAAO,eAAa,GAAG,GAAG,GAAG,UAAU,CAAC,YAAY,GAAG,KAAK,GAAG,uBAAqB,GAAG,GAAG,GAAG,UAAU,CAAC,gBAAiB,CAAC,YAAY,CAAC;gCAC3I,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gCAEX,SAAS,GAAG,oBAAoB,CAAC,GAAG,CAAC,UAAA,SAAS;oCAChD,OAAO,GAAG,GAAG,SAAS,GAAG,OAAO,GAAG,4BAA0B,GAAG,GAAG,CAAC;gCACxE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gCAEV,OAAK,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gCAEhE,oBAAkB,CAAC,OAAO,CAAC,UAAA,UAAU;oCACjC,IAAE,CAAC,SAAS,CAAC,eAAa,GAAG,GAAG,GAAG,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,YAAY,CAAC;yCACnF,UAAU,CAAC,eAAa,GAAG,GAAG,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;gCAC/D,CAAC,CAAC,CAAC;gCAEH,aAAW,CAAC,OAAO,CAAC,UAAA,UAAU;oCAC1B,IAAE,CAAC,SAAS,CAAC,eAAa,GAAG,GAAG,GAAG,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,YAAY,CAAC;yCACnF,UAAU,CAAC,eAAa,GAAG,GAAG,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;gCAC/D,CAAC,CAAC,CAAC;gCAEH,IAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,uBAAqB,CAAC;qCAC/C,SAAS,CAAC,iBAAiB,EAAE,eAAa,EAAE,SAAS,CAAC;qCACtD,aAAa,CAAC,YAAU,CAAC,CAAC;gCAE/B,iDAAiD;gCACjD,IAAI,cAAc,CAAC,mBAAmB;oCAClC,cAAc,CAAC,mBAAmB,CAAC,IAAE,CAAC,CAAC;gCAE3B,qBAAM,IAAE,CAAC,UAAU,EAAE,EAAA;;gCAA/B,OAAO,GAAG,SAAqB;gCACrC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;oCAClB,uCAAI,aAAW,kBAAK,oBAAkB,UAAE,OAAO,CAAC,UAAA,MAAM;wCAClD,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,gBAAiB,CAAC,CAAC;oCACrI,CAAC,CAAC,CAAC;gCACP,CAAC,CAAC,CAAC;gCAEH,sBAAO;wCACH,mBAAmB,EAAE,cAAc;wCACnC,OAAO,SAAA;qCACV,EAAC;;;qBAET,CAAC,CAAC;gBAEH,sBAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAC;;;KAChC;IACL,uBAAC;AAAD,CA7OA,AA6OC,IAAA","file":"RelationIdLoader.js","sourcesContent":["import {RelationIdAttribute} from \"./RelationIdAttribute\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {RelationIdLoadResult} from \"./RelationIdLoadResult\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DriverUtils} from \"../../driver/DriverUtils\";\r\nimport { TypeORMError } from \"../../error/TypeORMError\";\r\n\r\nexport class RelationIdLoader {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected queryRunner: QueryRunner|undefined,\r\n                protected relationIdAttributes: RelationIdAttribute[]) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    async load(rawEntities: any[]): Promise<RelationIdLoadResult[]> {\r\n\r\n        const promises = this.relationIdAttributes.map(async relationIdAttr => {\r\n\r\n            if (relationIdAttr.relation.isManyToOne || relationIdAttr.relation.isOneToOneOwner) {\r\n                // example: Post and Tag\r\n                // loadRelationIdAndMap(\"post.tagId\", \"post.tag\")\r\n                // we expect it to load id of tag\r\n\r\n                if (relationIdAttr.queryBuilderFactory)\r\n                    throw new TypeORMError(\"Additional condition can not be used with ManyToOne or OneToOne owner relations.\");\r\n\r\n                const duplicates: {[duplicateKey: string]: boolean} = {};\r\n                const results = rawEntities.map(rawEntity => {\r\n                    const result: ObjectLiteral = {};\r\n                    const duplicateParts: Array<string> = [];\r\n                    relationIdAttr.relation.joinColumns.forEach(joinColumn => {\r\n                        result[joinColumn.databaseName] = this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils.buildAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.databaseName)], joinColumn.referencedColumn!);\r\n                        const duplicatePart = `${joinColumn.databaseName}:${result[joinColumn.databaseName]}`;\r\n                        if (duplicateParts.indexOf(duplicatePart) === -1) {\r\n                            duplicateParts.push(duplicatePart);\r\n                        }\r\n                    });\r\n\r\n                    relationIdAttr.relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\r\n                        result[primaryColumn.databaseName] = this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils.buildAlias(this.connection.driver, relationIdAttr.parentAlias, primaryColumn.databaseName)], primaryColumn);\r\n                        const duplicatePart = `${primaryColumn.databaseName}:${result[primaryColumn.databaseName]}`;\r\n                        if (duplicateParts.indexOf(duplicatePart) === -1) {\r\n                            duplicateParts.push(duplicatePart);\r\n                        }\r\n                    });\r\n\r\n                    duplicateParts.sort();\r\n                    const duplicate = duplicateParts.join(\"::\");\r\n                    if (duplicates[duplicate]) {\r\n                        return null;\r\n                    }\r\n                    duplicates[duplicate] = true;\r\n                    return result;\r\n                }).filter(v => v);\r\n\r\n                return {\r\n                    relationIdAttribute: relationIdAttr,\r\n                    results: results\r\n                };\r\n\r\n            } else if (relationIdAttr.relation.isOneToMany || relationIdAttr.relation.isOneToOneNotOwner) {\r\n                // example: Post and Category\r\n                // loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\r\n                // we expect it to load array of category ids\r\n\r\n                const relation = relationIdAttr.relation; // \"post.categories\"\r\n                const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.joinColumns;\r\n                const table = relation.inverseEntityMetadata.target; // category\r\n                const tableName = relation.inverseEntityMetadata.tableName; // category\r\n                const tableAlias = relationIdAttr.alias || tableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined\r\n\r\n                const duplicates: {[duplicateKey: string]: boolean} = {};\r\n                const parameters: ObjectLiteral = {};\r\n                const condition = rawEntities.map((rawEntity, index) => {\r\n                    const duplicateParts: Array<string> = [];\r\n                    const parameterParts: ObjectLiteral = {};\r\n                    const queryPart = joinColumns.map(joinColumn => {\r\n                        const parameterName = joinColumn.databaseName + index;\r\n                        const parameterValue = rawEntity[DriverUtils.buildAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn!.databaseName)];\r\n                        const duplicatePart = `${tableAlias}:${joinColumn.propertyPath}:${parameterValue}`;\r\n                        if (duplicateParts.indexOf(duplicatePart) !== -1) {\r\n                            return \"\";\r\n                        }\r\n                        duplicateParts.push(duplicatePart);\r\n                        parameterParts[parameterName] = parameterValue;\r\n                        return tableAlias + \".\" + joinColumn.propertyPath + \" = :\" + parameterName;\r\n                    }).filter(v => v).join(\" AND \");\r\n                    duplicateParts.sort();\r\n                    const duplicate = duplicateParts.join(\"::\");\r\n                    if (duplicates[duplicate]) {\r\n                        return \"\";\r\n                    }\r\n                    duplicates[duplicate] = true;\r\n                    Object.assign(parameters, parameterParts);\r\n                    return queryPart;\r\n                }).filter(v => v).map(condition => \"(\" + condition + \")\")\r\n                    .join(\" OR \");\r\n\r\n                // ensure we won't perform redundant queries for joined data which was not found in selection\r\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\r\n                if (!condition)\r\n                    return { relationIdAttribute: relationIdAttr, results: [] };\r\n\r\n                // generate query:\r\n                // SELECT category.id, category.postId FROM category category ON category.postId = :postId\r\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\r\n\r\n                joinColumns.forEach(joinColumn => {\r\n                    qb.addSelect(tableAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName);\r\n                });\r\n\r\n                relation.inverseRelation!.entityMetadata.primaryColumns.forEach(primaryColumn => {\r\n                    qb.addSelect(tableAlias + \".\" + primaryColumn.propertyPath, primaryColumn.databaseName);\r\n                });\r\n\r\n                qb.from(table, tableAlias)\r\n                    .where(\"(\" + condition + \")\") // need brackets because if we have additional condition and no brackets, it looks like (a = 1) OR (a = 2) AND b = 1, that is incorrect\r\n                    .setParameters(parameters);\r\n\r\n                // apply condition (custom query builder factory)\r\n                if (relationIdAttr.queryBuilderFactory)\r\n                    relationIdAttr.queryBuilderFactory(qb);\r\n\r\n                const results = await qb.getRawMany();\r\n                results.forEach(result => {\r\n                    joinColumns.forEach(column => {\r\n                        result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn!);\r\n                    });\r\n                    relation.inverseRelation!.entityMetadata.primaryColumns.forEach(column => {\r\n                        result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column);\r\n                    });\r\n                });\r\n\r\n                return {\r\n                    relationIdAttribute: relationIdAttr,\r\n                    results\r\n                };\r\n\r\n            } else {\r\n                // many-to-many\r\n                // example: Post and Category\r\n                // owner side: loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\r\n                // inverse side: loadRelationIdAndMap(\"category.postIds\", \"category.posts\")\r\n                // we expect it to load array of post ids\r\n\r\n                const relation = relationIdAttr.relation;\r\n                const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.inverseJoinColumns;\r\n                const inverseJoinColumns = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\r\n                const junctionAlias = relationIdAttr.junctionAlias;\r\n                const inverseSideTableName = relationIdAttr.joinInverseSideMetadata.tableName;\r\n                const inverseSideTableAlias = relationIdAttr.alias || inverseSideTableName;\r\n                const junctionTableName = relation.isOwning ? relation.junctionEntityMetadata!.tableName : relation.inverseRelation!.junctionEntityMetadata!.tableName;\r\n\r\n\r\n                const mappedColumns = rawEntities.map(rawEntity => {\r\n                    return joinColumns.reduce((map, joinColumn) => {\r\n                        map[joinColumn.propertyPath] = rawEntity[DriverUtils.buildAlias(this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn!.databaseName)];\r\n                        return map;\r\n                    }, {} as ObjectLiteral);\r\n                });\r\n\r\n                // ensure we won't perform redundant queries for joined data which was not found in selection\r\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\r\n                if (mappedColumns.length === 0)\r\n                    return { relationIdAttribute: relationIdAttr, results: [] };\r\n\r\n                const parameters: ObjectLiteral = {};\r\n                const duplicates: {[duplicateKey: string]: boolean} = {};\r\n                const joinColumnConditions = mappedColumns.map((mappedColumn, index) => {\r\n                    const duplicateParts: Array<string> = [];\r\n                    const parameterParts: ObjectLiteral = {};\r\n                    const queryPart = Object.keys(mappedColumn).map(key => {\r\n                        const parameterName = key + index;\r\n                        const parameterValue = mappedColumn[key];\r\n                        const duplicatePart = `${junctionAlias}:${key}:${parameterValue}`;\r\n                        if (duplicateParts.indexOf(duplicatePart) !== -1) {\r\n                            return \"\";\r\n                        }\r\n                        duplicateParts.push(duplicatePart);\r\n                        parameterParts[parameterName] = parameterValue;\r\n                        return junctionAlias + \".\" + key + \" = :\" + parameterName;\r\n                    }).filter(s => s).join(\" AND \");\r\n                    duplicateParts.sort();\r\n                    const duplicate = duplicateParts.join(\"::\");\r\n                    if (duplicates[duplicate]) {\r\n                        return \"\";\r\n                    }\r\n                    duplicates[duplicate] = true;\r\n                    Object.assign(parameters, parameterParts);\r\n                    return queryPart;\r\n                }).filter(s => s);\r\n\r\n                const inverseJoinColumnCondition = inverseJoinColumns.map(joinColumn => {\r\n                    return junctionAlias + \".\" + joinColumn.propertyPath + \" = \" + inverseSideTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\r\n                }).join(\" AND \");\r\n\r\n                const condition = joinColumnConditions.map(condition => {\r\n                    return \"(\" + condition + \" AND \" + inverseJoinColumnCondition + \")\";\r\n                }).join(\" OR \");\r\n\r\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\r\n\r\n                inverseJoinColumns.forEach(joinColumn => {\r\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\r\n                    .addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\r\n                });\r\n\r\n                joinColumns.forEach(joinColumn => {\r\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\r\n                    .addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\r\n                });\r\n\r\n                qb.from(inverseSideTableName, inverseSideTableAlias)\r\n                    .innerJoin(junctionTableName, junctionAlias, condition)\r\n                    .setParameters(parameters);\r\n\r\n                // apply condition (custom query builder factory)\r\n                if (relationIdAttr.queryBuilderFactory)\r\n                    relationIdAttr.queryBuilderFactory(qb);\r\n\r\n                const results = await qb.getRawMany();\r\n                results.forEach(result => {\r\n                    [...joinColumns, ...inverseJoinColumns].forEach(column => {\r\n                        result[column.databaseName] = this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn!);\r\n                    });\r\n                });\r\n\r\n                return {\r\n                    relationIdAttribute: relationIdAttr,\r\n                    results\r\n                };\r\n            }\r\n        });\r\n\r\n        return Promise.all(promises);\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}