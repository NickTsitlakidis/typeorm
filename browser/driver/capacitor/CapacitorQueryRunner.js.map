{"version":3,"sources":["../browser/src/driver/capacitor/CapacitorQueryRunner.ts"],"names":[],"mappings":"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","file":"CapacitorQueryRunner.js","sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\r\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\r\nimport { CapacitorDriver } from \"./CapacitorDriver\";\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\r\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\";\r\nimport { QueryResult } from \"../../query-runner/QueryResult\";\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n */\r\nexport class CapacitorQueryRunner extends AbstractSqliteQueryRunner {\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: CapacitorDriver;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: CapacitorDriver) {\r\n        super();\r\n        this.driver = driver;\r\n        this.connection = driver.connection;\r\n        this.broadcaster = new Broadcaster(this);\r\n    }\r\n\r\n    /**\r\n     * Called before migrations are run.\r\n     */\r\n    async beforeMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = OFF`);\r\n    }\r\n\r\n    /**\r\n     * Called after migrations are run.\r\n     */\r\n    async afterMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = ON`);\r\n    }\r\n\r\n    async executeSet(set: { statement: string; values?: any[] }[]) {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const databaseConnection = await this.connect();\r\n\r\n        return databaseConnection.executeSet(set, false);\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(query: string, parameters?: any[], useStructuredResult = false): Promise<any> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const databaseConnection = await this.connect();\r\n\r\n        this.driver.connection.logger.logQuery(query, parameters, this);\r\n\r\n        const command = query.substr(0, query.indexOf(\" \"));\r\n\r\n        try {\r\n            let raw: any;\r\n\r\n            if (\r\n                [ \"BEGIN\", \"ROLLBACK\", \"COMMIT\", \"CREATE\", \"ALTER\", \"DROP\" ].indexOf(\r\n                    command\r\n                ) !== -1\r\n            ) {\r\n                raw = await databaseConnection.execute(query, false);\r\n            } else if ([ \"INSERT\", \"UPDATE\", \"DELETE\" ].indexOf(command) !== -1) {\r\n                raw = await databaseConnection.run(query, parameters, false);\r\n            } else {\r\n                raw = await databaseConnection.query(query, parameters || []);\r\n            }\r\n\r\n            const result = new QueryResult();\r\n\r\n            if (raw?.hasOwnProperty('values')) {\r\n                result.raw = raw.values;\r\n                result.records = raw.values;\r\n            }\r\n\r\n            if (raw?.hasOwnProperty('changes')) {\r\n                result.affected = raw.changes.changes;\r\n                result.raw = raw.changes.lastId || raw.changes.changes;\r\n            }\r\n\r\n            if (!useStructuredResult) {\r\n                return result.raw;\r\n            }\r\n\r\n            return result;\r\n        } catch (err) {\r\n            this.driver.connection.logger.logQueryError(\r\n                err,\r\n                query,\r\n                parameters,\r\n                this\r\n            );\r\n\r\n            throw new QueryFailedError(query, parameters, err);\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\r\n        return Object.keys(objectLiteral).map((key) => `\"${key}\"` + \"=?\");\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}