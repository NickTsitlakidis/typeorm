{"version":3,"sources":["../browser/src/driver/react-native/ReactNativeDriver.ts"],"names":[],"mappings":"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","file":"ReactNativeDriver.js","sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\r\nimport { ReactNativeConnectionOptions } from \"./ReactNativeConnectionOptions\"\r\nimport { ReactNativeQueryRunner } from \"./ReactNativeQueryRunner\"\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\r\nimport { DataSource } from \"../../data-source/DataSource\"\r\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\"\r\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\n\r\nexport class ReactNativeDriver extends AbstractSqliteDriver {\r\n    options: ReactNativeConnectionOptions\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: DataSource) {\r\n        super(connection)\r\n\r\n        this.database = this.options.database\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\")\r\n\r\n        if (!this.options.location)\r\n            throw new DriverOptionNotSetError(\"location\")\r\n\r\n        // load sqlite package\r\n        this.loadDependencies()\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.queryRunner = undefined\r\n            this.databaseConnection.close(ok, fail)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\r\n        if (!this.queryRunner)\r\n            this.queryRunner = new ReactNativeQueryRunner(this)\r\n\r\n        return this.queryRunner\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates connection with the database.\r\n     */\r\n    protected createDatabaseConnection() {\r\n        return new Promise<void>((ok, fail) => {\r\n            const options = Object.assign(\r\n                {},\r\n                {\r\n                    name: this.options.database,\r\n                    location: this.options.location,\r\n                },\r\n                this.options.extra || {},\r\n            )\r\n\r\n            this.sqlite.openDatabase(\r\n                options,\r\n                (db: any) => {\r\n                    const databaseConnection = db\r\n\r\n                    // we need to enable foreign keys in sqlite to make sure all foreign key related features\r\n                    // working properly. this also makes onDelete work with sqlite.\r\n                    databaseConnection.executeSql(\r\n                        `PRAGMA foreign_keys = ON`,\r\n                        [],\r\n                        (result: any) => {\r\n                            ok(databaseConnection)\r\n                        },\r\n                        (error: any) => {\r\n                            fail(error)\r\n                        },\r\n                    )\r\n                },\r\n                (error: any) => {\r\n                    fail(error)\r\n                },\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            const sqlite =\r\n                this.options.driver || require(\"react-native-sqlite-storage\")\r\n            this.sqlite = sqlite\r\n        } catch (e) {\r\n            throw new DriverPackageNotInstalledError(\r\n                \"React-Native\",\r\n                \"react-native-sqlite-storage\",\r\n            )\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}