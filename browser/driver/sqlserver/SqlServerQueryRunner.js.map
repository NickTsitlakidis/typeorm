{"version":3,"sources":["../browser/src/driver/sqlserver/SqlServerQueryRunner.ts"],"names":[],"mappings":"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","file":"SqlServerQueryRunner.js","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {QueryResult} from \"../../query-runner/QueryResult\";\r\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\r\nimport {ColumnType} from \"../types/ColumnTypes\";\r\nimport {ReadStream} from \"../../platform/PlatformTools\";\r\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\r\nimport {Table} from \"../../schema-builder/table/Table\";\r\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\r\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\r\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\r\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\r\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\r\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\r\nimport {View} from \"../../schema-builder/view/View\";\r\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {Query} from \"../Query\";\r\nimport {IsolationLevel} from \"../types/IsolationLevel\";\r\nimport {MssqlParameter} from \"./MssqlParameter\";\r\nimport {SqlServerDriver} from \"./SqlServerDriver\";\r\nimport {ReplicationMode} from \"../types/ReplicationMode\";\r\nimport { TypeORMError } from \"../../error\";\r\nimport { QueryLock } from \"../../query-runner/QueryLock\";\r\nimport {MetadataTableType} from \"../types/MetadataTableType\";\r\n\r\n/**\r\n * Runs queries on a single SQL Server database connection.\r\n */\r\nexport class SqlServerQueryRunner extends BaseQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: SqlServerDriver;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    private lock: QueryLock = new QueryLock();\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: SqlServerDriver, mode: ReplicationMode) {\r\n        super();\r\n        this.driver = driver;\r\n        this.connection = driver.connection;\r\n        this.broadcaster = new Broadcaster(this);\r\n        this.mode = mode;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    connect(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Releases used database connection.\r\n     * You cannot use query runner methods once its released.\r\n     */\r\n    release(): Promise<void> {\r\n        this.isReleased = true;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        this.isTransactionActive = true;\r\n        try {\r\n            await this.broadcaster.broadcast('BeforeTransactionStart');\r\n        } catch (err) {\r\n            this.isTransactionActive = false;\r\n            throw err;\r\n        }\r\n        await new Promise<void>(async (ok, fail) => {\r\n            const transactionCallback = (err: any) => {\r\n                if (err) {\r\n                    this.isTransactionActive = false;\r\n                    return fail(err);\r\n                }\r\n                ok();\r\n            };\r\n\r\n            if (this.transactionDepth === 0) {\r\n                const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\r\n                this.databaseConnection = pool.transaction();\r\n                this.connection.logger.logQuery(\"BEGIN TRANSACTION\");\r\n                if (isolationLevel) {\r\n                    this.databaseConnection.begin(this.convertIsolationLevel(isolationLevel), transactionCallback);\r\n                    this.connection.logger.logQuery(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\r\n                } else {\r\n                    this.databaseConnection.begin(transactionCallback);\r\n                }\r\n            } else {\r\n                await this.query(`SAVE TRANSACTION typeorm_${this.transactionDepth}`);\r\n                ok();\r\n            }\r\n            this.transactionDepth += 1;\r\n        });\r\n\r\n        await this.broadcaster.broadcast('AfterTransactionStart');\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.broadcaster.broadcast('BeforeTransactionCommit');\r\n\r\n\r\n        if (this.transactionDepth === 1) {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.databaseConnection.commit(async (err: any) => {\r\n                    if (err) return fail(err);\r\n                    this.isTransactionActive = false;\r\n                    this.databaseConnection = null;\r\n\r\n                    await this.broadcaster.broadcast('AfterTransactionCommit');\r\n\r\n                    ok();\r\n                    this.connection.logger.logQuery(\"COMMIT\");\r\n                    this.transactionDepth -= 1;\r\n                });\r\n            });\r\n        }\r\n        this.transactionDepth -= 1;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.broadcaster.broadcast('BeforeTransactionRollback');\r\n\r\n\r\n        if (this.transactionDepth > 1) {\r\n            await this.query(`ROLLBACK TRANSACTION typeorm_${this.transactionDepth - 1}`);\r\n            this.transactionDepth -= 1;\r\n        } else {\r\n            return new Promise<void>( (ok, fail) => {\r\n                this.databaseConnection.rollback(async (err: any) => {\r\n                    if (err) return fail(err);\r\n                    this.isTransactionActive = false;\r\n                    this.databaseConnection = null;\r\n\r\n                    await this.broadcaster.broadcast('AfterTransactionRollback');\r\n\r\n                    ok();\r\n                    this.connection.logger.logQuery(\"ROLLBACK\");\r\n                    this.transactionDepth -= 1;\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(query: string, parameters?: any[], useStructuredResult = false): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const release = await this.lock.acquire();\r\n\r\n        try {\r\n            this.driver.connection.logger.logQuery(query, parameters, this);\r\n            const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\r\n            const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\r\n            if (parameters && parameters.length) {\r\n                parameters.forEach((parameter, index) => {\r\n                    const parameterName = index.toString();\r\n                    if (parameter instanceof MssqlParameter) {\r\n                        const mssqlParameter = this.mssqlParameterToNativeParameter(parameter);\r\n                        if (mssqlParameter) {\r\n                            request.input(parameterName, mssqlParameter, parameter.value);\r\n                        } else {\r\n                            request.input(parameterName, parameter.value);\r\n                        }\r\n                    } else {\r\n                        request.input(parameterName, parameter);\r\n                    }\r\n                });\r\n            }\r\n            const queryStartTime = +new Date();\r\n\r\n            const raw = await new Promise<any>((ok, fail) => {\r\n                request.query(query, (err: any, raw: any) => {\r\n                    // log slow queries if maxQueryExecution time is set\r\n                    const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\r\n                    const queryEndTime = +new Date();\r\n                    const queryExecutionTime = queryEndTime - queryStartTime;\r\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) {\r\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\r\n                    }\r\n\r\n                    if (err) {\r\n                        fail(new QueryFailedError(query, parameters, err))\r\n                    }\r\n\r\n                    ok(raw);\r\n                });\r\n            });\r\n\r\n            const result = new QueryResult();\r\n\r\n            if (raw?.hasOwnProperty('recordset')) {\r\n                result.records = raw.recordset;\r\n            }\r\n\r\n            if (raw?.hasOwnProperty('rowsAffected')) {\r\n                result.affected = raw.rowsAffected[0];\r\n            }\r\n\r\n            const queryType = query.slice(0, query.indexOf(\" \"));\r\n            switch (queryType) {\r\n                case \"DELETE\":\r\n                    // for DELETE query additionally return number of affected rows\r\n                    result.raw = [raw.recordset, raw.rowsAffected[0]];\r\n                    break;\r\n                default:\r\n                    result.raw = raw.recordset;\r\n            }\r\n\r\n            if (useStructuredResult) {\r\n                return result;\r\n            } else {\r\n                return result.raw;\r\n            }\r\n        } catch (err) {\r\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\r\n            throw err;\r\n        } finally {\r\n            release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns raw data stream.\r\n     */\r\n    async stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const release = await this.lock.acquire();\r\n\r\n        this.driver.connection.logger.logQuery(query, parameters, this);\r\n        const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\r\n        const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\r\n        request.stream = true;\r\n        if (parameters && parameters.length) {\r\n            parameters.forEach((parameter, index) => {\r\n                const parameterName = index.toString();\r\n                if (parameter instanceof MssqlParameter) {\r\n                    request.input(parameterName, this.mssqlParameterToNativeParameter(parameter), parameter.value);\r\n                } else {\r\n                    request.input(parameterName, parameter);\r\n                }\r\n            });\r\n        }\r\n\r\n        request.query(query);\r\n\r\n        // Any event should release the lock.\r\n        request.once(\"row\", release);\r\n        request.once(\"rowsaffected\", release);\r\n        request.once(\"done\", release);\r\n        request.once(\"error\", release);\r\n\r\n        request.on(\"error\", (err: any) => {\r\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\r\n        });\r\n\r\n        if (onEnd) {\r\n            request.on(\"done\", onEnd);\r\n        }\r\n\r\n        if (onError) {\r\n            request.on(\"error\", onError);\r\n        }\r\n\r\n        // This can be done with request.getReadStream() in node-mssql 7.0.0\r\n        // Also, use `require` here to prevent importing it unless we actually need it.\r\n        const { PassThrough } = require(\"stream\");\r\n        return request.pipe(new PassThrough({ objectMode: true }));\r\n    }\r\n\r\n    /**\r\n     * Returns all available database names including system databases.\r\n     */\r\n    async getDatabases(): Promise<string[]> {\r\n        const results: ObjectLiteral[] = await this.query(`EXEC sp_databases`);\r\n        return results.map(result => result[\"DATABASE_NAME\"]);\r\n    }\r\n\r\n    /**\r\n     * Returns all available schema names including system schemas.\r\n     * If database parameter specified, returns schemas of that database.\r\n     */\r\n    async getSchemas(database?: string): Promise<string[]> {\r\n        const query = database ? `SELECT * FROM \"${database}\".\"sys\".\"schema\"` : `SELECT * FROM \"sys\".\"schemas\"`;\r\n        const results: ObjectLiteral[] = await this.query(query);\r\n        return results.map(result => result[\"name\"]);\r\n    }\r\n\r\n    /**\r\n     * Checks if database with the given name exist.\r\n     */\r\n    async hasDatabase(database: string): Promise<boolean> {\r\n        const result = await this.query(`SELECT DB_ID('${database}') as \"db_id\"`);\r\n        const dbId = result[0][\"db_id\"];\r\n        return !!dbId;\r\n    }\r\n\r\n    /**\r\n     * Loads currently using database\r\n     */\r\n    async getCurrentDatabase(): Promise<string> {\r\n        const currentDBQuery = await this.query(`SELECT DB_NAME() AS \"db_name\"`);\r\n        return currentDBQuery[0][\"db_name\"];\r\n    }\r\n\r\n    /**\r\n     * Checks if schema with the given name exist.\r\n     */\r\n    async hasSchema(schema: string): Promise<boolean> {\r\n        const result = await this.query(`SELECT SCHEMA_ID('${schema}') as \"schema_id\"`);\r\n        const schemaId = result[0][\"schema_id\"];\r\n        return !!schemaId;\r\n    }\r\n\r\n    /**\r\n     * Loads currently using database schema\r\n     */\r\n    async getCurrentSchema(): Promise<string> {\r\n        const currentSchemaQuery = await this.query(`SELECT SCHEMA_NAME() AS \"schema_name\"`);\r\n        return currentSchemaQuery[0][\"schema_name\"];\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\r\n        const parsedTableName = this.driver.parseTableName(tableOrName);\r\n\r\n        if (!parsedTableName.database) {\r\n            parsedTableName.database = await this.getCurrentDatabase();\r\n        }\r\n\r\n        if (!parsedTableName.schema) {\r\n            parsedTableName.schema = await this.getCurrentSchema();\r\n        }\r\n\r\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Checks if column exist in the table.\r\n     */\r\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\r\n        const parsedTableName = this.driver.parseTableName(tableOrName);\r\n\r\n        if (!parsedTableName.database) {\r\n            parsedTableName.database = await this.getCurrentDatabase();\r\n        }\r\n\r\n        if (!parsedTableName.schema) {\r\n            parsedTableName.schema = await this.getCurrentSchema();\r\n        }\r\n\r\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}' AND \"COLUMN_NAME\" = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new database.\r\n     */\r\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\r\n        const up = ifNotExist ? `IF DB_ID('${database}') IS NULL CREATE DATABASE \"${database}\"` : `CREATE DATABASE \"${database}\"`;\r\n        const down = `DROP DATABASE \"${database}\"`;\r\n        await this.executeQueries(new Query(up), new Query(down));\r\n    }\r\n\r\n    /**\r\n     * Drops database.\r\n     */\r\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\r\n        const up = ifExist ? `IF DB_ID('${database}') IS NOT NULL DROP DATABASE \"${database}\"` : `DROP DATABASE \"${database}\"`;\r\n        const down = `CREATE DATABASE \"${database}\"`;\r\n        await this.executeQueries(new Query(up), new Query(down));\r\n    }\r\n\r\n    /**\r\n     * Creates table schema.\r\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\r\n     */\r\n    async createSchema(schemaPath: string, ifNotExist?: boolean): Promise<void> {\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        if (schemaPath.indexOf(\".\") === -1) {\r\n            const upQuery = ifNotExist ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schemaPath}\"') END` : `CREATE SCHEMA \"${schemaPath}\"`;\r\n            upQueries.push(new Query(upQuery));\r\n            downQueries.push(new Query(`DROP SCHEMA \"${schemaPath}\"`));\r\n\r\n        } else {\r\n            const dbName = schemaPath.split(\".\")[0];\r\n            const schema = schemaPath.split(\".\")[1];\r\n            const currentDB = await this.getCurrentDatabase();\r\n            upQueries.push(new Query(`USE \"${dbName}\"`));\r\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\r\n\r\n            const upQuery = ifNotExist ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schema}\"') END` : `CREATE SCHEMA \"${schema}\"`;\r\n            upQueries.push(new Query(upQuery));\r\n            downQueries.push(new Query(`DROP SCHEMA \"${schema}\"`));\r\n\r\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\r\n            downQueries.push(new Query(`USE \"${dbName}\"`));\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Drops table schema.\r\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\r\n     */\r\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        if (schemaPath.indexOf(\".\") === -1) {\r\n            const upQuery = ifExist ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schemaPath}\"') END` : `DROP SCHEMA \"${schemaPath}\"`;\r\n            upQueries.push(new Query(upQuery));\r\n            downQueries.push(new Query(`CREATE SCHEMA \"${schemaPath}\"`));\r\n\r\n        } else {\r\n            const dbName = schemaPath.split(\".\")[0];\r\n            const schema = schemaPath.split(\".\")[1];\r\n            const currentDB = await this.getCurrentDatabase();\r\n            upQueries.push(new Query(`USE \"${dbName}\"`));\r\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\r\n\r\n            const upQuery = ifExist ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schema}\"') END` : `DROP SCHEMA \"${schema}\"`;\r\n            upQueries.push(new Query(upQuery));\r\n            downQueries.push(new Query(`CREATE SCHEMA \"${schema}\"`));\r\n\r\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\r\n            downQueries.push(new Query(`USE \"${dbName}\"`));\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Creates a new table.\r\n     */\r\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\r\n        if (ifNotExist) {\r\n            const isTableExist = await this.hasTable(table);\r\n            if (isTableExist) return Promise.resolve();\r\n        }\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        upQueries.push(this.createTableSql(table, createForeignKeys));\r\n        downQueries.push(this.dropTableSql(table));\r\n\r\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\r\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\r\n        if (createForeignKeys)\r\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\r\n\r\n        if (createIndices) {\r\n            table.indices.forEach(index => {\r\n\r\n                // new index may be passed without name. In this case we generate index name manually.\r\n                if (!index.name)\r\n                    index.name = this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\r\n                upQueries.push(this.createIndexSql(table, index));\r\n                downQueries.push(this.dropIndexSql(table, index));\r\n            });\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {\r\n        if (ifExist) {\r\n            const isTableExist = await this.hasTable(tableOrName);\r\n            if (!isTableExist) return Promise.resolve();\r\n        }\r\n\r\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\r\n        const createForeignKeys: boolean = dropForeignKeys;\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\r\n        // to perform drop queries for foreign keys and indices.\r\n\r\n        if (dropIndices) {\r\n            table.indices.forEach(index => {\r\n                upQueries.push(this.dropIndexSql(table, index));\r\n                downQueries.push(this.createIndexSql(table, index));\r\n            });\r\n        }\r\n\r\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\r\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\r\n        if (dropForeignKeys)\r\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\r\n\r\n        upQueries.push(this.dropTableSql(table));\r\n        downQueries.push(this.createTableSql(table, createForeignKeys));\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Creates a new view.\r\n     */\r\n    async createView(view: View): Promise<void> {\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n        upQueries.push(this.createViewSql(view));\r\n        upQueries.push(await this.insertViewDefinitionSql(view));\r\n        downQueries.push(this.dropViewSql(view));\r\n        downQueries.push(await this.deleteViewDefinitionSql(view));\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Drops the view.\r\n     */\r\n    async dropView(target: View|string): Promise<void> {\r\n        const viewName = target instanceof View ? target.name : target;\r\n        const view = await this.getCachedView(viewName);\r\n\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n        upQueries.push(await this.deleteViewDefinitionSql(view));\r\n        upQueries.push(this.dropViewSql(view));\r\n        downQueries.push(await this.insertViewDefinitionSql(view));\r\n        downQueries.push(this.createViewSql(view));\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Renames a table.\r\n     */\r\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\r\n        let newTable = oldTable.clone();\r\n\r\n        // we need database name and schema name to rename FK constraints\r\n        let dbName: string|undefined = undefined;\r\n        let schemaName: string|undefined = undefined;\r\n        let oldTableName: string = oldTable.name;\r\n        const splittedName = oldTable.name.split(\".\");\r\n        if (splittedName.length === 3) {\r\n            dbName = splittedName[0];\r\n            oldTableName = splittedName[2];\r\n            if (splittedName[1] !== \"\")\r\n                schemaName = splittedName[1];\r\n\r\n        } else if (splittedName.length === 2) {\r\n            schemaName = splittedName[0];\r\n            oldTableName = splittedName[1];\r\n        }\r\n\r\n        newTable.name = this.driver.buildTableName(newTableName, schemaName, dbName);\r\n\r\n        // if we have tables with database which differs from database specified in config, we must change currently used database.\r\n        // This need because we can not rename objects from another database.\r\n        const currentDB = await this.getCurrentDatabase();\r\n        if (dbName && dbName !== currentDB) {\r\n            upQueries.push(new Query(`USE \"${dbName}\"`));\r\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\r\n        }\r\n\r\n        // rename table\r\n        upQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(oldTable)}\", \"${newTableName}\"`));\r\n        downQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(newTable)}\", \"${oldTableName}\"`));\r\n\r\n        // rename primary key constraint\r\n        if (newTable.primaryColumns.length > 0) {\r\n            const columnNames = newTable.primaryColumns.map(column => column.name);\r\n\r\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\r\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\r\n\r\n            // rename primary constraint\r\n            upQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(newTable)}.${oldPkName}\", \"${newPkName}\"`));\r\n            downQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(newTable)}.${newPkName}\", \"${oldPkName}\"`));\r\n        }\r\n\r\n        // rename unique constraints\r\n        newTable.uniques.forEach(unique => {\r\n            // build new constraint name\r\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\r\n\r\n            // build queries\r\n            upQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(newTable)}.${unique.name}\", \"${newUniqueName}\"`));\r\n            downQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(newTable)}.${newUniqueName}\", \"${unique.name}\"`));\r\n\r\n            // replace constraint name\r\n            unique.name = newUniqueName;\r\n        });\r\n\r\n        // rename index constraints\r\n        newTable.indices.forEach(index => {\r\n            // build new constraint name\r\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\r\n\r\n            // build queries\r\n            upQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(newTable)}.${index.name}\", \"${newIndexName}\", \"INDEX\"`));\r\n            downQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(newTable)}.${newIndexName}\", \"${index.name}\", \"INDEX\"`));\r\n\r\n            // replace constraint name\r\n            index.name = newIndexName;\r\n        });\r\n\r\n        // rename foreign key constraints\r\n        newTable.foreignKeys.forEach(foreignKey => {\r\n            // build new constraint name\r\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\r\n\r\n            // build queries\r\n            upQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(foreignKey.name!, schemaName, dbName)}\", \"${newForeignKeyName}\"`));\r\n            downQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(newForeignKeyName, schemaName, dbName)}\", \"${foreignKey.name}\"`));\r\n\r\n            // replace constraint name\r\n            foreignKey.name = newForeignKeyName;\r\n        });\r\n\r\n        // change currently used database back to default db.\r\n        if (dbName && dbName !== currentDB) {\r\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\r\n            downQueries.push(new Query(`USE \"${dbName}\"`));\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n\r\n        // rename old table and replace it in cached tabled;\r\n        oldTable.name = newTable.name;\r\n        this.replaceCachedTable(oldTable, newTable);\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column in the table.\r\n     */\r\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const clonedTable = table.clone();\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column, false, true)}`));\r\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\r\n\r\n        // create or update primary key constraint\r\n        if (column.isPrimary) {\r\n            const primaryColumns = clonedTable.primaryColumns;\r\n            // if table already have primary key, me must drop it and recreate again\r\n            if (primaryColumns.length > 0) {\r\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map(column => column.name));\r\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n            }\r\n\r\n            primaryColumns.push(column);\r\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map(column => column.name));\r\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n        }\r\n\r\n        // create column index\r\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\r\n        if (columnIndex) {\r\n            upQueries.push(this.createIndexSql(table, columnIndex));\r\n            downQueries.push(this.dropIndexSql(table, columnIndex));\r\n        }\r\n\r\n        // create unique constraint\r\n        if (column.isUnique) {\r\n            const uniqueConstraint = new TableUnique({\r\n               name: this.connection.namingStrategy.uniqueConstraintName(table, [column.name]),\r\n               columnNames: [column.name]\r\n            });\r\n            clonedTable.uniques.push(uniqueConstraint);\r\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${column.name}\")`));\r\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\r\n        }\r\n\r\n        // remove default constraint\r\n        if (column.default !== null && column.default !== undefined) {\r\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table, column.name);\r\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n\r\n        clonedTable.addColumn(column);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column in the table.\r\n     */\r\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        for (const column of columns) {\r\n            await this.addColumn(tableOrName, column);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\r\n        if (!oldColumn)\r\n            throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\r\n\r\n        let newColumn: TableColumn|undefined = undefined;\r\n        if (newTableColumnOrName instanceof TableColumn) {\r\n            newColumn = newTableColumnOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newTableColumnOrName;\r\n        }\r\n\r\n        await this.changeColumn(table, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        let clonedTable = table.clone();\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\r\n            ? oldTableColumnOrName\r\n            : table.columns.find(column => column.name === oldTableColumnOrName);\r\n        if (!oldColumn)\r\n            throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\r\n\r\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length) {\r\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\r\n            // Also, we recreate column if column type changed\r\n            await this.dropColumn(table, oldColumn);\r\n            await this.addColumn(table, newColumn);\r\n\r\n            // update cloned table\r\n            clonedTable = table.clone();\r\n\r\n        } else {\r\n            if (newColumn.name !== oldColumn.name) {\r\n\r\n                // we need database name and schema name to rename FK constraints\r\n                let dbName: string|undefined = undefined;\r\n                let schemaName: string|undefined = undefined;\r\n                const splittedName = table.name.split(\".\");\r\n                if (splittedName.length === 3) {\r\n                    dbName = splittedName[0];\r\n                    if (splittedName[1] !== \"\")\r\n                        schemaName = splittedName[1];\r\n\r\n                } else if (splittedName.length === 2) {\r\n                    schemaName = splittedName[0];\r\n                }\r\n\r\n                // if we have tables with database which differs from database specified in config, we must change currently used database.\r\n                // This need because we can not rename objects from another database.\r\n                const currentDB = await this.getCurrentDatabase();\r\n                if (dbName && dbName !== currentDB) {\r\n                    upQueries.push(new Query(`USE \"${dbName}\"`));\r\n                    downQueries.push(new Query(`USE \"${currentDB}\"`));\r\n                }\r\n\r\n                // rename the column\r\n                upQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(table)}.${oldColumn.name}\", \"${newColumn.name}\"`));\r\n                downQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(table)}.${newColumn.name}\", \"${oldColumn.name}\"`));\r\n\r\n                if (oldColumn.isPrimary === true) {\r\n                    const primaryColumns = clonedTable.primaryColumns;\r\n\r\n                    // build old primary constraint name\r\n                    const columnNames = primaryColumns.map(column => column.name);\r\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\r\n\r\n                    // replace old column name with new column name\r\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\r\n                    columnNames.push(newColumn.name);\r\n\r\n                    // build new primary constraint name\r\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\r\n\r\n                    // rename primary constraint\r\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(clonedTable)}.${oldPkName}\", \"${newPkName}\"`));\r\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(clonedTable)}.${newPkName}\", \"${oldPkName}\"`));\r\n                }\r\n\r\n                // rename index constraints\r\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\r\n                    // build new constraint name\r\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\r\n                    index.columnNames.push(newColumn.name);\r\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\r\n\r\n                    // build queries\r\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(clonedTable)}.${index.name}\", \"${newIndexName}\", \"INDEX\"`));\r\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(clonedTable)}.${newIndexName}\", \"${index.name}\", \"INDEX\"`));\r\n\r\n                    // replace constraint name\r\n                    index.name = newIndexName;\r\n                });\r\n\r\n                // rename foreign key constraints\r\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\r\n                    // build new constraint name\r\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\r\n                    foreignKey.columnNames.push(newColumn.name);\r\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\r\n\r\n                    // build queries\r\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(foreignKey.name!, schemaName, dbName)}\", \"${newForeignKeyName}\"`));\r\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(newForeignKeyName, schemaName, dbName)}\", \"${foreignKey.name}\"`));\r\n\r\n                    // replace constraint name\r\n                    foreignKey.name = newForeignKeyName;\r\n                });\r\n\r\n                // rename check constraints\r\n                clonedTable.findColumnChecks(oldColumn).forEach(check => {\r\n                    // build new constraint name\r\n                    check.columnNames!.splice(check.columnNames!.indexOf(oldColumn.name), 1);\r\n                    check.columnNames!.push(newColumn.name);\r\n                    const newCheckName = this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression!);\r\n\r\n                    // build queries\r\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(clonedTable)}.${check.name}\", \"${newCheckName}\"`));\r\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(clonedTable)}.${newCheckName}\", \"${check.name}\"`));\r\n\r\n                    // replace constraint name\r\n                    check.name = newCheckName;\r\n                });\r\n\r\n                // rename unique constraints\r\n                clonedTable.findColumnUniques(oldColumn).forEach(unique => {\r\n                    // build new constraint name\r\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\r\n                    unique.columnNames.push(newColumn.name);\r\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\r\n\r\n                    // build queries\r\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(clonedTable)}.${unique.name}\", \"${newUniqueName}\"`));\r\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.getTablePath(clonedTable)}.${newUniqueName}\", \"${unique.name}\"`));\r\n\r\n                    // replace constraint name\r\n                    unique.name = newUniqueName;\r\n                });\r\n\r\n                // rename default constraints\r\n                if (oldColumn.default !== null && oldColumn.default !== undefined) {\r\n                    const oldDefaultName = this.connection.namingStrategy.defaultConstraintName(table, oldColumn.name);\r\n                    const newDefaultName = this.connection.namingStrategy.defaultConstraintName(table, newColumn.name);\r\n\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${oldDefaultName}\"`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${oldDefaultName}\" DEFAULT ${oldColumn.default} FOR \"${newColumn.name}\"`));\r\n\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${newDefaultName}\" DEFAULT ${oldColumn.default} FOR \"${newColumn.name}\"`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${newDefaultName}\"`));\r\n                }\r\n\r\n                // change currently used database back to default db.\r\n                if (dbName && dbName !== currentDB) {\r\n                    upQueries.push(new Query(`USE \"${currentDB}\"`));\r\n                    downQueries.push(new Query(`USE \"${dbName}\"`));\r\n                }\r\n\r\n                // rename old column in the Table object\r\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\r\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\r\n                oldColumn.name = newColumn.name;\r\n            }\r\n\r\n            if (this.isColumnChanged(oldColumn, newColumn, false)) {\r\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN ${this.buildCreateColumnSql(table, newColumn, true, false)}`));\r\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN ${this.buildCreateColumnSql(table, oldColumn, true, false)}`));\r\n            }\r\n\r\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\r\n                const primaryColumns = clonedTable.primaryColumns;\r\n\r\n                // if primary column state changed, we must always drop existed constraint.\r\n                if (primaryColumns.length > 0) {\r\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map(column => column.name));\r\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n                }\r\n\r\n                if (newColumn.isPrimary === true) {\r\n                    primaryColumns.push(newColumn);\r\n                    // update column in table\r\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\r\n                    column!.isPrimary = true;\r\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map(column => column.name));\r\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n\r\n                } else {\r\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\r\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\r\n\r\n                    // update column in table\r\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\r\n                    column!.isPrimary = false;\r\n\r\n                    // if we have another primary keys, we must recreate constraint.\r\n                    if (primaryColumns.length > 0) {\r\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map(column => column.name));\r\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (newColumn.isUnique !== oldColumn.isUnique) {\r\n                if (newColumn.isUnique === true) {\r\n                    const uniqueConstraint = new TableUnique({\r\n                        name: this.connection.namingStrategy.uniqueConstraintName(table, [newColumn.name]),\r\n                        columnNames: [newColumn.name]\r\n                    });\r\n                    clonedTable.uniques.push(uniqueConstraint);\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\r\n\r\n                } else {\r\n                    const uniqueConstraint = clonedTable.uniques.find(unique => {\r\n                        return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);\r\n                    });\r\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint!), 1);\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint!.name}\" UNIQUE (\"${newColumn.name}\")`));\r\n                }\r\n            }\r\n\r\n            if (newColumn.default !== oldColumn.default) {\r\n\r\n                // (note) if there is a previous default, we need to drop its constraint first\r\n                if (oldColumn.default !== null && oldColumn.default !== undefined) {\r\n                    const defaultName = this.connection.namingStrategy.defaultConstraintName(table, oldColumn.name);\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${oldColumn.default} FOR \"${oldColumn.name}\"`));\r\n                }\r\n\r\n                if (newColumn.default !== null && newColumn.default !== undefined) {\r\n                    const defaultName = this.connection.namingStrategy.defaultConstraintName(table, newColumn.name);\r\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${newColumn.default} FOR \"${newColumn.name}\"`));\r\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\r\n                }\r\n            }\r\n\r\n            await this.executeQueries(upQueries, downQueries);\r\n            this.replaceCachedTable(table, clonedTable);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\r\n        for (const {oldColumn, newColumn} of changedColumns) {\r\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\r\n        if (!column)\r\n            throw new TypeORMError(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\r\n\r\n        const clonedTable = table.clone();\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        // drop primary key constraint\r\n        if (column.isPrimary) {\r\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, clonedTable.primaryColumns.map(column => column.name));\r\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\r\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\r\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n\r\n            // update column in table\r\n            const tableColumn = clonedTable.findColumnByName(column.name);\r\n            tableColumn!.isPrimary = false;\r\n\r\n            // if primary key have multiple columns, we must recreate it without dropped column\r\n            if (clonedTable.primaryColumns.length > 0) {\r\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, clonedTable.primaryColumns.map(column => column.name));\r\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\r\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\r\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\r\n            }\r\n        }\r\n\r\n        // drop column index\r\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\r\n        if (columnIndex) {\r\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\r\n            upQueries.push(this.dropIndexSql(table, columnIndex));\r\n            downQueries.push(this.createIndexSql(table, columnIndex));\r\n        }\r\n\r\n        // drop column check\r\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\r\n        if (columnCheck) {\r\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\r\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\r\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\r\n        }\r\n\r\n        // drop column unique\r\n        const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\r\n        if (columnUnique) {\r\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\r\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\r\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\r\n        }\r\n\r\n        // drop default constraint\r\n        if (column.default !== null && column.default !== undefined) {\r\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table, column.name);\r\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\r\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${column.default} FOR \"${column.name}\"`));\r\n        }\r\n\r\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\r\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column, false, false)}`));\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n\r\n        clonedTable.removeColumn(column);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]|string[]): Promise<void> {\r\n        for (const column of columns) {\r\n            await this.dropColumn(tableOrName, column);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new primary key.\r\n     */\r\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const clonedTable = table.clone();\r\n\r\n        const up = this.createPrimaryKeySql(table, columnNames);\r\n\r\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\r\n        clonedTable.columns.forEach(column => {\r\n            if (columnNames.find(columnName => columnName === column.name))\r\n                column.isPrimary = true;\r\n        });\r\n        const down = this.dropPrimaryKeySql(clonedTable);\r\n\r\n        await this.executeQueries(up, down);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Updates composite primary keys.\r\n     */\r\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const clonedTable = table.clone();\r\n        const columnNames = columns.map(column => column.name);\r\n        const upQueries: Query[] = [];\r\n        const downQueries: Query[] = [];\r\n\r\n        // if table already have primary columns, we must drop them.\r\n        const primaryColumns = clonedTable.primaryColumns;\r\n        if (primaryColumns.length > 0) {\r\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map(column => column.name));\r\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\r\n        }\r\n\r\n        // update columns in table.\r\n        clonedTable.columns\r\n            .filter(column => columnNames.indexOf(column.name) !== -1)\r\n            .forEach(column => column.isPrimary = true);\r\n\r\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\r\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\r\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Drops a primary key.\r\n     */\r\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const up = this.dropPrimaryKeySql(table);\r\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\r\n        await this.executeQueries(up, down);\r\n        table.primaryColumns.forEach(column => {\r\n            column.isPrimary = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a new unique constraint.\r\n     */\r\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\r\n        if (!uniqueConstraint.name)\r\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table, uniqueConstraint.columnNames);\r\n\r\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\r\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint);\r\n        await this.executeQueries(up, down);\r\n        table.addUniqueConstraint(uniqueConstraint);\r\n    }\r\n\r\n    /**\r\n     * Creates a new unique constraints.\r\n     */\r\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\r\n        const promises = uniqueConstraints.map(uniqueConstraint => this.createUniqueConstraint(tableOrName, uniqueConstraint));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops unique constraint.\r\n     */\r\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\r\n        if (!uniqueConstraint)\r\n            throw new TypeORMError(`Supplied unique constraint was not found in table ${table.name}`);\r\n\r\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint);\r\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\r\n        await this.executeQueries(up, down);\r\n        table.removeUniqueConstraint(uniqueConstraint);\r\n    }\r\n\r\n    /**\r\n     * Drops an unique constraints.\r\n     */\r\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\r\n        const promises = uniqueConstraints.map(uniqueConstraint => this.dropUniqueConstraint(tableOrName, uniqueConstraint));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new check constraint.\r\n     */\r\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\r\n        if (!checkConstraint.name)\r\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table, checkConstraint.expression!);\r\n\r\n        const up = this.createCheckConstraintSql(table, checkConstraint);\r\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\r\n        await this.executeQueries(up, down);\r\n        table.addCheckConstraint(checkConstraint);\r\n    }\r\n\r\n    /**\r\n     * Creates a new check constraints.\r\n     */\r\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\r\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops check constraint.\r\n     */\r\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\r\n        if (!checkConstraint)\r\n            throw new TypeORMError(`Supplied check constraint was not found in table ${table.name}`);\r\n\r\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\r\n        const down = this.createCheckConstraintSql(table, checkConstraint);\r\n        await this.executeQueries(up, down);\r\n        table.removeCheckConstraint(checkConstraint);\r\n    }\r\n\r\n    /**\r\n     * Drops check constraints.\r\n     */\r\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\r\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new exclusion constraint.\r\n     */\r\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\r\n        throw new TypeORMError(`SqlServer does not support exclusion constraints.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new exclusion constraints.\r\n     */\r\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\r\n        throw new TypeORMError(`SqlServer does not support exclusion constraints.`);\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraint.\r\n     */\r\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\r\n        throw new TypeORMError(`SqlServer does not support exclusion constraints.`);\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraints.\r\n     */\r\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\r\n        throw new TypeORMError(`SqlServer does not support exclusion constraints.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const metadata = this.connection.hasMetadata(table.name) ? this.connection.getMetadata(table.name) : undefined;\r\n\r\n        if (metadata && metadata.treeParentRelation && metadata.treeParentRelation!.isTreeParent && metadata.foreignKeys.find(foreignKey => foreignKey.onDelete !== \"NO ACTION\"))\r\n            throw new TypeORMError(\"SqlServer does not support options in TreeParent.\");\r\n\r\n        // new FK may be passed without name. In this case we generate FK name manually.\r\n        if (!foreignKey.name)\r\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\r\n\r\n        const up = this.createForeignKeySql(table, foreignKey);\r\n        const down = this.dropForeignKeySql(table, foreignKey);\r\n        await this.executeQueries(up, down);\r\n        table.addForeignKey(foreignKey);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\r\n        if (!foreignKey)\r\n            throw new TypeORMError(`Supplied foreign key was not found in table ${table.name}`);\r\n\r\n        const up = this.dropForeignKeySql(table, foreignKey);\r\n        const down = this.createForeignKeySql(table, foreignKey);\r\n        await this.executeQueries(up, down);\r\n        table.removeForeignKey(foreignKey);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // new index may be passed without name. In this case we generate index name manually.\r\n        if (!index.name)\r\n            index.name = this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\r\n\r\n        const up = this.createIndexSql(table, index);\r\n        const down = this.dropIndexSql(table, index);\r\n        await this.executeQueries(up, down);\r\n        table.addIndex(index);\r\n    }\r\n\r\n    /**\r\n     * Creates a new indices\r\n     */\r\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\r\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops an index.\r\n     */\r\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\r\n        if (!index)\r\n            throw new TypeORMError(`Supplied index was not found in table ${table.name}`);\r\n\r\n        const up = this.dropIndexSql(table, index);\r\n        const down = this.createIndexSql(table, index);\r\n        await this.executeQueries(up, down);\r\n        table.removeIndex(index);\r\n    }\r\n\r\n    /**\r\n     * Drops an indices from the table.\r\n     */\r\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\r\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Clears all table contents.\r\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\r\n     */\r\n    async clearTable(tablePath: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`);\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(database?: string): Promise<void> {\r\n        if (database) {\r\n            const isDatabaseExist = await this.hasDatabase(database);\r\n            if (!isDatabaseExist)\r\n                return Promise.resolve();\r\n        }\r\n\r\n        const isAnotherTransactionActive = this.isTransactionActive;\r\n        if (!isAnotherTransactionActive)\r\n            await this.startTransaction();\r\n        try {\r\n            let allViewsSql = database\r\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"VIEWS\"`\r\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"`;\r\n            const allViewsResults: ObjectLiteral[] = await this.query(allViewsSql);\r\n\r\n            await Promise.all(allViewsResults.map(viewResult => {\r\n                // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.\r\n                const dropTableSql = `DROP VIEW \"${viewResult[\"TABLE_SCHEMA\"]}\".\"${viewResult[\"TABLE_NAME\"]}\"`;\r\n                return this.query(dropTableSql);\r\n            }));\r\n\r\n            let allTablesSql = database\r\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\r\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`;\r\n            const allTablesResults: ObjectLiteral[] = await this.query(allTablesSql);\r\n\r\n            if (allTablesResults.length > 0) {\r\n                const tablesByCatalog: { [key: string]: { TABLE_NAME: string, TABLE_SCHEMA: string }[] } = allTablesResults.reduce(\r\n                    (c, { TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME }) => {\r\n                        c[TABLE_CATALOG] = c[TABLE_CATALOG] || [];\r\n                        c[TABLE_CATALOG].push({ TABLE_SCHEMA, TABLE_NAME });\r\n                        return c;\r\n                    },\r\n                    {}\r\n                )\r\n\r\n                const foreignKeysSql = Object.entries(tablesByCatalog).map(([ TABLE_CATALOG, tables ]) => {\r\n                    const conditions = tables.map(({ TABLE_SCHEMA, TABLE_NAME }) => {\r\n                        return `(\"fk\".\"referenced_object_id\" = OBJECT_ID('\"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\"'))`\r\n                    }).join(\" OR \")\r\n\r\n                    return `\r\n                        SELECT DISTINCT '${TABLE_CATALOG}' AS                                              \"TABLE_CATALOG\",\r\n                                        OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\",\r\n                                                           DB_ID('${TABLE_CATALOG}')) AS                   \"TABLE_SCHEMA\",\r\n                                        OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('${TABLE_CATALOG}')) AS \"TABLE_NAME\",\r\n                                        \"fk\".\"name\" AS                                                     \"CONSTRAINT_NAME\"\r\n                        FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" AS \"fk\"\r\n                        WHERE (${conditions})\r\n                    `;\r\n                }).join(\" UNION ALL \");\r\n\r\n                const foreignKeys: { TABLE_CATALOG: string, TABLE_SCHEMA: string, TABLE_NAME: string, CONSTRAINT_NAME: string }[] = await this.query(\r\n                    foreignKeysSql);\r\n\r\n                await Promise.all(foreignKeys.map(async ({\r\n                    TABLE_CATALOG,\r\n                    TABLE_SCHEMA,\r\n                    TABLE_NAME,\r\n                    CONSTRAINT_NAME\r\n                }) => {\r\n                    // Disable the constraint first.\r\n                    await this.query(\r\n                        `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\r\n                        `NOCHECK CONSTRAINT \"${CONSTRAINT_NAME}\"`\r\n                    );\r\n\r\n                    await this.query(\r\n                        `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\r\n                        `DROP CONSTRAINT \"${CONSTRAINT_NAME}\" -- FROM CLEAR`\r\n                    );\r\n                }));\r\n\r\n                await Promise.all(allTablesResults.map(tablesResult => {\r\n                    if (tablesResult[\"TABLE_NAME\"].startsWith(\"#\")) {\r\n                        // don't try to drop temporary tables\r\n                        return;\r\n                    }\r\n\r\n                    const dropTableSql = `DROP TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"`;\r\n                    return this.query(dropTableSql);\r\n                }));\r\n            }\r\n\r\n            if (!isAnotherTransactionActive)\r\n                await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            try { // we throw original error even if rollback thrown an error\r\n                if (!isAnotherTransactionActive)\r\n                    await this.rollbackTransaction();\r\n            } catch (rollbackError) { }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected async loadViews(viewPaths?: string[]): Promise<View[]> {\r\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\r\n        if (!hasTable) {\r\n            return [];\r\n        }\r\n\r\n        if (!viewPaths) {\r\n            viewPaths = [];\r\n        }\r\n\r\n        const currentSchema = await this.getCurrentSchema();\r\n        const currentDatabase = await this.getCurrentDatabase();\r\n\r\n        const dbNames = viewPaths\r\n            .map(viewPath => this.driver.parseTableName(viewPath).database)\r\n            .filter(database => database);\r\n\r\n        if (this.driver.database && !dbNames.find(dbName => dbName === this.driver.database))\r\n            dbNames.push(this.driver.database);\r\n\r\n        const viewsCondition = viewPaths.map(viewPath => {\r\n            let { schema, tableName: name } = this.driver.parseTableName(viewPath);\r\n\r\n            if (!schema) {\r\n                schema = currentSchema;\r\n            }\r\n            return `(\"T\".\"SCHEMA\" = '${schema}' AND \"T\".\"NAME\" = '${name}')`;\r\n        }).join(\" OR \");\r\n\r\n        const query = dbNames.map(dbName => {\r\n            return `SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" ` +\r\n                `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = '${MetadataTableType.VIEW}' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\r\n        }).join(\" UNION ALL \");\r\n\r\n        const dbViews = await this.query(query);\r\n        return dbViews.map((dbView: any) => {\r\n            const view = new View();\r\n            const db = dbView[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbView[\"TABLE_CATALOG\"];\r\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\r\n            view.database = dbView[\"TABLE_CATALOG\"];\r\n            view.schema = dbView[\"schema\"];\r\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema, db);\r\n            view.expression = dbView[\"value\"];\r\n            return view;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a Table from them.\r\n     */\r\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\r\n        // if no tables given then no need to proceed\r\n        if (tableNames && tableNames.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const currentSchema = await this.getCurrentSchema();\r\n        const currentDatabase = await this.getCurrentDatabase();\r\n\r\n        const dbTables: { TABLE_CATALOG: string, TABLE_SCHEMA: string, TABLE_NAME: string }[] = [];\r\n\r\n        if (!tableNames) {\r\n            const databasesSql = `\r\n                SELECT DISTINCT\r\n                    \"name\"\r\n                FROM \"master\".\"dbo\".\"sysdatabases\"\r\n                WHERE \"name\" NOT IN ('master', 'model', 'msdb')\r\n            `;\r\n            const dbDatabases: { name: string }[] = await this.query(databasesSql);\r\n\r\n            const tablesSql = dbDatabases.map(({ name }) => {\r\n                return `\r\n                    SELECT DISTINCT\r\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\r\n                    FROM \"${name}\".\"INFORMATION_SCHEMA\".\"TABLES\"\r\n                    WHERE\r\n                      \"TABLE_TYPE\" = 'BASE TABLE'\r\n                      AND\r\n                      \"TABLE_CATALOG\" = '${name}'\r\n                      AND\r\n                      ISNULL(Objectproperty(Object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), 'IsMSShipped'), 0) = 0\r\n                `;\r\n            }).join(\" UNION ALL \");\r\n\r\n            dbTables.push(...await this.query(tablesSql));\r\n        } else {\r\n            const tableNamesByCatalog = tableNames\r\n                .map(tableName => this.driver.parseTableName(tableName))\r\n                .reduce((c, { database, ...other}) => {\r\n                    database = database || currentDatabase;\r\n                    c[database] = c[database] || []\r\n                    c[database].push({\r\n                        schema: other.schema || currentSchema,\r\n                        tableName: other.tableName\r\n                    });\r\n                    return c;\r\n                }, {} as { [key: string]: { schema: string, tableName: string }[] })\r\n\r\n            const tablesSql = Object.entries(tableNamesByCatalog).map(([ database, tables ]) => {\r\n                const tablesCondition = tables\r\n                    .map(({ schema, tableName }) => {\r\n                        return `(\"TABLE_SCHEMA\" = '${schema}' AND \"TABLE_NAME\" = '${tableName}')`;\r\n                    })\r\n                    .join(\" OR \");\r\n\r\n                return `\r\n                    SELECT DISTINCT\r\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\r\n                    FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\"\r\n                    WHERE\r\n                          \"TABLE_TYPE\" = 'BASE TABLE' AND\r\n                          \"TABLE_CATALOG\" = '${database}' AND\r\n                          ${tablesCondition}\r\n                `;\r\n            }).join(\" UNION ALL \");\r\n\r\n            dbTables.push(...await this.query(tablesSql));\r\n        }\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (dbTables.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const dbTablesByCatalog = dbTables.reduce((c, { TABLE_CATALOG, ...other }) => {\r\n            c[TABLE_CATALOG] = c[TABLE_CATALOG] || [];\r\n            c[TABLE_CATALOG].push(other);\r\n            return c;\r\n        }, {} as { [key: string ]: { TABLE_NAME: string, TABLE_SCHEMA: string }[] })\r\n\r\n        const columnsSql = Object.entries(dbTablesByCatalog).map(([ TABLE_CATALOG, tables ]) => {\r\n            const condition = tables.map(\r\n                ({ TABLE_SCHEMA, TABLE_NAME }) => `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`\r\n            ).join(\"OR\");\r\n\r\n            return `SELECT * FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE (${condition})`;\r\n        }).join(\" UNION ALL \");\r\n\r\n        const constraintsSql = Object.entries(dbTablesByCatalog).map(([ TABLE_CATALOG, tables ]) => {\r\n            const conditions = tables.map(({ TABLE_NAME, TABLE_SCHEMA }) =>\r\n                `(\"columnUsages\".\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"columnUsages\".\"TABLE_NAME\" = '${TABLE_NAME}')`\r\n            ).join(\" OR \")\r\n\r\n            return `SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" ` +\r\n                `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ` +\r\n                `INNER JOIN \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"TABLE_CONSTRAINTS\" \"tableConstraints\" ` +\r\n                `ON ` +\r\n                `\"tableConstraints\".\"CONSTRAINT_NAME\" = \"columnUsages\".\"CONSTRAINT_NAME\" AND ` +\r\n                `\"tableConstraints\".\"TABLE_SCHEMA\" = \"columnUsages\".\"TABLE_SCHEMA\" AND ` +\r\n                `\"tableConstraints\".\"TABLE_NAME\" = \"columnUsages\".\"TABLE_NAME\" ` +\r\n                `LEFT JOIN \"${TABLE_CATALOG}\".\"sys\".\"check_constraints\" \"chk\" ` +\r\n                `ON ` +\r\n                `\"chk\".\"object_id\" = OBJECT_ID(\"columnUsages\".\"TABLE_CATALOG\" + '.' + \"columnUsages\".\"TABLE_SCHEMA\" + '.' + \"columnUsages\".\"CONSTRAINT_NAME\") ` +\r\n                `WHERE ` +\r\n                `(${conditions}) AND ` +\r\n                `\"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')`;\r\n        }).join(\" UNION ALL \");\r\n\r\n        const foreignKeysSql = Object.entries(dbTablesByCatalog).map(([ TABLE_CATALOG, tables ]) => {\r\n            const conditions = tables.map(({ TABLE_NAME, TABLE_SCHEMA }) => `(\"s1\".\"name\" = '${TABLE_SCHEMA}' AND \"t1\".\"name\" = '${TABLE_NAME}')`).join(\" OR \");\r\n\r\n            return `SELECT \"fk\".\"name\" AS \"FK_NAME\", '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", ` +\r\n                `\"col1\".\"name\" AS \"COLUMN_NAME\", \"s2\".\"name\" AS \"REF_SCHEMA\", \"t2\".\"name\" AS \"REF_TABLE\", \"col2\".\"name\" AS \"REF_COLUMN\", ` +\r\n                `\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" ` +\r\n                `FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" \"fk\" ` +\r\n                `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"foreign_key_columns\" \"fkc\" ON \"fkc\".\"constraint_object_id\" = \"fk\".\"object_id\" ` +\r\n                `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t1\" ON \"t1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\r\n                `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s1\" ON \"s1\".\"schema_id\" = \"t1\".\"schema_id\" ` +\r\n                `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t2\" ON \"t2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\r\n                `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s2\" ON \"s2\".\"schema_id\" = \"t2\".\"schema_id\" ` +\r\n                `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col1\" ON \"col1\".\"column_id\" = \"fkc\".\"parent_column_id\" AND \"col1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\r\n                `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col2\" ON \"col2\".\"column_id\" = \"fkc\".\"referenced_column_id\" AND \"col2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\r\n                `WHERE (${conditions})`;\r\n        }).join(\" UNION ALL \");\r\n\r\n        const identityColumnsSql = Object.entries(dbTablesByCatalog).map(([ TABLE_CATALOG, tables ]) => {\r\n            const conditions = tables.map(({ TABLE_NAME, TABLE_SCHEMA }) => `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`).join(\" OR \");\r\n\r\n            return `SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" ` +\r\n                `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\r\n                `WHERE ` +\r\n                `EXISTS(SELECT 1 FROM \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"S\" WHERE OBJECT_ID(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\") = \"S\".\"OBJECT_ID\" AND \"COLUMN_NAME\" = \"S\".\"NAME\" AND \"S\".\"is_identity\" = 1) AND ` +\r\n                `(${conditions})`;\r\n        }).join(\" UNION ALL \");\r\n\r\n        const dbCollationsSql = `SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"`;\r\n\r\n        const indicesSql = Object.entries(dbTablesByCatalog).map(([ TABLE_CATALOG, tables ]) => {\r\n            const conditions = tables.map(({ TABLE_NAME, TABLE_SCHEMA }) => `(\"s\".\"name\" = '${TABLE_SCHEMA}' AND \"t\".\"name\" = '${TABLE_NAME}')`).join(\" OR \")\r\n\r\n            return `SELECT '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", ` +\r\n                `\"ind\".\"name\" AS \"INDEX_NAME\", \"col\".\"name\" AS \"COLUMN_NAME\", \"ind\".\"is_unique\" AS \"IS_UNIQUE\", \"ind\".\"filter_definition\" as \"CONDITION\" ` +\r\n                `FROM \"${TABLE_CATALOG}\".\"sys\".\"indexes\" \"ind\" ` +\r\n                `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"index_columns\" \"ic\" ON \"ic\".\"object_id\" = \"ind\".\"object_id\" AND \"ic\".\"index_id\" = \"ind\".\"index_id\" ` +\r\n                `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col\" ON \"col\".\"object_id\" = \"ic\".\"object_id\" AND \"col\".\"column_id\" = \"ic\".\"column_id\" ` +\r\n                `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t\" ON \"t\".\"object_id\" = \"ind\".\"object_id\" ` +\r\n                `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s\" ON \"s\".\"schema_id\" = \"t\".\"schema_id\" ` +\r\n                `WHERE ` +\r\n                `\"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0 AND ` +\r\n                `(${conditions})`;\r\n        }).join(\" UNION ALL \");\r\n\r\n        const [\r\n            dbColumns,\r\n            dbConstraints,\r\n            dbForeignKeys,\r\n            dbIdentityColumns,\r\n            dbCollations,\r\n            dbIndices\r\n        ]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(columnsSql),\r\n            this.query(constraintsSql),\r\n            this.query(foreignKeysSql),\r\n            this.query(identityColumnsSql),\r\n            this.query(dbCollationsSql),\r\n            this.query(indicesSql),\r\n        ]);\r\n\r\n        // create table schemas for loaded tables\r\n        return await Promise.all(dbTables.map(async dbTable => {\r\n            const table = new Table();\r\n\r\n            const getSchemaFromKey = (dbObject: any, key: string) => {\r\n                return dbObject[key] === currentSchema && (!this.driver.options.schema || this.driver.options.schema === currentSchema)\r\n                    ? undefined\r\n                    : dbObject[key]\r\n            };\r\n\r\n            // We do not need to join schema and database names, when db or schema is by default.\r\n            const db = dbTable[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbTable[\"TABLE_CATALOG\"];\r\n            const schema = getSchemaFromKey(dbTable, \"TABLE_SCHEMA\");\r\n            table.database = dbTable[\"TABLE_CATALOG\"];\r\n            table.schema = dbTable[\"TABLE_SCHEMA\"];\r\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema, db);\r\n\r\n            const defaultCollation = dbCollations.find(dbCollation => dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"])!;\r\n\r\n            // create columns from the loaded columns\r\n            table.columns = dbColumns\r\n                .filter(\r\n                    dbColumn => (\r\n                        dbColumn[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\r\n                        dbColumn[\"TABLE_SCHEMA\"] === dbTable[\"TABLE_SCHEMA\"] &&\r\n                        dbColumn[\"TABLE_CATALOG\"] === dbTable[\"TABLE_CATALOG\"]\r\n                    )\r\n                )\r\n                .map(dbColumn => {\r\n                    const columnConstraints = dbConstraints.filter(dbConstraint => (\r\n                        dbConstraint[\"TABLE_NAME\"] === dbColumn[\"TABLE_NAME\"] &&\r\n                        dbConstraint[\"TABLE_SCHEMA\"] === dbColumn[\"TABLE_SCHEMA\"] &&\r\n                        dbConstraint[\"TABLE_CATALOG\"] === dbColumn[\"TABLE_CATALOG\"] &&\r\n                        dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"]\r\n                    ));\r\n\r\n                    const uniqueConstraints = columnConstraints.filter(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\");\r\n                    const isConstraintComposite = uniqueConstraints.every((uniqueConstraint) => {\r\n                        return dbConstraints.some(dbConstraint => dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\"\r\n                            && dbConstraint[\"CONSTRAINT_NAME\"] === uniqueConstraint[\"CONSTRAINT_NAME\"]\r\n                            && dbConstraint[\"TABLE_SCHEMA\"] === dbColumn[\"TABLE_SCHEMA\"]\r\n                            && dbConstraint[\"TABLE_CATALOG\"] === dbColumn[\"TABLE_CATALOG\"]\r\n                            && dbConstraint[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"])\r\n                    })\r\n\r\n                    const isPrimary = !!columnConstraints.find(constraint =>  constraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\");\r\n                    const isGenerated = !!dbIdentityColumns.find(column => (\r\n                        column[\"TABLE_NAME\"] === dbColumn[\"TABLE_NAME\"] &&\r\n                        column[\"TABLE_SCHEMA\"] === dbColumn[\"TABLE_SCHEMA\"] &&\r\n                        column[\"TABLE_CATALOG\"] === dbColumn[\"TABLE_CATALOG\"] &&\r\n                        column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"]\r\n                    ));\r\n\r\n                    const tableColumn = new TableColumn();\r\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\r\n                    tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\r\n\r\n                    // check only columns that have length property\r\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1 && dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\r\n                        const length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\r\n                        if (length === \"-1\") {\r\n                            tableColumn.length = \"MAX\";\r\n                        } else {\r\n                            tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\r\n                        }\r\n                    }\r\n\r\n                    if (tableColumn.type === \"decimal\" || tableColumn.type === \"numeric\") {\r\n                        if (dbColumn[\"NUMERIC_PRECISION\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"]))\r\n                            tableColumn.precision = dbColumn[\"NUMERIC_PRECISION\"];\r\n                        if (dbColumn[\"NUMERIC_SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"]))\r\n                            tableColumn.scale = dbColumn[\"NUMERIC_SCALE\"];\r\n                    }\r\n\r\n                    if (tableColumn.type === \"nvarchar\") {\r\n                        // Check if this is an enum\r\n                        const columnCheckConstraints = columnConstraints.filter(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"CHECK\");\r\n                        if (columnCheckConstraints.length) {\r\n                            // const isEnumRegexp = new RegExp(\"^\\\\(\\\\[\" + tableColumn.name + \"\\\\]='[^']+'(?: OR \\\\[\" + tableColumn.name + \"\\\\]='[^']+')*\\\\)$\");\r\n                            for (const checkConstraint of columnCheckConstraints) {\r\n                                if (this.isEnumCheckConstraint(checkConstraint[\"CONSTRAINT_NAME\"])) {\r\n                                    // This is an enum constraint, make column into an enum\r\n                                    tableColumn.enum = [];\r\n                                    const enumValueRegexp = new RegExp(\"\\\\[\" + tableColumn.name + \"\\\\]='([^']+)'\", \"g\");\r\n                                    let result;\r\n                                    while ((result = enumValueRegexp.exec(checkConstraint[\"definition\"])) !== null) {\r\n                                        tableColumn.enum.unshift(result[1]);\r\n                                    }\r\n                                    // Skip other column constraints\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    tableColumn.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined\r\n                        ? this.removeParenthesisFromDefault(dbColumn[\"COLUMN_DEFAULT\"])\r\n                        : undefined;\r\n                    tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\r\n                    tableColumn.isPrimary = isPrimary;\r\n                    tableColumn.isUnique = uniqueConstraints.length > 0 && !isConstraintComposite;\r\n                    tableColumn.isGenerated = isGenerated;\r\n                    if (isGenerated)\r\n                        tableColumn.generationStrategy = \"increment\";\r\n                    if (tableColumn.default === \"newsequentialid()\") {\r\n                        tableColumn.isGenerated = true;\r\n                        tableColumn.generationStrategy = \"uuid\";\r\n                        tableColumn.default = undefined;\r\n                    }\r\n\r\n                    // todo: unable to get default charset\r\n                    // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\r\n                    if (dbColumn[\"COLLATION_NAME\"])\r\n                        tableColumn.collation = dbColumn[\"COLLATION_NAME\"] === defaultCollation[\"COLLATION_NAME\"] ? undefined : dbColumn[\"COLLATION_NAME\"];\r\n\r\n                    if (tableColumn.type === \"datetime2\" || tableColumn.type === \"time\" || tableColumn.type === \"datetimeoffset\") {\r\n                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATETIME_PRECISION\"]) ? dbColumn[\"DATETIME_PRECISION\"] : undefined;\r\n                    }\r\n\r\n                    return tableColumn;\r\n                });\r\n\r\n            // find unique constraints of table, group them by constraint name and build TableUnique.\r\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => (\r\n                dbConstraint[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\r\n                dbConstraint[\"TABLE_SCHEMA\"] === dbTable[\"TABLE_SCHEMA\"] &&\r\n                dbConstraint[\"TABLE_CATALOG\"] === dbTable[\"TABLE_CATALOG\"] &&\r\n                dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\"\r\n            )), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\r\n\r\n            table.uniques = tableUniqueConstraints.map(constraint => {\r\n                const uniques = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\r\n                return new TableUnique({\r\n                    name: constraint[\"CONSTRAINT_NAME\"],\r\n                    columnNames: uniques.map(u => u[\"COLUMN_NAME\"])\r\n                });\r\n            });\r\n\r\n            // find check constraints of table, group them by constraint name and build TableCheck.\r\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => (\r\n                dbConstraint[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\r\n                dbConstraint[\"TABLE_SCHEMA\"] === dbTable[\"TABLE_SCHEMA\"] &&\r\n                dbConstraint[\"TABLE_CATALOG\"] === dbTable[\"TABLE_CATALOG\"] &&\r\n                dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\"\r\n            )), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\r\n\r\n            table.checks = tableCheckConstraints\r\n                .filter(constraint => !this.isEnumCheckConstraint(constraint[\"CONSTRAINT_NAME\"]))\r\n                .map(constraint => {\r\n                    const checks = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\r\n                    return new TableCheck({\r\n                        name: constraint[\"CONSTRAINT_NAME\"],\r\n                        columnNames: checks.map(c => c[\"COLUMN_NAME\"]),\r\n                        expression: constraint[\"definition\"]\r\n                    });\r\n                });\r\n\r\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\r\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => (\r\n                dbForeignKey[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\r\n                dbForeignKey[\"TABLE_SCHEMA\"] === dbTable[\"TABLE_SCHEMA\"] &&\r\n                dbForeignKey[\"TABLE_CATALOG\"] === dbTable[\"TABLE_CATALOG\"]\r\n            )), dbForeignKey => dbForeignKey[\"FK_NAME\"]);\r\n\r\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\r\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"]);\r\n\r\n                // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\r\n                const db = dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbForeignKey[\"TABLE_CATALOG\"];\r\n                const schema = getSchemaFromKey(dbForeignKey, \"REF_SCHEMA\");\r\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"REF_TABLE\"], schema, db);\r\n\r\n                return new TableForeignKey({\r\n                    name: dbForeignKey[\"FK_NAME\"],\r\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\r\n                    referencedDatabase: dbForeignKey[\"TABLE_CATALOG\"],\r\n                    referencedSchema: dbForeignKey[\"REF_SCHEMA\"],\r\n                    referencedTableName: referencedTableName,\r\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REF_COLUMN\"]),\r\n                    onDelete: dbForeignKey[\"ON_DELETE\"].replace(\"_\", \" \"), // SqlServer returns NO_ACTION, instead of NO ACTION\r\n                    onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\"_\", \" \") // SqlServer returns NO_ACTION, instead of NO ACTION\r\n                });\r\n            });\r\n\r\n            // find index constraints of table, group them by constraint name and build TableIndex.\r\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => (\r\n                dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\r\n                dbIndex[\"TABLE_SCHEMA\"] === dbTable[\"TABLE_SCHEMA\"] &&\r\n                dbIndex[\"TABLE_CATALOG\"] === dbTable[\"TABLE_CATALOG\"]\r\n            )), dbIndex => dbIndex[\"INDEX_NAME\"]);\r\n\r\n            table.indices = tableIndexConstraints.map(constraint => {\r\n                const indices = dbIndices.filter(index => {\r\n                    return index[\"TABLE_CATALOG\"] === constraint[\"TABLE_CATALOG\"]\r\n                        && index[\"TABLE_SCHEMA\"] === constraint[\"TABLE_SCHEMA\"]\r\n                        && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"]\r\n                        && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\r\n                });\r\n                return new TableIndex(<TableIndexOptions>{\r\n                    table: table,\r\n                    name: constraint[\"INDEX_NAME\"],\r\n                    columnNames: indices.map(i => i[\"COLUMN_NAME\"]),\r\n                    isUnique: constraint[\"IS_UNIQUE\"],\r\n                    where: constraint[\"CONDITION\"]\r\n                });\r\n            });\r\n\r\n            return table;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Builds and returns SQL for create table.\r\n     */\r\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table, column, false, true)).join(\", \");\r\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\r\n\r\n        table.columns\r\n            .filter(column => column.isUnique)\r\n            .forEach(column => {\r\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\r\n                if (!isUniqueExist)\r\n                    table.uniques.push(new TableUnique({\r\n                        name: this.connection.namingStrategy.uniqueConstraintName(table, [column.name]),\r\n                        columnNames: [column.name]\r\n                    }));\r\n            });\r\n\r\n        if (table.uniques.length > 0) {\r\n            const uniquesSql = table.uniques.map(unique => {\r\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table, unique.columnNames);\r\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\r\n            }).join(\", \");\r\n\r\n            sql += `, ${uniquesSql}`;\r\n        }\r\n\r\n        if (table.checks.length > 0) {\r\n            const checksSql = table.checks.map(check => {\r\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table, check.expression!);\r\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\r\n            }).join(\", \");\r\n\r\n            sql += `, ${checksSql}`;\r\n        }\r\n\r\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\r\n            const foreignKeysSql = table.foreignKeys.map(fk => {\r\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n                if (!fk.name)\r\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table, fk.columnNames, this.getTablePath(fk), fk.referencedColumnNames);\r\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n\r\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(this.getTablePath(fk))} (${referencedColumnNames})`;\r\n                if (fk.onDelete)\r\n                    constraint += ` ON DELETE ${fk.onDelete}`;\r\n                if (fk.onUpdate)\r\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\r\n\r\n                return constraint;\r\n            }).join(\", \");\r\n\r\n            sql += `, ${foreignKeysSql}`;\r\n        }\r\n\r\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\r\n        if (primaryColumns.length > 0) {\r\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table, primaryColumns.map(column => column.name));\r\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\r\n        }\r\n\r\n        sql += `)`;\r\n\r\n        return new Query(sql);\r\n    }\r\n\r\n    /**\r\n     * Builds drop table sql.\r\n     */\r\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\r\n        const query = ifExist ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}` : `DROP TABLE ${this.escapePath(tableOrName)}`;\r\n        return new Query(query);\r\n    }\r\n\r\n    protected createViewSql(view: View): Query {\r\n        const parsedName = this.driver.parseTableName(view);\r\n\r\n        // Can't use `escapePath` here because `CREATE VIEW` does not accept database names.\r\n        const viewIdentifier = parsedName.schema ? `\"${parsedName.schema}\".\"${parsedName.tableName}\"` : `\"${parsedName.tableName}\"`;\r\n\r\n        if (typeof view.expression === \"string\") {\r\n            return new Query(`CREATE VIEW ${viewIdentifier} AS ${view.expression}`);\r\n        } else {\r\n            return new Query(`CREATE VIEW ${viewIdentifier} AS ${view.expression(this.connection).getQuery()}`);\r\n        }\r\n    }\r\n\r\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\r\n        const parsedTableName = this.driver.parseTableName(view);\r\n\r\n        if (!parsedTableName.schema) {\r\n            parsedTableName.schema = await this.getCurrentSchema();\r\n        }\r\n\r\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\r\n        return this.insertTypeormMetadataSql({\r\n            type: MetadataTableType.VIEW,\r\n            database: parsedTableName.database,\r\n            schema: parsedTableName.schema,\r\n            name: parsedTableName.tableName,\r\n            value: expression\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Builds drop view sql.\r\n     */\r\n    protected dropViewSql(viewOrPath: View|string): Query {\r\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\r\n    }\r\n\r\n    /**\r\n     * Builds remove view sql.\r\n     */\r\n    protected async deleteViewDefinitionSql(viewOrPath: View|string): Promise<Query> {\r\n        const parsedTableName = this.driver.parseTableName(viewOrPath);\r\n\r\n        if (!parsedTableName.schema) {\r\n            parsedTableName.schema = await this.getCurrentSchema();\r\n        }\r\n\r\n        return this.deleteTypeormMetadataSql({\r\n            type: MetadataTableType.VIEW,\r\n            database: parsedTableName.database,\r\n            schema: parsedTableName.schema,\r\n            name: parsedTableName.tableName\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Builds create index sql.\r\n     */\r\n    protected createIndexSql(table: Table, index: TableIndex): Query {\r\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON ${this.escapePath(table)} (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\r\n    }\r\n\r\n    /**\r\n     * Builds drop index sql.\r\n     */\r\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|string): Query {\r\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\r\n        return new Query(`DROP INDEX \"${indexName}\" ON ${this.escapePath(table)}`);\r\n    }\r\n\r\n    /**\r\n     * Builds create primary key sql.\r\n     */\r\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\r\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table, columnNames);\r\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\r\n    }\r\n\r\n    /**\r\n     * Builds drop primary key sql.\r\n     */\r\n    protected dropPrimaryKeySql(table: Table): Query {\r\n        const columnNames = table.primaryColumns.map(column => column.name);\r\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table, columnNames);\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Builds create unique constraint sql.\r\n     */\r\n    protected createUniqueConstraintSql(table: Table, uniqueConstraint: TableUnique): Query {\r\n        const columnNames = uniqueConstraint.columnNames.map(column => `\"` + column + `\"`).join(\", \");\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`);\r\n    }\r\n\r\n    /**\r\n     * Builds drop unique constraint sql.\r\n     */\r\n    protected dropUniqueConstraintSql(table: Table, uniqueOrName: TableUnique|string): Query {\r\n        const uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Builds create check constraint sql.\r\n     */\r\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\r\n    }\r\n\r\n    /**\r\n     * Builds drop check constraint sql.\r\n     */\r\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\r\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Builds create foreign key sql.\r\n     */\r\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): Query {\r\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\r\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\r\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\r\n        if (foreignKey.onDelete)\r\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\r\n        if (foreignKey.onUpdate)\r\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\r\n\r\n        return new Query(sql);\r\n    }\r\n\r\n    /**\r\n     * Builds drop foreign key sql.\r\n     */\r\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): Query {\r\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\r\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${foreignKeyName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Escapes given table or View path.\r\n     */\r\n    protected escapePath(target: Table|View|string): string {\r\n        const { database, schema, tableName } = this.driver.parseTableName(target);\r\n\r\n        if (database && database !== this.driver.database) {\r\n            if (schema && schema !== this.driver.searchSchema) {\r\n                return `\"${database}\".\"${schema}\".\"${tableName}\"`;\r\n            }\r\n\r\n            return `\"${database}\"..\"${tableName}\"`;\r\n        }\r\n\r\n        if (schema && schema !== this.driver.searchSchema) {\r\n            return `\"${schema}\".\"${tableName}\"`;\r\n        }\r\n\r\n        return `\"${tableName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Concat database name and schema name to the foreign key name.\r\n     * Needs because FK name is relevant to the schema and database.\r\n     */\r\n    protected buildForeignKeyName(fkName: string, schemaName: string|undefined, dbName: string|undefined): string {\r\n        let joinedFkName = fkName;\r\n        if (schemaName && schemaName !== this.driver.searchSchema)\r\n            joinedFkName = schemaName + \".\" + joinedFkName;\r\n        if (dbName && dbName !== this.driver.database)\r\n            joinedFkName = dbName + \".\" + joinedFkName;\r\n\r\n        return joinedFkName;\r\n    }\r\n\r\n    /**\r\n     * Removes parenthesis around default value.\r\n     * Sql server returns default value with parenthesis around, e.g.\r\n     *  ('My text') - for string\r\n     *  ((1)) - for number\r\n     *  (newsequentialId()) - for function\r\n     */\r\n    protected removeParenthesisFromDefault(defaultValue: string): any {\r\n        if (defaultValue.substr(0, 1) !== \"(\")\r\n            return defaultValue;\r\n        const normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\r\n        return this.removeParenthesisFromDefault(normalizedDefault);\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(table: Table, column: TableColumn, skipIdentity: boolean, createDefault: boolean) {\r\n        let c = `\"${column.name}\" ${this.connection.driver.createFullType(column)}`;\r\n\r\n        if (column.enum) {\r\n            const expression = column.name + \" IN (\" + column.enum.map(val => \"'\" + val + \"'\").join(\",\") + \")\";\r\n            const checkName = this.connection.namingStrategy.checkConstraintName(table, expression, true)\r\n            c += ` CONSTRAINT ${checkName} CHECK(${expression})`;\r\n        }\r\n\r\n        if (column.collation)\r\n            c += \" COLLATE \" + column.collation;\r\n\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n\r\n        if (column.isGenerated === true && column.generationStrategy === \"increment\" && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" IDENTITY(1,1)\";\r\n\r\n        if (column.default !== undefined && column.default !== null && createDefault) {\r\n            // we create named constraint to be able to delete this constraint when column been dropped\r\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table, column.name);\r\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT ${column.default}`;\r\n        }\r\n\r\n        if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default) {\r\n            // we create named constraint to be able to delete this constraint when column been dropped\r\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table, column.name);\r\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT NEWSEQUENTIALID()`;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    protected isEnumCheckConstraint(name: string): boolean {\r\n        return name.indexOf(\"CHK_\") !== -1 && name.indexOf(\"_ENUM\") !== -1\r\n    }\r\n\r\n    /**\r\n     * Converts MssqlParameter into real mssql parameter type.\r\n     */\r\n    protected mssqlParameterToNativeParameter(parameter: MssqlParameter): any {\r\n        switch (this.driver.normalizeType({ type: parameter.type as any })) {\r\n            case \"bit\":\r\n                return this.driver.mssql.Bit;\r\n            case \"bigint\":\r\n                return this.driver.mssql.BigInt;\r\n            case \"decimal\":\r\n                return this.driver.mssql.Decimal(...parameter.params);\r\n            case \"float\":\r\n                return this.driver.mssql.Float;\r\n            case \"int\":\r\n                return this.driver.mssql.Int;\r\n            case \"money\":\r\n                return this.driver.mssql.Money;\r\n            case \"numeric\":\r\n                return this.driver.mssql.Numeric(...parameter.params);\r\n            case \"smallint\":\r\n                return this.driver.mssql.SmallInt;\r\n            case \"smallmoney\":\r\n                return this.driver.mssql.SmallMoney;\r\n            case \"real\":\r\n                return this.driver.mssql.Real;\r\n            case \"tinyint\":\r\n                return this.driver.mssql.TinyInt;\r\n            case \"char\":\r\n            case \"nchar\":\r\n                return this.driver.mssql.NChar(...parameter.params);\r\n            case \"text\":\r\n            case \"ntext\":\r\n                return this.driver.mssql.Ntext;\r\n            case \"varchar\":\r\n            case \"nvarchar\":\r\n                return this.driver.mssql.NVarChar(...parameter.params);\r\n            case \"xml\":\r\n                return this.driver.mssql.Xml;\r\n            case \"time\":\r\n                return this.driver.mssql.Time(...parameter.params);\r\n            case \"date\":\r\n                return this.driver.mssql.Date;\r\n            case \"datetime\":\r\n                return this.driver.mssql.DateTime;\r\n            case \"datetime2\":\r\n                return this.driver.mssql.DateTime2(...parameter.params);\r\n            case \"datetimeoffset\":\r\n                return this.driver.mssql.DateTimeOffset(...parameter.params);\r\n            case \"smalldatetime\":\r\n                return this.driver.mssql.SmallDateTime;\r\n            case \"uniqueidentifier\":\r\n                return this.driver.mssql.UniqueIdentifier;\r\n            case \"variant\":\r\n                return this.driver.mssql.Variant;\r\n            case \"binary\":\r\n                return this.driver.mssql.Binary;\r\n            case \"varbinary\":\r\n                return this.driver.mssql.VarBinary(...parameter.params);\r\n            case \"image\":\r\n                return this.driver.mssql.Image;\r\n            case \"udt\":\r\n                return this.driver.mssql.UDT;\r\n            case \"rowversion\":\r\n                return this.driver.mssql.RowVersion;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts string literal of isolation level to enum.\r\n     * The underlying mssql driver requires an enum for the isolation level.\r\n     */\r\n    convertIsolationLevel(isolation: IsolationLevel) {\r\n        const ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL;\r\n        switch (isolation) {\r\n            case \"READ UNCOMMITTED\":\r\n                return ISOLATION_LEVEL.READ_UNCOMMITTED;\r\n            case \"REPEATABLE READ\":\r\n                return ISOLATION_LEVEL.REPEATABLE_READ;\r\n            case \"SERIALIZABLE\":\r\n                return ISOLATION_LEVEL.SERIALIZABLE;\r\n\r\n            case \"READ COMMITTED\":\r\n            default:\r\n                return ISOLATION_LEVEL.READ_COMMITTED;\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}