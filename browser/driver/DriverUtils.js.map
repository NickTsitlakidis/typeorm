{"version":3,"sources":["../browser/src/driver/DriverUtils.ts"],"names":[],"mappings":"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","file":"DriverUtils.js","sourcesContent":["import {Driver} from \"./Driver\";\r\nimport {hash,shorten} from \"../util/StringUtils\";\r\n\r\n/**\r\n * Common driver utility functions.\r\n */\r\nexport class DriverUtils {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Normalizes and builds a new driver options.\r\n     * Extracts settings from connection url and sets to a new options object.\r\n     */\r\n    static buildDriverOptions(options: any, buildOptions?: { useSid: boolean }): any {\r\n        if (options.url) {\r\n            const urlDriverOptions = this.parseConnectionUrl(options.url) as { [key: string]: any };\r\n\r\n            if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\r\n                urlDriverOptions.sid = urlDriverOptions.database;\r\n            }\r\n\r\n            for (const key of Object.keys(urlDriverOptions)) {\r\n                if (typeof urlDriverOptions[key] === \"undefined\") {\r\n                    delete urlDriverOptions[key];\r\n                }\r\n            }\r\n\r\n            return Object.assign({}, options, urlDriverOptions);\r\n        }\r\n        return Object.assign({}, options);\r\n    }\r\n\r\n    /**\r\n     * buildDriverOptions for MongodDB only to support replica set\r\n     */\r\n    static buildMongoDBDriverOptions(options: any, buildOptions?: { useSid: boolean }): any {\r\n        if (options.url) {\r\n            const urlDriverOptions = this.parseMongoDBConnectionUrl(options.url) as { [key: string]: any };\r\n\r\n            if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\r\n                urlDriverOptions.sid = urlDriverOptions.database;\r\n            }\r\n\r\n            for (const key of Object.keys(urlDriverOptions)) {\r\n                if (typeof urlDriverOptions[key] === \"undefined\") {\r\n                    delete urlDriverOptions[key];\r\n                }\r\n            }\r\n\r\n            return Object.assign({}, options, urlDriverOptions);\r\n        }\r\n        return Object.assign({}, options);\r\n    }\r\n\r\n\r\n    /**\r\n     * Joins and shortens alias if needed.\r\n     *\r\n     * If the alias length is greater than the limit allowed by the current\r\n     * driver, replaces it with a shortend string, if the shortend string\r\n     * is still too long, it will then hash the alias.\r\n     *\r\n     * @param driver Current `Driver`.\r\n     * @param buildOptions Optional settings.\r\n     * @param alias Alias parts.\r\n     *\r\n     * @return An alias that is no longer than the divers max alias length.\r\n     */\r\n     static buildAlias({ maxAliasLength }: Driver, buildOptions: { shorten?: boolean, joiner?: string } | string, ...alias: string[]): string {\r\n        if (typeof buildOptions === \"string\") {\r\n            alias.unshift(buildOptions);\r\n            buildOptions = { shorten: false, joiner: \"_\" };\r\n        } else {\r\n            buildOptions = Object.assign({ shorten: false, joiner: \"_\" }, buildOptions);\r\n        }\r\n\r\n        const newAlias = alias.length === 1 ? alias[0] : alias.join(buildOptions.joiner);\r\n        if (maxAliasLength && maxAliasLength > 0 && newAlias.length > maxAliasLength) {\r\n            if (buildOptions.shorten === true) {\r\n                const shortenedAlias = shorten(newAlias);\r\n                if (shortenedAlias.length < maxAliasLength) {\r\n                    return shortenedAlias;\r\n                }\r\n            }\r\n\r\n            return hash(newAlias, { length: maxAliasLength });\r\n        }\r\n\r\n        return newAlias;\r\n    }\r\n\r\n    /**\r\n     * @deprecated use `buildAlias` instead.\r\n     */\r\n    static buildColumnAlias({ maxAliasLength }: Driver, buildOptions: { shorten?: boolean, joiner?: string } | string, ...alias: string[]) {\r\n        return this.buildAlias({ maxAliasLength } as Driver, buildOptions, ...alias);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Extracts connection data from the connection url.\r\n     */\r\n    private static parseConnectionUrl(url: string) {\r\n        const type = url.split(\":\")[0];\r\n        const firstSlashes = url.indexOf(\"//\");\r\n        const preBase = url.substr(firstSlashes + 2);\r\n        const secondSlash = preBase.indexOf(\"/\");\r\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\r\n        let afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\r\n        // remove mongodb query params\r\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\r\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\r\n        }\r\n\r\n        const lastAtSign = base.lastIndexOf(\"@\");\r\n        const usernameAndPassword = base.substr(0, lastAtSign);\r\n        const hostAndPort = base.substr(lastAtSign + 1);\r\n\r\n        let username = usernameAndPassword;\r\n        let password = \"\";\r\n        const firstColon = usernameAndPassword.indexOf(\":\");\r\n        if (firstColon !== -1) {\r\n            username = usernameAndPassword.substr(0, firstColon);\r\n            password = usernameAndPassword.substr(firstColon + 1);\r\n        }\r\n        const [host, port] = hostAndPort.split(\":\");\r\n\r\n        return {\r\n            type: type,\r\n            host: host,\r\n            username: decodeURIComponent(username),\r\n            password: decodeURIComponent(password),\r\n            port: port ? parseInt(port) : undefined,\r\n            database: afterBase || undefined\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Extracts connection data from the connection url for MongoDB to support replica set.\r\n     */\r\n    private static parseMongoDBConnectionUrl(url: string) {\r\n        const type = url.split(\":\")[0];\r\n        const firstSlashes = url.indexOf(\"//\");\r\n        const preBase = url.substr(firstSlashes + 2);\r\n        const secondSlash = preBase.indexOf(\"/\");\r\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\r\n        let afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\r\n        let afterQuestionMark = \"\";\r\n        let host = undefined;\r\n        let port = undefined;\r\n        let hostReplicaSet = undefined;\r\n        let replicaSet = undefined;\r\n\r\n        let optionsObject: any = {};\r\n\r\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\r\n\r\n            // split params\r\n            afterQuestionMark = afterBase.substr((afterBase.indexOf(\"?\") + 1), afterBase.length);\r\n\r\n            const optionsList = afterQuestionMark.split(\"&\");\r\n            let optionKey: string;\r\n            let optionValue: string;\r\n\r\n            // create optionsObject for merge with connectionUrl object before return\r\n            optionsList.forEach(optionItem => {\r\n                optionKey = optionItem.split(\"=\")[0];\r\n                optionValue = optionItem.split(\"=\")[1];\r\n                optionsObject[optionKey] = optionValue;\r\n            });\r\n\r\n            // specific replicaSet value to set options about hostReplicaSet\r\n            replicaSet = optionsObject[\"replicaSet\"];\r\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\r\n        }\r\n\r\n        const lastAtSign = base.lastIndexOf(\"@\");\r\n        const usernameAndPassword = base.substr(0, lastAtSign);\r\n        const hostAndPort = base.substr(lastAtSign + 1);\r\n\r\n        let username = usernameAndPassword;\r\n        let password = \"\";\r\n        const firstColon = usernameAndPassword.indexOf(\":\");\r\n        if (firstColon !== -1) {\r\n            username = usernameAndPassword.substr(0, firstColon);\r\n            password = usernameAndPassword.substr(firstColon + 1);\r\n        }\r\n\r\n        // If replicaSet have value set It as hostlist, If not set like standalone host\r\n        if (replicaSet) {\r\n            hostReplicaSet = hostAndPort;\r\n        } else {\r\n            [host, port] = hostAndPort.split(\":\");\r\n        }\r\n\r\n        let connectionUrl: any = {\r\n            type: type,\r\n            host: host,\r\n            hostReplicaSet: hostReplicaSet,\r\n            username: decodeURIComponent(username),\r\n            password: decodeURIComponent(password),\r\n            port: port ? parseInt(port) : undefined,\r\n            database: afterBase || undefined\r\n        };\r\n\r\n        // Loop to set every options in connectionUrl to object\r\n        for (const [key, value] of Object.entries(optionsObject)) {\r\n            connectionUrl[key] = value;\r\n        }\r\n\r\n        return connectionUrl;\r\n    }\r\n}\r\n"],"sourceRoot":".."}