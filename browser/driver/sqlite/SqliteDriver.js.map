{"version":3,"sources":["../browser/src/driver/sqlite/SqliteDriver.ts"],"names":[],"mappings":"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","file":"SqliteDriver.js","sourcesContent":["import mkdirp from \"mkdirp\";\r\nimport path from \"path\";\r\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\r\nimport { SqliteQueryRunner } from \"./SqliteQueryRunner\";\r\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\r\nimport { PlatformTools } from \"../../platform/PlatformTools\";\r\nimport { Connection } from \"../../connection/Connection\";\r\nimport { SqliteConnectionOptions } from \"./SqliteConnectionOptions\";\r\nimport { ColumnType } from \"../types/ColumnTypes\";\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\";\r\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\r\nimport {ReplicationMode} from \"../types/ReplicationMode\";\r\nimport {filepathToName, isAbsolute} from \"../../util/PathUtils\";\r\n\r\n\r\n/**\r\n * Organizes communication with sqlite DBMS.\r\n */\r\nexport class SqliteDriver extends AbstractSqliteDriver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: SqliteConnectionOptions;\r\n\r\n    /**\r\n     * SQLite underlying library.\r\n     */\r\n    sqlite: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        super(connection);\r\n\r\n        this.connection = connection;\r\n        this.options = connection.options as SqliteConnectionOptions;\r\n        this.database = this.options.database;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n\r\n        // load sqlite package\r\n        this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.queryRunner = undefined;\r\n            this.databaseConnection.close((err: any) => err ? fail(err) : ok());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\r\n        if (!this.queryRunner)\r\n            this.queryRunner = new SqliteQueryRunner(this);\r\n\r\n        return this.queryRunner;\r\n    }\r\n\r\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number | null, scale?: number }): string {\r\n        if ((column.type as any) === Buffer) {\r\n            return \"blob\";\r\n        }\r\n\r\n        return super.normalizeType(column);\r\n    }\r\n\r\n    async afterConnect(): Promise<void> {\r\n        return this.attachDatabases();\r\n    }\r\n\r\n    /**\r\n     * For SQLite, the database may be added in the decorator metadata. It will be a filepath to a database file.\r\n     */\r\n    buildTableName(tableName: string, _schema?: string, database?: string): string {\r\n\r\n        if (!database) return tableName;\r\n        if (this.getAttachedDatabaseHandleByRelativePath(database)) return `${this.getAttachedDatabaseHandleByRelativePath(database)}.${tableName}`;\r\n\r\n        if (database === this.options.database) return tableName;\r\n\r\n        // we use the decorated name as supplied when deriving attach handle (ideally without non-portable absolute path)\r\n        const identifierHash = filepathToName(database);\r\n        // decorated name will be assumed relative to main database file when non absolute. Paths supplied as absolute won't be portable\r\n        const absFilepath = isAbsolute(database) ? database : path.join(this.getMainDatabasePath(), database);\r\n\r\n        this.attachedDatabases[database] = {\r\n            attachFilepathAbsolute: absFilepath,\r\n            attachFilepathRelative: database,\r\n            attachHandle: identifierHash,\r\n        };\r\n\r\n        return `${identifierHash}.${tableName}`;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates connection with the database.\r\n     */\r\n    protected async createDatabaseConnection() {\r\n        await this.createDatabaseDirectory(this.options.database);\r\n\r\n        const databaseConnection: any = await new Promise((ok, fail) => {\r\n            const connection = new this.sqlite.Database(this.options.database, (err: any) => {\r\n                if (err) return fail(err);\r\n                ok(connection);\r\n            });\r\n        });\r\n\r\n        // Internal function to run a command on the connection and fail if an error occured.\r\n        function run(line: string): Promise<void> {\r\n            return new Promise((ok, fail) => {\r\n                databaseConnection.run(line, (err: any) => {\r\n                    if (err) return fail(err);\r\n                    ok();\r\n                });\r\n            });\r\n        }\r\n        // in the options, if encryption key for SQLCipher is setted.\r\n        // Must invoke key pragma before trying to do any other interaction with the database.\r\n        if (this.options.key) {\r\n            await run(`PRAGMA key = ${JSON.stringify(this.options.key)};`);\r\n        }\r\n\r\n        if (this.options.enableWAL) {\r\n            await run(`PRAGMA journal_mode = WAL;`);\r\n        }\r\n\r\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\r\n        // working properly. this also makes onDelete to work with sqlite.\r\n        await run(`PRAGMA foreign_keys = ON;`);\r\n\r\n        return databaseConnection;\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            const sqlite = this.options.driver || PlatformTools.load(\"sqlite3\");\r\n            this.sqlite = sqlite.verbose();\r\n\r\n        } catch (e) {\r\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auto creates database directory if it does not exist.\r\n     */\r\n    protected async createDatabaseDirectory(fullPath: string): Promise<void> {\r\n        await mkdirp(path.dirname(fullPath));\r\n    }\r\n\r\n    /**\r\n     * Performs the attaching of the database files. The attachedDatabase should have been populated during calls to #buildTableName\r\n     * during EntityMetadata production (see EntityMetadata#buildTablePath)\r\n     *\r\n     * https://sqlite.org/lang_attach.html\r\n     */\r\n    protected async attachDatabases() {\r\n\r\n        // @todo - possibly check number of databases (but unqueriable at runtime sadly) - https://www.sqlite.org/limits.html#max_attached\r\n        for await (const {attachHandle, attachFilepathAbsolute} of Object.values(this.attachedDatabases)) {\r\n            await this.createDatabaseDirectory(attachFilepathAbsolute);\r\n            await this.connection.query(`ATTACH \"${attachFilepathAbsolute}\" AS \"${attachHandle}\"`);\r\n        }\r\n    }\r\n\r\n    protected getMainDatabasePath(): string {\r\n        const optionsDb = this.options.database;\r\n        return path.dirname(isAbsolute(optionsDb) ? optionsDb : path.join(process.cwd(), optionsDb));\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}