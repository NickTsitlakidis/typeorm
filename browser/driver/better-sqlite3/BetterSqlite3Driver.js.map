{"version":3,"sources":["../browser/src/driver/better-sqlite3/BetterSqlite3Driver.ts"],"names":[],"mappings":"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","file":"BetterSqlite3Driver.js","sourcesContent":["import mkdirp from \"mkdirp\";\r\nimport path from \"path\";\r\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\r\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\r\nimport { PlatformTools } from \"../../platform/PlatformTools\";\r\nimport { Connection } from \"../../connection/Connection\";\r\nimport { ColumnType } from \"../types/ColumnTypes\";\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\";\r\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\r\nimport { BetterSqlite3ConnectionOptions } from \"./BetterSqlite3ConnectionOptions\";\r\nimport { BetterSqlite3QueryRunner } from \"./BetterSqlite3QueryRunner\";\r\nimport {ReplicationMode} from \"../types/ReplicationMode\";\r\nimport { filepathToName, isAbsolute } from \"../../util/PathUtils\";\r\n\r\n/**\r\n * Organizes communication with sqlite DBMS.\r\n */\r\nexport class BetterSqlite3Driver extends AbstractSqliteDriver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: BetterSqlite3ConnectionOptions;\r\n\r\n    /**\r\n     * SQLite underlying library.\r\n     */\r\n    sqlite: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        super(connection);\r\n\r\n        this.connection = connection;\r\n        this.options = connection.options as BetterSqlite3ConnectionOptions;\r\n        this.database = this.options.database;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n\r\n        // load sqlite package\r\n        this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        this.queryRunner = undefined;\r\n        this.databaseConnection.close();\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\r\n        if (!this.queryRunner)\r\n            this.queryRunner = new BetterSqlite3QueryRunner(this);\r\n\r\n        return this.queryRunner;\r\n    }\r\n\r\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number | null, scale?: number }): string {\r\n        if ((column.type as any) === Buffer) {\r\n            return \"blob\";\r\n        }\r\n\r\n        return super.normalizeType(column);\r\n    }\r\n\r\n    async afterConnect(): Promise<void> {\r\n        return this.attachDatabases();\r\n    }\r\n\r\n    /**\r\n     * For SQLite, the database may be added in the decorator metadata. It will be a filepath to a database file.\r\n     */\r\n    buildTableName(tableName: string, _schema?: string, database?: string): string {\r\n\r\n        if (!database) return tableName;\r\n        if (this.getAttachedDatabaseHandleByRelativePath(database)) return `${this.getAttachedDatabaseHandleByRelativePath(database)}.${tableName}`;\r\n\r\n        if (database === this.options.database) return tableName;\r\n\r\n        // we use the decorated name as supplied when deriving attach handle (ideally without non-portable absolute path)\r\n        const identifierHash = filepathToName(database);\r\n        // decorated name will be assumed relative to main database file when non absolute. Paths supplied as absolute won't be portable\r\n        const absFilepath = isAbsolute(database) ? database : path.join(this.getMainDatabasePath(), database);\r\n\r\n        this.attachedDatabases[database] = {\r\n            attachFilepathAbsolute: absFilepath,\r\n            attachFilepathRelative: database,\r\n            attachHandle: identifierHash,\r\n        };\r\n\r\n        return `${identifierHash}.${tableName}`;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates connection with the database.\r\n     */\r\n    protected async createDatabaseConnection() {\r\n        // not to create database directory if is in memory\r\n        if (this.options.database !== \":memory:\")\r\n            await this.createDatabaseDirectory(path.dirname(this.options.database));\r\n\r\n        const {\r\n            database,\r\n            readonly = false,\r\n            fileMustExist = false,\r\n            timeout = 5000,\r\n            verbose = null,\r\n            prepareDatabase\r\n        } = this.options;\r\n        const databaseConnection = this.sqlite(database, { readonly, fileMustExist, timeout, verbose });\r\n        // in the options, if encryption key for SQLCipher is setted.\r\n        // Must invoke key pragma before trying to do any other interaction with the database.\r\n        if (this.options.key) {\r\n            databaseConnection.exec(`PRAGMA key = ${JSON.stringify(this.options.key)}`);\r\n        }\r\n\r\n        // function to run before a database is used in typeorm.\r\n        if (typeof prepareDatabase === \"function\") {\r\n            prepareDatabase(databaseConnection);\r\n        }\r\n\r\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\r\n        // working properly. this also makes onDelete to work with sqlite.\r\n        databaseConnection.exec(`PRAGMA foreign_keys = ON`);\r\n\r\n        // turn on WAL mode to enhance performance\r\n        databaseConnection.exec(`PRAGMA journal_mode = WAL`);\r\n\r\n        return databaseConnection;\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            const sqlite = this.options.driver || PlatformTools.load(\"better-sqlite3\");\r\n            this.sqlite = sqlite;\r\n\r\n        } catch (e) {\r\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"better-sqlite3\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auto creates database directory if it does not exist.\r\n     */\r\n    protected async createDatabaseDirectory(dbPath: string): Promise<void> {\r\n        await mkdirp(dbPath);\r\n    }\r\n\r\n    /**\r\n     * Performs the attaching of the database files. The attachedDatabase should have been populated during calls to #buildTableName\r\n     * during EntityMetadata production (see EntityMetadata#buildTablePath)\r\n     *\r\n     * https://sqlite.org/lang_attach.html\r\n     */\r\n    protected async attachDatabases() {\r\n\r\n        // @todo - possibly check number of databases (but unqueriable at runtime sadly) - https://www.sqlite.org/limits.html#max_attached\r\n        for await (const {attachHandle, attachFilepathAbsolute} of Object.values(this.attachedDatabases)) {\r\n            await this.createDatabaseDirectory(path.dirname(attachFilepathAbsolute));\r\n            await this.connection.query(`ATTACH \"${attachFilepathAbsolute}\" AS \"${attachHandle}\"`);\r\n        }\r\n    }\r\n\r\n    protected getMainDatabasePath(): string {\r\n        const optionsDb = this.options.database;\r\n        return path.dirname(isAbsolute(optionsDb) ? optionsDb : path.join(this.options.baseDirectory!, optionsDb));\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}