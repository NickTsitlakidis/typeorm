{"version":3,"sources":["../browser/src/driver/better-sqlite3/BetterSqlite3QueryRunner.ts"],"names":[],"mappings":"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","file":"BetterSqlite3QueryRunner.js","sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\r\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\r\nimport { BetterSqlite3Driver } from \"./BetterSqlite3Driver\";\r\nimport { QueryResult } from \"../../query-runner/QueryResult\";\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n *\r\n * Does not support compose primary keys with autoincrement field.\r\n * todo: need to throw exception for this case.\r\n */\r\nexport class BetterSqlite3QueryRunner extends AbstractSqliteQueryRunner {\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: BetterSqlite3Driver;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: BetterSqlite3Driver) {\r\n        super();\r\n        this.driver = driver;\r\n        this.connection = driver.connection;\r\n        this.broadcaster = new Broadcaster(this);\r\n        if (typeof this.driver.options.statementCacheSize === \"number\") {\r\n            this.cacheSize = this.driver.options.statementCacheSize;\r\n        } else {\r\n            this.cacheSize = 100;\r\n        }\r\n    }\r\n\r\n    private cacheSize: number;\r\n    private stmtCache = new Map<string, any>();\r\n\r\n    private async getStmt(query: string) {\r\n        if (this.cacheSize > 0) {\r\n            let stmt = this.stmtCache.get(query);\r\n            if (!stmt) {\r\n                const databaseConnection = await this.connect();\r\n                stmt = databaseConnection.prepare(query);\r\n                this.stmtCache.set(query, stmt);\r\n                while (this.stmtCache.size > this.cacheSize) {\r\n                    // since es6 map keeps the insertion order,\r\n                    // it comes to be FIFO cache\r\n                    const key = this.stmtCache.keys().next().value;\r\n                    this.stmtCache.delete(key);\r\n                }\r\n            }\r\n            return stmt;\r\n        } else {\r\n            const databaseConnection = await this.connect();\r\n            return databaseConnection.prepare(query);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called before migrations are run.\r\n     */\r\n    async beforeMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = OFF`);\r\n    }\r\n\r\n    /**\r\n     * Called after migrations are run.\r\n     */\r\n    async afterMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = ON`);\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(query: string, parameters?: any[], useStructuredResult = false): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const connection = this.driver.connection;\r\n\r\n        parameters = parameters || [];\r\n        for (let i = 0; i < parameters.length; i++) {\r\n            // in \"where\" clauses the parameters are not escaped by the driver\r\n            if (typeof parameters[i] === \"boolean\")\r\n                parameters[i] = +parameters[i];\r\n        }\r\n\r\n        this.driver.connection.logger.logQuery(query, parameters, this);\r\n        const queryStartTime = +new Date();\r\n\r\n        const stmt = await this.getStmt(query);\r\n\r\n        try {\r\n            const result = new QueryResult();\r\n\r\n            if (stmt.reader) {\r\n                const raw = stmt.all.apply(stmt, parameters);\r\n\r\n                result.raw = raw;\r\n\r\n                if (Array.isArray(raw)) {\r\n                    result.records = raw;\r\n                }\r\n\r\n            } else {\r\n                const raw = stmt.run.apply(stmt, parameters);\r\n                result.affected = raw.changes;\r\n                result.raw = raw.lastInsertRowid;\r\n            }\r\n\r\n            // log slow queries if maxQueryExecution time is set\r\n            const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\r\n            const queryEndTime = +new Date();\r\n            const queryExecutionTime = queryEndTime - queryStartTime;\r\n            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\r\n                connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\r\n\r\n            if (!useStructuredResult) {\r\n                return result.raw;\r\n            }\r\n\r\n            return result;\r\n        } catch (err) {\r\n            connection.logger.logQueryError(err, query, parameters, this);\r\n            throw new QueryFailedError(query, parameters, err);\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected async loadTableRecords(tablePath: string, tableOrIndex: \"table\" | \"index\") {\r\n        const [database, tableName] = this.splitTablePath(tablePath);\r\n        const res = await this.query(`SELECT ${database ? `'${database}'` : null} as database, * FROM ${this.escapePath(`${database ? `${database}.` : \"\"}sqlite_master`)} WHERE \"type\" = '${tableOrIndex}' AND \"${tableOrIndex === \"table\" ? \"name\" : \"tbl_name\"}\" IN ('${tableName}')`);\r\n        return res;\r\n    }\r\n    protected async loadPragmaRecords(tablePath: string, pragma: string) {\r\n        const [database, tableName] = this.splitTablePath(tablePath);\r\n        const res = await this.query(`PRAGMA ${database ? `\"${database}\".` : \"\"}${pragma}(\"${tableName}\")`);\r\n        return res;\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}