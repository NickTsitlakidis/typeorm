{"version":3,"sources":["../browser/src/connection/options-reader/ConnectionOptionsXmlReader.ts"],"names":[],"mappings":"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","file":"ConnectionOptionsXmlReader.js","sourcesContent":["import { parseString as xmlParser } from \"xml2js\"\r\nimport { PlatformTools } from \"../../platform/PlatformTools\"\r\nimport { DataSourceOptions } from \"../../data-source/DataSourceOptions\"\r\n\r\n/**\r\n * Reads connection options defined in the xml file.\r\n *\r\n * @deprecated\r\n */\r\nexport class ConnectionOptionsXmlReader {\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Reads connection options from given xml file.\r\n     */\r\n    async read(path: string): Promise<DataSourceOptions[]> {\r\n        const xml = await this.readXml(path)\r\n        return (xml.connection as any[]).map((connection) => {\r\n            return {\r\n                name: connection.$.name,\r\n                type: connection.$.type,\r\n                url: connection.url ? connection.url[0] : undefined,\r\n                host: connection.host ? connection.host[0] : undefined,\r\n                port:\r\n                    connection.port && connection.port[0]\r\n                        ? parseInt(connection.port[0])\r\n                        : undefined,\r\n                username: connection.username\r\n                    ? connection.username[0]\r\n                    : undefined,\r\n                password: connection.password\r\n                    ? connection.password[0]\r\n                    : undefined,\r\n                database: connection.database\r\n                    ? connection.database[0]\r\n                    : undefined,\r\n                sid: connection.sid ? connection.sid[0] : undefined,\r\n                extra: connection.extra ? connection.extra[0] : undefined,\r\n                synchronize: connection.synchronize\r\n                    ? connection.synchronize[0]\r\n                    : undefined,\r\n                entities: connection.entities\r\n                    ? connection.entities[0].entity\r\n                    : [],\r\n                subscribers: connection.subscribers\r\n                    ? connection.subscribers[0].entity\r\n                    : [],\r\n                logging: connection.logging[0]\r\n                    ? connection.logging[0].split(\",\")\r\n                    : undefined,\r\n            }\r\n        })\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Reads xml file contents and returns them in a promise.\r\n     */\r\n    protected readXml(path: string): Promise<any> {\r\n        const xmlOptions = { trim: true, explicitRoot: false }\r\n        return new Promise((ok, fail) => {\r\n            xmlParser(\r\n                PlatformTools.readFileSync(path),\r\n                xmlOptions,\r\n                (err: any, result: any) => (err ? fail(err) : ok(result)),\r\n            )\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}