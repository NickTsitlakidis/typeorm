{"version":3,"sources":["../../src/entity-manager/MongoEntityManager.ts"],"names":[],"mappings":"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","file":"MongoEntityManager.js","sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\r\nimport { EntityManager } from \"./EntityManager\"\r\nimport { EntityTarget } from \"../common/EntityTarget\"\r\nimport {\r\n    AggregationCursor,\r\n    BulkWriteOpResultObject,\r\n    ChangeStream,\r\n    ChangeStreamOptions,\r\n    Code,\r\n    Collection,\r\n    CollectionAggregationOptions,\r\n    CollectionBulkWriteOptions,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    CollectionOptions,\r\n    CollStats,\r\n    CommandCursor,\r\n    Cursor,\r\n    CursorResult,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    InsertOneWriteOpResult,\r\n    InsertWriteOpResult,\r\n    MapReduceOptions,\r\n    MongoCallback,\r\n    MongoCountPreferences,\r\n    MongodbIndexOptions,\r\n    MongoError,\r\n    ObjectID,\r\n    OrderedBulkOperation,\r\n    ParallelCollectionScanOptions,\r\n    ReadPreference,\r\n    ReplaceOneOptions,\r\n    UnorderedBulkOperation,\r\n    UpdateWriteOpResult,\r\n} from \"../driver/mongodb/typings\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\"\r\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\"\r\nimport { DocumentToEntityTransformer } from \"../query-builder/transformer/DocumentToEntityTransformer\"\r\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\r\nimport { PlatformTools } from \"../platform/PlatformTools\"\r\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\r\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\r\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\r\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\r\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\r\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\r\nimport {\r\n    FindOptionsSelect,\r\n    FindOptionsSelectByString,\r\n} from \"../find-options/FindOptionsSelect\"\r\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\r\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\r\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\r\nimport { ObjectUtils } from \"../util/ObjectUtils\"\r\n\r\n/**\r\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\r\n * whatever entity type are you passing.\r\n *\r\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\r\n */\r\nexport class MongoEntityManager extends EntityManager {\r\n    readonly \"@instanceof\" = Symbol.for(\"MongoEntityManager\")\r\n\r\n    get mongoQueryRunner(): MongoQueryRunner {\r\n        return (this.connection.driver as MongoDriver)\r\n            .queryRunner as MongoQueryRunner\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: DataSource) {\r\n        super(connection)\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Overridden Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     */\r\n    async find<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        options?: MongoFindManyOptions<Entity>,\r\n    ): Promise<Entity[]> {\r\n        return this.executeFind(entityClassOrName, options)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     */\r\n    async findBy<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        where: any,\r\n    ): Promise<Entity[]> {\r\n        return this.executeFind(entityClassOrName, where)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     */\r\n    async findAndCount<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        options?: MongoFindManyOptions<Entity>,\r\n    ): Promise<[Entity[], number]> {\r\n        return this.executeFindAndCount(entityClassOrName, options)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given where conditions.\r\n     */\r\n    async findAndCountBy<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        where: any,\r\n    ): Promise<[Entity[], number]> {\r\n        return this.executeFindAndCount(entityClassOrName, where)\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     *\r\n     * @deprecated use `findBy` method instead.\r\n     */\r\n    async findByIds<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        ids: any[],\r\n        optionsOrConditions?: any,\r\n    ): Promise<Entity[]> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        const query =\r\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\r\n                optionsOrConditions,\r\n            ) || {}\r\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID\r\n        query[\"_id\"] = {\r\n            $in: ids.map((id) => {\r\n                if (typeof id === \"string\") {\r\n                    return new objectIdInstance(id)\r\n                }\r\n\r\n                if (ObjectUtils.isObject(id)) {\r\n                    if (id instanceof objectIdInstance) {\r\n                        return id\r\n                    }\r\n\r\n                    const propertyName = metadata.objectIdColumn!.propertyName\r\n\r\n                    if ((id as any)[propertyName] instanceof objectIdInstance) {\r\n                        return (id as any)[propertyName]\r\n                    }\r\n                }\r\n            }),\r\n        }\r\n\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query)\r\n        const deleteDateColumn =\r\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.select)\r\n                cursor.project(\r\n                    this.convertFindOptionsSelectToProjectCriteria(\r\n                        optionsOrConditions.select,\r\n                    ),\r\n                )\r\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\r\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(\r\n                    this.convertFindOptionsOrderToOrderCriteria(\r\n                        optionsOrConditions.order,\r\n                    ),\r\n                )\r\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\r\n                this.filterSoftDeleted(cursor, deleteDateColumn)\r\n            }\r\n        } else if (deleteDateColumn) {\r\n            this.filterSoftDeleted(cursor, deleteDateColumn)\r\n        }\r\n        return await cursor.toArray()\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given find options.\r\n     */\r\n    async findOne<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        options: MongoFindOneOptions<Entity>,\r\n    ): Promise<Entity | null> {\r\n        return this.executeFindOne(entityClassOrName, options)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given WHERE conditions.\r\n     */\r\n    async findOneBy<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        where: any,\r\n    ): Promise<Entity | null> {\r\n        return this.executeFindOne(entityClassOrName, where)\r\n    }\r\n\r\n    /**\r\n     * Finds entity that matches given id.\r\n     *\r\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\r\n     *\r\n     * .findOneBy({\r\n     *     id: 1 // where \"id\" is your primary column name\r\n     * })\r\n     */\r\n    async findOneById<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        id:\r\n            | string\r\n            | string[]\r\n            | number\r\n            | number[]\r\n            | Date\r\n            | Date[]\r\n            | ObjectID\r\n            | ObjectID[],\r\n    ): Promise<Entity | null> {\r\n        return this.executeFindOne(entityClassOrName, id)\r\n    }\r\n\r\n    /**\r\n     * Inserts a given entity into the database.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient INSERT query.\r\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\r\n     * You can execute bulk inserts using this method.\r\n     */\r\n    async insert<Entity>(\r\n        target: EntityTarget<Entity>,\r\n        entity:\r\n            | QueryDeepPartialEntity<Entity>\r\n            | QueryDeepPartialEntity<Entity>[],\r\n    ): Promise<InsertResult> {\r\n        // todo: convert entity to its database name\r\n        const result = new InsertResult()\r\n        if (Array.isArray(entity)) {\r\n            result.raw = await this.insertMany(target, entity)\r\n            Object.keys(result.raw.insertedIds).forEach((key: any) => {\r\n                let insertedId = result.raw.insertedIds[key]\r\n                result.generatedMaps.push(\r\n                    this.connection.driver.createGeneratedMap(\r\n                        this.connection.getMetadata(target),\r\n                        insertedId,\r\n                    )!,\r\n                )\r\n                result.identifiers.push(\r\n                    this.connection.driver.createGeneratedMap(\r\n                        this.connection.getMetadata(target),\r\n                        insertedId,\r\n                    )!,\r\n                )\r\n            })\r\n        } else {\r\n            result.raw = await this.insertOne(target, entity)\r\n            result.generatedMaps.push(\r\n                this.connection.driver.createGeneratedMap(\r\n                    this.connection.getMetadata(target),\r\n                    result.raw.insertedId,\r\n                )!,\r\n            )\r\n            result.identifiers.push(\r\n                this.connection.driver.createGeneratedMap(\r\n                    this.connection.getMetadata(target),\r\n                    result.raw.insertedId,\r\n                )!,\r\n            )\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient UPDATE query.\r\n     * Does not check if entity exist in the database.\r\n     */\r\n    async update<Entity>(\r\n        target: EntityTarget<Entity>,\r\n        criteria:\r\n            | string\r\n            | string[]\r\n            | number\r\n            | number[]\r\n            | Date\r\n            | Date[]\r\n            | ObjectID\r\n            | ObjectID[]\r\n            | FindOptionsWhere<Entity>,\r\n        partialEntity: QueryDeepPartialEntity<Entity>,\r\n    ): Promise<UpdateResult> {\r\n        const result = new UpdateResult()\r\n\r\n        if (Array.isArray(criteria)) {\r\n            const updateResults = await Promise.all(\r\n                (criteria as any[]).map((criteriaItem) => {\r\n                    return this.update(target, criteriaItem, partialEntity)\r\n                }),\r\n            )\r\n\r\n            result.raw = updateResults.map((r) => r.raw)\r\n            result.affected = updateResults\r\n                .map((r) => r.affected || 0)\r\n                .reduce((c, r) => c + r, 0)\r\n            result.generatedMaps = updateResults.reduce(\r\n                (c, r) => c.concat(r.generatedMaps),\r\n                [] as ObjectLiteral[],\r\n            )\r\n        } else {\r\n            const metadata = this.connection.getMetadata(target)\r\n            const mongoResult = await this.updateMany(\r\n                target,\r\n                this.convertMixedCriteria(metadata, criteria),\r\n                { $set: partialEntity },\r\n            )\r\n\r\n            result.raw = mongoResult\r\n            result.affected = mongoResult.modifiedCount\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    /**\r\n     * Deletes entities by a given conditions.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient DELETE query.\r\n     * Does not check if entity exist in the database.\r\n     */\r\n    async delete<Entity>(\r\n        target: EntityTarget<Entity>,\r\n        criteria:\r\n            | string\r\n            | string[]\r\n            | number\r\n            | number[]\r\n            | Date\r\n            | Date[]\r\n            | ObjectID\r\n            | ObjectID[]\r\n            | FindOptionsWhere<Entity>,\r\n    ): Promise<DeleteResult> {\r\n        const result = new DeleteResult()\r\n\r\n        if (Array.isArray(criteria)) {\r\n            const deleteResults = await Promise.all(\r\n                (criteria as any[]).map((criteriaItem) => {\r\n                    return this.delete(target, criteriaItem)\r\n                }),\r\n            )\r\n\r\n            result.raw = deleteResults.map((r) => r.raw)\r\n            result.affected = deleteResults\r\n                .map((r) => r.affected || 0)\r\n                .reduce((c, r) => c + r, 0)\r\n        } else {\r\n            const mongoResult = await this.deleteMany(\r\n                target,\r\n                this.convertMixedCriteria(\r\n                    this.connection.getMetadata(target),\r\n                    criteria,\r\n                ),\r\n            )\r\n\r\n            result.raw = mongoResult\r\n            result.affected = mongoResult.deletedCount\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    createCursor<Entity, T = any>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        query?: ObjectLiteral,\r\n    ): Cursor<T> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.cursor(metadata.tableName, query)\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     * This returns modified version of cursor that transforms each result into Entity model.\r\n     */\r\n    createEntityCursor<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        query?: ObjectLiteral,\r\n    ): Cursor<Entity> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        const cursor = this.createCursor(entityClassOrName, query)\r\n        this.applyEntityTransformationToCursor(metadata, cursor)\r\n        return cursor\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate<Entity, R = any>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        pipeline: ObjectLiteral[],\r\n        options?: CollectionAggregationOptions,\r\n    ): AggregationCursor<R> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.aggregate(\r\n            metadata.tableName,\r\n            pipeline,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     * This returns modified version of cursor that transforms each result into Entity model.\r\n     */\r\n    aggregateEntity<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        pipeline: ObjectLiteral[],\r\n        options?: CollectionAggregationOptions,\r\n    ): AggregationCursor<Entity> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        const cursor = this.mongoQueryRunner.aggregate(\r\n            metadata.tableName,\r\n            pipeline,\r\n            options,\r\n        )\r\n        this.applyEntityTransformationToCursor(metadata, cursor)\r\n        return cursor\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    bulkWrite<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        operations: ObjectLiteral[],\r\n        options?: CollectionBulkWriteOptions,\r\n    ): Promise<BulkWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.bulkWrite(\r\n            metadata.tableName,\r\n            operations,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    count<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        query?: ObjectLiteral,\r\n        options?: MongoCountPreferences,\r\n    ): Promise<number> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.count(metadata.tableName, query, options)\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    countBy<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        query?: ObjectLiteral,\r\n        options?: MongoCountPreferences,\r\n    ): Promise<number> {\r\n        return this.count(entityClassOrName, query, options)\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    createCollectionIndex<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        fieldOrSpec: string | any,\r\n        options?: MongodbIndexOptions,\r\n    ): Promise<string> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.createCollectionIndex(\r\n            metadata.tableName,\r\n            fieldOrSpec,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error.\r\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    createCollectionIndexes<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        indexSpecs: ObjectLiteral[],\r\n    ): Promise<void> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.createCollectionIndexes(\r\n            metadata.tableName,\r\n            indexSpecs,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    deleteMany<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        query: ObjectLiteral,\r\n        options?: CollectionOptions,\r\n    ): Promise<DeleteWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.deleteMany(\r\n            metadata.tableName,\r\n            query,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    deleteOne<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        query: ObjectLiteral,\r\n        options?: CollectionOptions,\r\n    ): Promise<DeleteWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.deleteOne(\r\n            metadata.tableName,\r\n            query,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    distinct<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        key: string,\r\n        query: ObjectLiteral,\r\n        options?: { readPreference?: ReadPreference | string },\r\n    ): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.distinct(\r\n            metadata.tableName,\r\n            key,\r\n            query,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    dropCollectionIndex<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        indexName: string,\r\n        options?: CollectionOptions,\r\n    ): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.dropCollectionIndex(\r\n            metadata.tableName,\r\n            indexName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    dropCollectionIndexes<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n    ): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.dropCollectionIndexes(metadata.tableName)\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndDelete<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        query: ObjectLiteral,\r\n        options?: { projection?: Object; sort?: Object; maxTimeMS?: number },\r\n    ): Promise<FindAndModifyWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.findOneAndDelete(\r\n            metadata.tableName,\r\n            query,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndReplace<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        query: ObjectLiteral,\r\n        replacement: Object,\r\n        options?: FindOneAndReplaceOption,\r\n    ): Promise<FindAndModifyWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.findOneAndReplace(\r\n            metadata.tableName,\r\n            query,\r\n            replacement,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndUpdate<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        query: ObjectLiteral,\r\n        update: Object,\r\n        options?: FindOneAndReplaceOption,\r\n    ): Promise<FindAndModifyWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.findOneAndUpdate(\r\n            metadata.tableName,\r\n            query,\r\n            update,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    geoHaystackSearch<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        x: number,\r\n        y: number,\r\n        options?: GeoHaystackSearchOptions,\r\n    ): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.geoHaystackSearch(\r\n            metadata.tableName,\r\n            x,\r\n            y,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    geoNear<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        x: number,\r\n        y: number,\r\n        options?: GeoNearOptions,\r\n    ): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.geoNear(metadata.tableName, x, y, options)\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    group<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        keys: Object | Array<any> | Function | Code,\r\n        condition: Object,\r\n        initial: Object,\r\n        reduce: Function | Code,\r\n        finalize: Function | Code,\r\n        command: boolean,\r\n        options?: { readPreference?: ReadPreference | string },\r\n    ): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.group(\r\n            metadata.tableName,\r\n            keys,\r\n            condition,\r\n            initial,\r\n            reduce,\r\n            finalize,\r\n            command,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexes<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n    ): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.collectionIndexes(metadata.tableName)\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexExists<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        indexes: string | string[],\r\n    ): Promise<boolean> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.collectionIndexExists(\r\n            metadata.tableName,\r\n            indexes,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    collectionIndexInformation<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        options?: { full: boolean },\r\n    ): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.collectionIndexInformation(\r\n            metadata.tableName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        options?: CollectionOptions,\r\n    ): OrderedBulkOperation {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.initializeOrderedBulkOp(\r\n            metadata.tableName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        options?: CollectionOptions,\r\n    ): UnorderedBulkOperation {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.initializeUnorderedBulkOp(\r\n            metadata.tableName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    insertMany<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        docs: ObjectLiteral[],\r\n        options?: CollectionInsertManyOptions,\r\n    ): Promise<InsertWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.insertMany(\r\n            metadata.tableName,\r\n            docs,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    insertOne<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        doc: ObjectLiteral,\r\n        options?: CollectionInsertOneOptions,\r\n    ): Promise<InsertOneWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.insertOne(metadata.tableName, doc, options)\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    isCapped<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.isCapped(metadata.tableName)\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        options?: {\r\n            batchSize?: number\r\n            readPreference?: ReadPreference | string\r\n        },\r\n    ): CommandCursor {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.listCollectionIndexes(\r\n            metadata.tableName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    mapReduce<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        map: Function | string,\r\n        reduce: Function | string,\r\n        options?: MapReduceOptions,\r\n    ): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.mapReduce(\r\n            metadata.tableName,\r\n            map,\r\n            reduce,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    parallelCollectionScan<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        options?: ParallelCollectionScanOptions,\r\n    ): Promise<Cursor<Entity>[]> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.parallelCollectionScan(\r\n            metadata.tableName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    reIndex<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.reIndex(metadata.tableName)\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    rename<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        newName: string,\r\n        options?: { dropTarget?: boolean },\r\n    ): Promise<Collection<any>> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.rename(\r\n            metadata.tableName,\r\n            newName,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    replaceOne<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        query: ObjectLiteral,\r\n        doc: ObjectLiteral,\r\n        options?: ReplaceOneOptions,\r\n    ): Promise<UpdateWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.replaceOne(\r\n            metadata.tableName,\r\n            query,\r\n            doc,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    stats<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        options?: { scale: number },\r\n    ): Promise<CollStats> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.stats(metadata.tableName, options)\r\n    }\r\n\r\n    watch<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        pipeline?: Object[],\r\n        options?: ChangeStreamOptions,\r\n    ): ChangeStream {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.watch(\r\n            metadata.tableName,\r\n            pipeline,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    updateMany<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        query: ObjectLiteral,\r\n        update: ObjectLiteral,\r\n        options?: { upsert?: boolean; w?: any; wtimeout?: number; j?: boolean },\r\n    ): Promise<UpdateWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.updateMany(\r\n            metadata.tableName,\r\n            query,\r\n            update,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    updateOne<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        query: ObjectLiteral,\r\n        update: ObjectLiteral,\r\n        options?: ReplaceOneOptions,\r\n    ): Promise<UpdateWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName)\r\n        return this.mongoQueryRunner.updateOne(\r\n            metadata.tableName,\r\n            query,\r\n            update,\r\n            options,\r\n        )\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Converts FindManyOptions to mongodb query.\r\n     */\r\n    protected convertFindManyOptionsOrConditionsToMongodbQuery<Entity>(\r\n        optionsOrConditions:\r\n            | MongoFindManyOptions<Entity>\r\n            | Partial<Entity>\r\n            | any[]\r\n            | undefined,\r\n    ): ObjectLiteral | undefined {\r\n        if (!optionsOrConditions) return undefined\r\n\r\n        if (FindOptionsUtils.isFindManyOptions<Entity>(optionsOrConditions))\r\n            // If where condition is passed as a string which contains sql we have to ignore\r\n            // as mongo is not a sql database\r\n            return typeof optionsOrConditions.where === \"string\"\r\n                ? {}\r\n                : optionsOrConditions.where\r\n\r\n        return optionsOrConditions\r\n    }\r\n\r\n    /**\r\n     * Converts FindOneOptions to mongodb query.\r\n     */\r\n    protected convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(\r\n        optionsOrConditions:\r\n            | MongoFindOneOptions<Entity>\r\n            | Partial<Entity>\r\n            | undefined,\r\n    ): ObjectLiteral | undefined {\r\n        if (!optionsOrConditions) return undefined\r\n\r\n        if (FindOptionsUtils.isFindOneOptions<Entity>(optionsOrConditions))\r\n            // If where condition is passed as a string which contains sql we have to ignore\r\n            // as mongo is not a sql database\r\n            return typeof optionsOrConditions.where === \"string\"\r\n                ? {}\r\n                : optionsOrConditions.where\r\n\r\n        return optionsOrConditions\r\n    }\r\n\r\n    /**\r\n     * Converts FindOptions into mongodb order by criteria.\r\n     */\r\n    protected convertFindOptionsOrderToOrderCriteria(order: ObjectLiteral) {\r\n        return Object.keys(order).reduce((orderCriteria, key) => {\r\n            switch (order[key]) {\r\n                case \"DESC\":\r\n                    orderCriteria[key] = -1\r\n                    break\r\n                case \"ASC\":\r\n                    orderCriteria[key] = 1\r\n                    break\r\n                default:\r\n                    orderCriteria[key] = order[key]\r\n            }\r\n            return orderCriteria\r\n        }, {} as ObjectLiteral)\r\n    }\r\n\r\n    /**\r\n     * Converts FindOptions into mongodb select by criteria.\r\n     */\r\n    protected convertFindOptionsSelectToProjectCriteria(\r\n        selects: FindOptionsSelect<any> | FindOptionsSelectByString<any>,\r\n    ) {\r\n        if (Array.isArray(selects)) {\r\n            return selects.reduce((projectCriteria, key) => {\r\n                projectCriteria[key] = 1\r\n                return projectCriteria\r\n            }, {} as any)\r\n        } else {\r\n            // todo: implement\r\n            return {}\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ensures given id is an id for query.\r\n     */\r\n    protected convertMixedCriteria(\r\n        metadata: EntityMetadata,\r\n        idMap: any,\r\n    ): ObjectLiteral {\r\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID\r\n\r\n        // check first if it's ObjectId compatible:\r\n        // string, number, Buffer, ObjectId or ObjectId-like\r\n        if (objectIdInstance.isValid(idMap)) {\r\n            return {\r\n                _id: new objectIdInstance(idMap),\r\n            }\r\n        }\r\n\r\n        // if it's some other type of object build a query from the columns\r\n        // this check needs to be after the ObjectId check, because a valid ObjectId is also an Object instance\r\n        if (ObjectUtils.isObject(idMap)) {\r\n            return metadata.columns.reduce((query, column) => {\r\n                const columnValue = column.getEntityValue(idMap)\r\n                if (columnValue !== undefined)\r\n                    query[column.databasePath] = columnValue\r\n                return query\r\n            }, {} as any)\r\n        }\r\n\r\n        // last resort: try to convert it to an ObjectID anyway\r\n        // most likely it will fail, but we want to be backwards compatible and keep the same thrown Errors.\r\n        // it can still pass with null/undefined\r\n        return {\r\n            _id: new objectIdInstance(idMap),\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Overrides cursor's toArray and next methods to convert results to entity automatically.\r\n     */\r\n    protected applyEntityTransformationToCursor<Entity>(\r\n        metadata: EntityMetadata,\r\n        cursor: Cursor<Entity> | AggregationCursor<Entity>,\r\n    ) {\r\n        // mongdb-3.7 exports Cursor, mongodb-4.2 exports FindCursor, provide support for both.\r\n        const ParentCursor =\r\n            PlatformTools.load(\"mongodb\").Cursor ||\r\n            PlatformTools.load(\"mongodb\").FindCursor\r\n        const queryRunner = this.mongoQueryRunner\r\n        cursor.toArray = function (callback?: MongoCallback<Entity[]>) {\r\n            if (callback) {\r\n                ParentCursor.prototype.toArray.call(\r\n                    this,\r\n                    (error: MongoError, results: Entity[]): void => {\r\n                        if (error) {\r\n                            callback(error, results)\r\n                            return\r\n                        }\r\n\r\n                        const transformer = new DocumentToEntityTransformer()\r\n                        const entities = transformer.transformAll(\r\n                            results,\r\n                            metadata,\r\n                        )\r\n\r\n                        // broadcast \"load\" events\r\n                        queryRunner.broadcaster\r\n                            .broadcast(\"Load\", metadata, entities)\r\n                            .then(() => callback(error, entities))\r\n                    },\r\n                )\r\n            } else {\r\n                return ParentCursor.prototype.toArray\r\n                    .call(this)\r\n                    .then((results: Entity[]) => {\r\n                        const transformer = new DocumentToEntityTransformer()\r\n                        const entities = transformer.transformAll(\r\n                            results,\r\n                            metadata,\r\n                        )\r\n\r\n                        // broadcast \"load\" events\r\n                        return queryRunner.broadcaster\r\n                            .broadcast(\"Load\", metadata, entities)\r\n                            .then(() => entities)\r\n                    })\r\n            }\r\n        }\r\n        cursor.next = function (callback?: MongoCallback<CursorResult>) {\r\n            if (callback) {\r\n                ParentCursor.prototype.next.call(\r\n                    this,\r\n                    (error: MongoError, result: CursorResult): void => {\r\n                        if (error || !result) {\r\n                            callback(error, result)\r\n                            return\r\n                        }\r\n\r\n                        const transformer = new DocumentToEntityTransformer()\r\n                        const entity = transformer.transform(result, metadata)\r\n\r\n                        // broadcast \"load\" events\r\n\r\n                        queryRunner.broadcaster\r\n                            .broadcast(\"Load\", metadata, [entity])\r\n                            .then(() => callback(error, entity))\r\n                    },\r\n                )\r\n            } else {\r\n                return ParentCursor.prototype.next\r\n                    .call(this)\r\n                    .then((result: Entity) => {\r\n                        if (!result) return result\r\n\r\n                        const transformer = new DocumentToEntityTransformer()\r\n                        const entity = transformer.transform(result, metadata)\r\n\r\n                        // broadcast \"load\" events\r\n                        return queryRunner.broadcaster\r\n                            .broadcast(\"Load\", metadata, [entity])\r\n                            .then(() => entity)\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    protected filterSoftDeleted<Entity>(\r\n        cursor: Cursor<Entity>,\r\n        deleteDateColumn: ColumnMetadata,\r\n    ) {\r\n        cursor.filter({ $where: `this.${deleteDateColumn.propertyName}==null` })\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions and/or find options.\r\n     */\r\n    protected async executeFindOne<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        optionsOrConditions?: any,\r\n        maybeOptions?: MongoFindOneOptions<Entity>,\r\n    ): Promise<Entity | null> {\r\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID\r\n        const id =\r\n            optionsOrConditions instanceof objectIdInstance ||\r\n            typeof optionsOrConditions === \"string\"\r\n                ? optionsOrConditions\r\n                : undefined\r\n        const findOneOptionsOrConditions = (\r\n            id ? maybeOptions : optionsOrConditions\r\n        ) as any\r\n        const query =\r\n            this.convertFindOneOptionsOrConditionsToMongodbQuery(\r\n                findOneOptionsOrConditions,\r\n            ) || {}\r\n        if (id) {\r\n            query[\"_id\"] =\r\n                id instanceof objectIdInstance ? id : new objectIdInstance(id)\r\n        }\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query)\r\n        const deleteDateColumn =\r\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\r\n        if (FindOptionsUtils.isFindOneOptions(findOneOptionsOrConditions)) {\r\n            if (findOneOptionsOrConditions.select)\r\n                cursor.project(\r\n                    this.convertFindOptionsSelectToProjectCriteria(\r\n                        findOneOptionsOrConditions.select,\r\n                    ),\r\n                )\r\n            if (findOneOptionsOrConditions.order)\r\n                cursor.sort(\r\n                    this.convertFindOptionsOrderToOrderCriteria(\r\n                        findOneOptionsOrConditions.order,\r\n                    ),\r\n                )\r\n            if (deleteDateColumn && !findOneOptionsOrConditions.withDeleted) {\r\n                this.filterSoftDeleted(cursor, deleteDateColumn)\r\n            }\r\n        } else if (deleteDateColumn) {\r\n            this.filterSoftDeleted(cursor, deleteDateColumn)\r\n        }\r\n\r\n        // const result = await cursor.limit(1).next();\r\n        const result = await cursor.limit(1).toArray()\r\n        return result.length > 0 ? result[0] : null\r\n    }\r\n\r\n    protected async executeFind<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        optionsOrConditions?:\r\n            | MongoFindManyOptions<Entity>\r\n            | Partial<Entity>\r\n            | any[],\r\n    ): Promise<Entity[]> {\r\n        const query =\r\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\r\n                optionsOrConditions,\r\n            )\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query)\r\n        const deleteDateColumn =\r\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\r\n\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.select)\r\n                cursor.project(\r\n                    this.convertFindOptionsSelectToProjectCriteria(\r\n                        optionsOrConditions.select,\r\n                    ),\r\n                )\r\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\r\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(\r\n                    this.convertFindOptionsOrderToOrderCriteria(\r\n                        optionsOrConditions.order,\r\n                    ),\r\n                )\r\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\r\n                this.filterSoftDeleted(cursor, deleteDateColumn)\r\n            }\r\n        } else if (deleteDateColumn) {\r\n            this.filterSoftDeleted(cursor, deleteDateColumn)\r\n        }\r\n        return cursor.toArray()\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    async executeFindAndCount<Entity>(\r\n        entityClassOrName: EntityTarget<Entity>,\r\n        optionsOrConditions?: MongoFindManyOptions<Entity> | Partial<Entity>,\r\n    ): Promise<[Entity[], number]> {\r\n        const query =\r\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\r\n                optionsOrConditions,\r\n            )\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query)\r\n        const deleteDateColumn =\r\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\r\n\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.select)\r\n                cursor.project(\r\n                    this.convertFindOptionsSelectToProjectCriteria(\r\n                        optionsOrConditions.select,\r\n                    ),\r\n                )\r\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\r\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(\r\n                    this.convertFindOptionsOrderToOrderCriteria(\r\n                        optionsOrConditions.order,\r\n                    ),\r\n                )\r\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\r\n                this.filterSoftDeleted(cursor, deleteDateColumn)\r\n            }\r\n        } else if (deleteDateColumn) {\r\n            this.filterSoftDeleted(cursor, deleteDateColumn)\r\n        }\r\n        const [results, count] = await Promise.all<any>([\r\n            cursor.toArray(),\r\n            this.count(entityClassOrName, query),\r\n        ])\r\n        return [results, parseInt(count)]\r\n    }\r\n}\r\n"],"sourceRoot":".."}