{"version":3,"sources":["../../src/commands/MigrationRunCommand.ts"],"names":[],"mappings":";;;;AAAA,sCAA4C;AAC5C,iFAA8E;AAE9E,4DAAmC;AAEnC,2DAA0D;AAE1D;;GAEG;AACH;IAAA;QAEI,YAAO,GAAG,eAAe,CAAC;QAC1B,aAAQ,GAAG,8BAA8B,CAAC;QAC1C,YAAO,GAAG,gBAAgB,CAAC;IA0E/B,CAAC;IAxEG,qCAAO,GAAP,UAAQ,IAAgB;QACpB,OAAO,IAAI;aACN,MAAM,CAAC,YAAY,EAAE;YAClB,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,8CAA8C;SAC3D,CAAC;aACD,MAAM,CAAC,aAAa,EAAE;YACnB,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,uFAAuF;SACpG,CAAC;aACD,MAAM,CAAC,QAAQ,EAAE;YACd,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,qCAAO,GAAb,UAAc,IAAqB;;;;;;;wBAC/B,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,gBAAgB,EAAE;4BAChC,OAAO,CAAC,GAAG,CAAC,oEAAoE,CAAC,CAAC;yBACrF;wBAEG,UAAU,GAAyB,SAAS,CAAC;;;;wBAEvC,uBAAuB,GAAG,IAAI,iDAAuB,CAAC;4BACxD,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE;4BACnB,UAAU,EAAE,IAAI,CAAC,MAAa;yBACjC,CAAC,CAAC;wBACuB,qBAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAiB,CAAC,EAAA;;wBAA7E,iBAAiB,GAAG,SAAyD;wBACnF,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;4BAC7B,WAAW,EAAE,EAAE;4BACf,WAAW,EAAE,KAAK;4BAClB,aAAa,EAAE,KAAK;4BACpB,UAAU,EAAE,KAAK;4BACjB,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;yBACxC,CAAC,CAAC;wBACU,qBAAM,IAAA,0BAAgB,EAAC,iBAAiB,CAAC,EAAA;;wBAAtD,UAAU,GAAG,SAAyC,CAAC;wBAEjD,OAAO,GAAG;4BACZ,WAAW,EAAE,MAAA,iBAAiB,CAAC,yBAAyB,mCAAI,KAAgC;yBAC/F,CAAC;wBAEF,QAAQ,IAAI,CAAC,CAAC,EAAE;4BACZ,KAAK,KAAK;gCACN,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC;gCAC5B,MAAM;4BACV,KAAK,MAAM,CAAC;4BACZ,KAAK,OAAO;gCACR,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC;gCAC7B,MAAM;4BACV,KAAK,MAAM;gCACP,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC;gCAC7B,MAAM;4BACV,QAAQ;4BACJ,OAAO;yBACd;wBAED,qBAAM,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,EAAA;;wBAAvC,SAAuC,CAAC;wBACxC,qBAAM,UAAU,CAAC,KAAK,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;wBACzB,4BAA4B;wBAC5B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;6BAGZ,UAAU,EAAV,wBAAU;wBAAE,qBAAO,UAAyB,CAAC,KAAK,EAAE,EAAA;;wBAAxC,SAAwC,CAAC;;;wBAEzD,6BAAa,CAAC,SAAS,CAAC,6BAA6B,EAAE,KAAG,CAAC,CAAC;wBAC5D,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;;;KAEvB;IAEL,0BAAC;AAAD,CA9EA,AA8EC,IAAA;AA9EY,kDAAmB","file":"MigrationRunCommand.js","sourcesContent":["import {createConnection} from \"../globals\";\r\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport * as process from \"process\";\r\nimport * as yargs from \"yargs\";\r\nimport { PlatformTools } from \"../platform/PlatformTools\";\r\n\r\n/**\r\n * Runs migration command.\r\n */\r\nexport class MigrationRunCommand implements yargs.CommandModule {\r\n\r\n    command = \"migration:run\";\r\n    describe = \"Runs all pending migrations.\";\r\n    aliases = \"migrations:run\";\r\n\r\n    builder(args: yargs.Argv) {\r\n        return args\r\n            .option(\"connection\", {\r\n                alias: \"c\",\r\n                default: \"default\",\r\n                describe: \"Name of the connection on which run a query.\"\r\n            })\r\n            .option(\"transaction\", {\r\n                alias: \"t\",\r\n                default: \"default\",\r\n                describe: \"Indicates if transaction should be used or not for migration run. Enabled by default.\"\r\n            })\r\n            .option(\"config\", {\r\n                alias: \"f\",\r\n                default: \"ormconfig\",\r\n                describe: \"Name of the file with connection configuration.\"\r\n            });\r\n    }\r\n\r\n    async handler(args: yargs.Arguments) {\r\n        if (args._[0] === \"migrations:run\") {\r\n            console.log(\"'migrations:run' is deprecated, please use 'migration:run' instead\");\r\n        }\r\n\r\n        let connection: Connection|undefined = undefined;\r\n        try {\r\n            const connectionOptionsReader = new ConnectionOptionsReader({\r\n                root: process.cwd(),\r\n                configName: args.config as any\r\n            });\r\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\r\n            Object.assign(connectionOptions, {\r\n                subscribers: [],\r\n                synchronize: false,\r\n                migrationsRun: false,\r\n                dropSchema: false,\r\n                logging: [\"query\", \"error\", \"schema\"]\r\n            });\r\n            connection = await createConnection(connectionOptions);\r\n\r\n            const options = {\r\n                transaction: connectionOptions.migrationsTransactionMode ?? \"all\" as \"all\" | \"none\" | \"each\",\r\n            };\r\n\r\n            switch (args.t) {\r\n                case \"all\":\r\n                    options.transaction = \"all\";\r\n                    break;\r\n                case \"none\":\r\n                case \"false\":\r\n                    options.transaction = \"none\";\r\n                    break;\r\n                case \"each\":\r\n                    options.transaction = \"each\";\r\n                    break;\r\n                default:\r\n                    // noop\r\n            }\r\n\r\n            await connection.runMigrations(options);\r\n            await connection.close();\r\n            // exit process if no errors\r\n            process.exit(0);\r\n\r\n        } catch (err) {\r\n            if (connection) await (connection as Connection).close();\r\n\r\n            PlatformTools.logCmdErr(\"Error during migration run:\", err);\r\n            process.exit(1);\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}